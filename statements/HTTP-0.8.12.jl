precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.URIs.RegexAndMatchData, 1}, HTTP.URIs.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{Type{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{Type{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.pathof), Module})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{getfield(Base, Symbol("#@show")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Distributed.flush_gc_msgs)})
precompile(Tuple{getfield(Distributed, Symbol("#135#136"))})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{Base.Colon, UInt8, UInt8})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc), UInt8})
precompile(Tuple{Type{Char}, UInt8})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), UInt8, UInt8})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.:(+)), UInt8, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}, UInt8})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), String, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.PipeEndpoint, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.PipeEndpoint}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.string), String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{getfield(Main, Symbol("#hex#6")), Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.:(*)), String, String, String})
precompile(Tuple{Type{Task}, Any})
precompile(Tuple{typeof(Base.schedule), Task})
precompile(Tuple{getfield(Base, Symbol("#Timer#505#506")), Float64, Type{Base.Timer}, Int64})
precompile(Tuple{typeof(Base.sleep), Int64})
precompile(Tuple{getfield(Main, Symbol("#3#7")){String, Int64, Int64}})
precompile(Tuple{getfield(Sockets, Symbol("##bind#8")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.bind), Sockets.TCPServer, Sockets.IPv6, UInt16})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Nothing, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(Main, Symbol("#4#8")){String, Int64, Int64}, String, Int64})
precompile(Tuple{typeof(Sockets.accept), Sockets.TCPServer, Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.IOExtras.peerport), Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.IOExtras.localport), Sockets.TCPSocket})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, String, String, Int64, Int64, Bool, Sockets.TCPSocket, Bool})
precompile(Tuple{typeof(HTTP.Servers.listenloop), Function, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, getfield(HTTP.Servers, Symbol("#2#5")){Nothing, getfield(HTTP.Servers, Symbol("#3#6"))}, Base.RefValue{Int64}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.istaskdone), Task})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.stack)})
precompile(Tuple{typeof(HTTP.URIs.group), Int64, HTTP.URIs.RegexAndMatchData, String, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.URIs.ensurevalid), HTTP.URIs.URI})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.URIs.formaturi), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.method_name), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, String, String, String})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##parse_uri_reference#6")), Bool, typeof(HTTP.URIs.parse_uri_reference), String})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.get), String})
precompile(Tuple{typeof(Core.Compiler.zero), Type{UInt8}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.tryparse_internal), Type{UInt8}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{getfield(Base, Symbol("##parse#347")), Int64, typeof(Base.parse), Type{UInt8}, String})
precompile(Tuple{typeof(HTTP.URIs.unescapeuri), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Pairs.setbyfirst), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, String}, typeof(Base.:(==))})
precompile(Tuple{typeof(HTTP.URIs.resource), HTTP.URIs.URI})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Pairs.setbyfirst), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{Base.SubString{String}, Base.SubString{String}}, typeof(HTTP.Messages.field_name_isequal)})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.Messages.defaultheader!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, Base.SubString{String}}})
precompile(Tuple{typeof(HTTP.Messages.setheader), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, Nothing}})
precompile(Tuple{typeof(HTTP.Messages.defaultheader!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, Nothing}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Array{Any, 1}})
precompile(Tuple{typeof(HTTP.Messages.defaultheader!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, String}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.string), String, String, Base.SubString{String}, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{getfield(Base, Symbol("#Timer#505#506")), Float64, Type{Base.Timer}, Float64})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{typeof(HTTP.ConnectionRequest.isnoproxy), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.ConnectionRequest.getproxy), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.Messages.defaultheader!), HTTP.Messages.Request, Base.Pair{String, String}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{UInt64, HTTP.ConnectionPool.Pod}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{UInt64, HTTP.ConnectionPool.Pod}, UInt64})
precompile(Tuple{typeof(Base.get!), getfield(HTTP.ConnectionPool, Symbol("#19#21")), Base.Dict{UInt64, HTTP.ConnectionPool.Pod}, UInt64})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#18#20")){HTTP.ConnectionPool.Pool, UInt64}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.take_buffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, Int64, Sockets.TCPSocket, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, Int64, Sockets.TCPSocket, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, UInt16, Sockets.TCPSocket, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, UInt16, Sockets.TCPSocket, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Sockets.TCPSocket, Bool})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#10#11")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.precondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#4#5")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, Nothing}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Bool})
precompile(Tuple{typeof(Sockets.connect!), Sockets.TCPSocket, Sockets.IPv4, UInt64})
precompile(Tuple{typeof(Sockets.connect), Sockets.IPv4, UInt64})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base._any), getfield(HTTP.Messages, Symbol("#4#5")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Colon})
precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.println), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.issafe), String})
precompile(Tuple{typeof(HTTP.Messages.isidempotent), String})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#12#13")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#8#9")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Parsers.group), Int64, HTTP.Parsers.RegexAndMatchData, String})
precompile(Tuple{typeof(HTTP.Parsers.nextbytes), HTTP.Parsers.RegexAndMatchData, String})
precompile(Tuple{typeof(HTTP.Parsers.parse_status_line!), String, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Parsers.group), Int64, HTTP.Parsers.RegexAndMatchData, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Parsers.nextbytes), HTTP.Parsers.RegexAndMatchData, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Parsers.parse_header_field), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.appendheader), HTTP.Messages.Response, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(HTTP.Messages.parse_header_fields!), Base.SubString{String}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{Type{HTTP.Parsers.ParseError}, Symbol, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Parsers.parse_chunk_size), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, Int64, String, Int64})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.eof), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Response, String, String})
precompile(Tuple{typeof(HTTP.ConnectionPool.purge), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#2#3")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#6#7")){HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.ConnectionPool.isbusy), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.readavailable), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.println), HTTP.Messages.Response})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Base.StackTraces.StackFrame, 1}, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.StackTraces.StackFrame}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Base.StackTraces.StackFrame, 1}, 1}, Base.Generator{Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, typeof(Base.StackTraces.lookup)}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Base.Generator{Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, typeof(Base.StackTraces.lookup)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.filter!), getfield(Base.StackTraces, Symbol("#1#2")), Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.StackTraces.StackFrame, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.splice!), Array{Base.StackTraces.StackFrame, 1}, Base.UnitRange{Int64}, Array{Any, 1}})
precompile(Tuple{typeof(Base.StackTraces.stacktrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Bool})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(Main, Symbol("#4#8")){String, Int64, Int64}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#kw##handle_transaction")), NamedTuple{(:final_transaction,), Tuple{Bool}}, typeof(HTTP.Servers.handle_transaction), Function, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(HTTP.Servers.handle_connection), Function, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Int64, Int64})
precompile(Tuple{getfield(HTTP.Messages, Symbol("##Request#3")), Base.VersionNumber, Nothing, Type{HTTP.Messages.Request}, String, String, Array{Any, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.Parsers.parse_request_line!), String, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.appendheader), HTTP.Messages.Request, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(HTTP.Messages.parse_header_fields!), Base.SubString{String}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String, String})
precompile(Tuple{typeof(HTTP.Messages.statustext), Int16})
precompile(Tuple{typeof(HTTP.Messages.writestartline), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Streams.handle_continue), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(Main, Symbol("#4#8")){String, Int64, Int64}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(HTTP.ConnectionPool.read_to_buffer), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Int64})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Function, Int64})
precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
precompile(Tuple{getfield(Base, Symbol("#readcb_specialized#517")), Sockets.TCPSocket, Int64, UInt64})
precompile(Tuple{getfield(HTTP.Parsers, Symbol("##find_end_of_header#1")), Bool, typeof(HTTP.Parsers.find_end_of_header), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, UInt8})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, UInt8})
precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, String, String})
precompile(Tuple{typeof(Base.unsafe_write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{T} where T, String, String, Int64, Bool, Bool})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Response, String})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.flush), Sockets.TCPSocket})
precompile(Tuple{getfield(Main, Symbol("#4#8")){String, Int64, Int64}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.unsafe_write), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(Main, Symbol("#4#8")){String, Int64, Int64}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{getfield(Base, Symbol("##string#320")), Int64, Int64, typeof(Base.string), Int16})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int16})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_chunk_size)})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_trailer)})
precompile(Tuple{typeof(Base.getproperty), HTTP.Messages.Response, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.global_logger)})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.CoreLogging.disable_logging), Base.CoreLogging.LogLevel})
precompile(Tuple{getfield(HTTP, Symbol("##open#6")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.open), Function, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(HTTP.open), Function, String, String})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction, :parent), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Function, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#23#24")){HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.ConnectionPool.isvalid), HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64, Int64})
precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(Symbol("stacktrace()"),), Tuple{Array{Base.StackTraces.StackFrame, 1}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.NullLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Array{Base.StackTraces.StackFrame, 1}, Tuple{Symbol}, NamedTuple{(Symbol("stacktrace()"),), Tuple{Array{Base.StackTraces.StackFrame, 1}}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.array_summary), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.StackTraces.StackFrame, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.print_matrix_vdots), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Tuple{Int64, Int64}, 1}, String, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.StackTraces.StackFrame, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(DelimitedFiles.writedlm_row), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.StackTraces.StackFrame, Char, Char})
precompile(Tuple{getfield(DelimitedFiles, Symbol("##writedlm#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DelimitedFiles.writedlm), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.StackTraces.StackFrame, 1}, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Array{Base.StackTraces.StackFrame, 1}, Tuple{Symbol}, NamedTuple{(Symbol("stacktrace()"),), Tuple{Array{Base.StackTraces.StackFrame, 1}}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Type{UInt8}})
precompile(Tuple{getfield(Base, Symbol("##readuntil#296")), Bool, typeof(Base.readuntil), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, UInt8})
precompile(Tuple{getfield(Base, Symbol("##readline#290")), Bool, typeof(Base.readline), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.println), Test.Error})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Error})
precompile(Tuple{typeof(Base.print), Test.Error})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Error})
precompile(Tuple{typeof(Test.do_test), Test.Threw, Expr})
precompile(Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, typeof(Base.identity)}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(HTTP.ConnectionPool.monitor_idle_connection), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#14#15")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.:(==)), String, Base.SubString{String}})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Main, Symbol("#5#9")){String, UnionAll}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction, :parent), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#5#9")){String, UnionAll}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(Main, Symbol("#5#9")){String, UnionAll}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#5#9")){String, UnionAll}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{Type{BufferedStreams.BufferedInputStream{T} where T}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(BufferedStreams.fillbuffer!), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{getfield(Base, Symbol("##readuntil#296")), Bool, typeof(Base.readuntil), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}, UInt8})
precompile(Tuple{getfield(Base, Symbol("##readline#290")), Bool, typeof(Base.readline), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.readline), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.in), Expr, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(HTTP.Strings.escapehtml), String})
precompile(Tuple{typeof(HTTP.Cookies.isurlchar), Char})
precompile(Tuple{typeof(HTTP.Strings.tocameldash), String})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, UInt8})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{UInt8, 1}, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{UInt8, 1}, String}, Int64, Int64})
precompile(Tuple{typeof(HTTP.Strings.iso8859_1_to_utf8), Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.stack)})
precompile(Tuple{typeof(HTTP.Layers.insert), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, Type{HTTP.StreamRequest.StreamLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}, Type{TestRequest.TestLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}})
precompile(Tuple{typeof(HTTP.Layers.next), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}})
precompile(Tuple{typeof(HTTP.Layers.top_layer), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}})
precompile(Tuple{typeof(HTTP.Layers.next), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}})
precompile(Tuple{typeof(HTTP.Layers.top_layer), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}})
precompile(Tuple{typeof(HTTP.Layers.next), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}})
precompile(Tuple{typeof(HTTP.Layers.top_layer), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}})
precompile(Tuple{typeof(HTTP.Layers.next), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}})
precompile(Tuple{typeof(HTTP.Layers.top_layer), Type{HTTP.StreamRequest.StreamLayer{Union{}}}})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, String})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("##request#5")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, Nothing}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{MbedTLS.Entropy}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#278#279")){Tuple{}}, String})
precompile(Tuple{typeof(MbedTLS.mbed_err), Int32})
precompile(Tuple{typeof(MbedTLS.crt_parse), String})
precompile(Tuple{typeof(MbedTLS.ca_chain!), MbedTLS.SSLConfig})
precompile(Tuple{getfield(MbedTLS, Symbol("##SSLConfig#46")), Nothing, Type{MbedTLS.SSLConfig}, Bool})
precompile(Tuple{typeof(HTTP.ConnectionPool.global_sslconfig), Bool})
precompile(Tuple{Type{MbedTLS.SSLContext}})
precompile(Tuple{typeof(MbedTLS.ssl_setup), MbedTLS.SSLContext, MbedTLS.SSLConfig})
precompile(Tuple{typeof(MbedTLS.ssl_set_bio), MbedTLS.SSLContext, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(MbedTLS.hostname!), MbedTLS.SSLContext, Base.SubString{String}})
precompile(Tuple{typeof(MbedTLS.ssl_handshake), MbedTLS.SSLContext})
precompile(Tuple{typeof(MbedTLS.ssl_session_reset), MbedTLS.SSLContext})
precompile(Tuple{typeof(MbedTLS.ssl_abandon), MbedTLS.SSLContext})
precompile(Tuple{typeof(MbedTLS.handshake), MbedTLS.SSLContext})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{typeof(Base.tryparse_internal), Type{UInt64}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{getfield(Base, Symbol("##parse#347")), Nothing, typeof(Base.parse), Type{UInt64}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{typeof(MbedTLS.f_rng), MbedTLS.CtrDrbg, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.isopen), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.getproperty), Sockets.TCPSocket, Symbol})
precompile(Tuple{typeof(Base.bytesavailable), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.eof), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.min), UInt64, Int64})
precompile(Tuple{Type{Int32}, UInt64})
precompile(Tuple{typeof(HTTP.IOExtras.tcpsocket), MbedTLS.SSLContext})
precompile(Tuple{typeof(HTTP.IOExtras.peerport), MbedTLS.SSLContext})
precompile(Tuple{typeof(HTTP.IOExtras.localport), MbedTLS.SSLContext})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, Int64, MbedTLS.SSLContext, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, Int64, MbedTLS.SSLContext, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, UInt16, MbedTLS.SSLContext, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, UInt16, MbedTLS.SSLContext, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, MbedTLS.SSLContext, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, MbedTLS.SSLContext})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#10#11")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#4#5")){HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#12#13")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#8#9")){HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response})
precompile(Tuple{typeof(MbedTLS.ssl_read), MbedTLS.SSLContext, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.ssl_get_bytes_avail), MbedTLS.SSLContext})
precompile(Tuple{typeof(MbedTLS.ssl_unsafe_read), MbedTLS.SSLContext, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.ssl_check_pending), MbedTLS.SSLContext})
precompile(Tuple{typeof(MbedTLS.wait_for_encrypted_data), MbedTLS.SSLContext})
precompile(Tuple{typeof(MbedTLS.wait_for_decrypted_data), MbedTLS.SSLContext})
precompile(Tuple{typeof(Base.unsafe_read), MbedTLS.SSLContext, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.iswritable), MbedTLS.SSLContext})
precompile(Tuple{typeof(Base.eof), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(MbedTLS.ssl_close_notify), MbedTLS.SSLContext})
precompile(Tuple{typeof(Base.close), MbedTLS.SSLContext})
precompile(Tuple{typeof(Base.readavailable), MbedTLS.SSLContext})
precompile(Tuple{typeof(HTTP.ConnectionPool.purge), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#2#3")){HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#6#7")){HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.ConnectionPool.isbusy), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.readavailable), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(MbedTLS.ssl_write), MbedTLS.SSLContext, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.ssl_unsafe_write), MbedTLS.SSLContext, Ptr{UInt8}, UInt64})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{TestRequest.TestLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.check_open), Sockets.TCPSocket})
precompile(Tuple{getfield(MbedTLS, Symbol("#37#38")){MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, UInt8})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, UInt8})
precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, String, String})
precompile(Tuple{typeof(Base.unsafe_write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.read_to_buffer), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Int64})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Function, Int64})
precompile(Tuple{typeof(Main.status), HTTP.Messages.Response})
precompile(Tuple{typeof(Base.:(==)), Int16, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Expr}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Expr, 1}, typeof(Base.esc)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Expr, 1}, typeof(Base.esc)}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Expr, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Test.testset_forloop), Tuple{Expr, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Base.push!), Array{Expr, 1}, Expr})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{Expr}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#14#15")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(HTTP.head), String})
precompile(Tuple{Type{NamedTuple{(:status_exception,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, String, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:status_exception,), Tuple{Bool}}, typeof(HTTP.post), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:status_exception,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Bool}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Nothing}, Type{Bool}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:status_exception,), Tuple{Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:status_exception, :parent), Tuple{Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:status_exception,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.Messages, Symbol("##Request#3")), Base.VersionNumber, Nothing, Type{HTTP.Messages.Request}, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.CodeUnits{UInt8, String}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:status_exception,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :status_exception), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :status_exception), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Char})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Char})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, String, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{typeof(HTTP.post), String})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.put), String})
precompile(Tuple{typeof(HTTP.delete), String})
precompile(Tuple{typeof(HTTP.patch), String})
precompile(Tuple{typeof(Base.fetch), Task})
precompile(Tuple{getfield(Main, Symbol("#10#15")){String}})
precompile(Tuple{Type{HTTP.URIs.URI}, String})
precompile(Tuple{Type{NamedTuple{(:query,), T} where T<:Tuple}, Tuple{Base.Dict{String, String}}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.Dict{String, String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Base, Symbol("#kw##merge")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Dict{String, String}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Dict{String, String}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}}})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.get), HTTP.URIs.URI})
precompile(Tuple{Type{Base.Dict{Base.SubString{String}, Base.SubString{String}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.SubString{String}, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.SubString{String}, Base.SubString{String}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.SubString{String}, Base.SubString{String}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{Base.Dict{Base.SubString{String}, Base.SubString{String}}}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.SubString{String}, Base.SubString{String}}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.SubString{String}, Base.SubString{String}}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.SubString{String}, Base.SubString{String}}, String})
precompile(Tuple{typeof(Base.getindex), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Int64})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{Type{NamedTuple{(:cookies,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:cookies,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:cookies,), Tuple{Bool}}, typeof(HTTP.get), String})
precompile(Tuple{typeof(Dates.character_codes), Core.SimpleVector})
precompile(Tuple{getfield(Dates, Symbol("##s626#37")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dates, Symbol("#38#39")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}})
precompile(Tuple{getfield(Dates, Symbol("##s627#34")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:cookies,), Tuple{Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:cookies, :parent), Tuple{Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:cookies,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:cookies,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Base.Dict{HTTP.Cookies.Cookie, Nothing}}})
precompile(Tuple{typeof(HTTP.Cookies.pathmatch), HTTP.Cookies.Cookie, Base.SubString{String}})
precompile(Tuple{typeof(Base.hash), HTTP.Cookies.Cookie, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{HTTP.Cookies.Cookie, Nothing}, HTTP.Cookies.Cookie})
precompile(Tuple{typeof(Base.throw_boundserror), Array{HTTP.Cookies.Cookie, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{HTTP.Cookies.Cookie}, Array{HTTP.Cookies.Cookie, 1}})
precompile(Tuple{typeof(HTTP.Cookies.hasdotsuffix), Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.CookieRequest.getcookies), Base.Set{HTTP.Cookies.Cookie}, HTTP.URIs.URI})
precompile(Tuple{typeof(Base.collect_to!), Array{Char, 1}, Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}})
precompile(Tuple{typeof(Base.filter), typeof(HTTP.Cookies.validcookievaluebyte), Array{Char, 1}})
precompile(Tuple{typeof(Base.string), Char, String, Char})
precompile(Tuple{typeof(HTTP.Cookies.sanitizeCookieValue), String})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char, String})
precompile(Tuple{typeof(HTTP.Cookies.isCookieDomainName), String})
precompile(Tuple{typeof(Dates.dayofweek), Dates.DateTime})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DatePart{Char(0x75000000)}, Dates.DateTime, Dates.DateLocale})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, String})
precompile(Tuple{typeof(HTTP.Cookies.isIP), String})
precompile(Tuple{Type{String}, HTTP.Cookies.Cookie, Bool})
precompile(Tuple{typeof(Base.string), String, Array{HTTP.Cookies.Cookie, 1}, Bool})
precompile(Tuple{typeof(Base.filter), getfield(HTTP.CookieRequest, Symbol("#2#3")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Bool, String, String, Dates.DateTime, Int64, Bool, Bool, Bool, Array{String, 1}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#3")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Bool})
precompile(Tuple{Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Bool})
precompile(Tuple{typeof(HTTP.Cookies.isIP), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Cookies.domainandtype), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Cookies.Cookie, Symbol, Bool})
precompile(Tuple{typeof(HTTP.Cookies.hasdotsuffix), String, String})
precompile(Tuple{typeof(HTTP.Cookies.domainandtype), String, String})
precompile(Tuple{Type{Dates.DateTime}, Bool, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{Type{Dates.DateTime}, Bool, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Int64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Base.nextind), Base.SubString{String}, Int64, Int64})
precompile(Tuple{typeof(Dates.tryparsenext_core), Base.SubString{String}, Int64, Int64, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}, Bool})
precompile(Tuple{typeof(Base.parse), Type{Dates.DateTime}, Base.SubString{String}, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Dates.tryparsenext_core), String, Int64, Int64, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}, Bool})
precompile(Tuple{typeof(Base.parse), Type{Dates.DateTime}, String, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{Type{Dates.DateTime}, Bool, Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{Type{Dates.DateTime}, Bool, Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}})
precompile(Tuple{typeof(Dates.tryparsenext_core), Base.SubString{String}, Int64, Int64, Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}, Bool})
precompile(Tuple{typeof(Base.parse), Type{Dates.DateTime}, Base.SubString{String}, Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}})
precompile(Tuple{typeof(Dates.tryparsenext_core), String, Int64, Int64, Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}, Bool})
precompile(Tuple{typeof(Base.parse), Type{Dates.DateTime}, String, Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}})
precompile(Tuple{typeof(HTTP.Cookies.parsecookievalue), String, Bool})
precompile(Tuple{Type{HTTP.Cookies.Cookie}, Base.SubString{String}, Base.SubString{String}, String, String, Dates.DateTime, Int64, Bool, Bool, Bool, Array{String, 1}})
precompile(Tuple{typeof(HTTP.Cookies.readsetcookie), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{HTTP.Cookies.Cookie, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{HTTP.Cookies.Cookie, Nothing}, HTTP.Cookies.Cookie})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Cookies.Cookie, Nothing}, Nothing, HTTP.Cookies.Cookie})
precompile(Tuple{typeof(HTTP.CookieRequest.setcookies), Base.Set{HTTP.Cookies.Cookie}, Base.SubString{String}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{getfield(HTTP.CookieRequest, Symbol("##request#1")), Bool, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:cookies,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:cookies,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:cookies,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.get!), Function, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, String})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Base.Set{HTTP.Cookies.Cookie}}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base._any), typeof(HTTP.Cookies.isurlchar), Base.SubString{String}, Base.Colon})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Cookies.Cookie, Symbol, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:cookies,), Tuple{Bool}}, NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}})
precompile(Tuple{typeof(HTTP.URIs.group), Int64, HTTP.URIs.RegexAndMatchData, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, String, String, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##parse_uri_reference#6")), Bool, typeof(HTTP.URIs.parse_uri_reference), Base.SubString{String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{typeof(HTTP.URIs.absuri), HTTP.URIs.URI, HTTP.URIs.URI})
precompile(Tuple{typeof(HTTP.URIs.absuri), Base.SubString{String}, HTTP.URIs.URI})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Nothing}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("#2#3")){HTTP.URIs.URI}, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base.filter), getfield(HTTP.RedirectRequest, Symbol("#2#3")){HTTP.URIs.URI}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, HTTP.Messages.Response, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.CookieRequest, Symbol("##request#1")), Bool, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.Iterators.Pairs{Symbol, HTTP.Messages.Response, Tuple{Symbol}, NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}, typeof(HTTP.request), Type{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:cookies, :parent), Tuple{Bool, HTTP.Messages.Response}}, typeof(HTTP.request), Type{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:cookies, :parent), Tuple{Bool, HTTP.Messages.Response}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:cookies, :parent), Tuple{Bool, HTTP.Messages.Response}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.CookieRequest.CookieLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, HTTP.Messages.Response, Tuple{Symbol}, NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(Core.Compiler.zero), Type{Int128}})
precompile(Tuple{typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser._count_before), String, Char, Int64})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.MemoryParserState})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, UInt8}, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int64})
precompile(Tuple{Type{Float64}, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Parsers.roundQuotient), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{Int32}, Int128})
precompile(Tuple{typeof(Parsers.BigInt!), Base.GMP.BigInt, Int128})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.realloc2), Int64})
precompile(Tuple{Type{Base.GMP.BigInt}, Int128})
precompile(Tuple{typeof(Base.exp2), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.add_ui), Base.GMP.BigInt, UInt8})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(Parsers.xparse), Type{Float64}, String, Int64, Int64, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:body,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body,), Tuple{String}}, typeof(HTTP.post), String})
precompile(Tuple{Type{NamedTuple{(:body, :stream), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:stream,), Tuple{Bool}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, String, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:stream,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body, :stream), Tuple{String, Bool}}, typeof(HTTP.post), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:stream,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:stream,), Tuple{Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:stream, :parent), Tuple{Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:stream,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:stream,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:stream,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:stream,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:stream,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :stream), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :stream), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:stream,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{typeof(Base.split), Base.SubString{String}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(JSON.Parser.parse), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.SubString{String}, 1}, typeof(JSON.Parser.parse)}})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base._array_for), Type{Base.Dict{String, Any}}, Array{Base.SubString{String}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Dict{String, Any}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(JSON.Parser.parse)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{String, Any}, 1}, Base.Dict{String, Any}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(JSON.Parser.parse)}, Int64})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{Type{Base.BufferStream}})
precompile(Tuple{Type{NamedTuple{(:response_stream,), T} where T<:Tuple}, Tuple{Base.BufferStream}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Base.BufferStream, Tuple{Symbol}, NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Base.BufferStream, Tuple{Symbol}, NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}, typeof(HTTP.get), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Base.BufferStream}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Nothing}, Type{Base.BufferStream}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Base.BufferStream}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:response_stream, :parent), Tuple{Base.BufferStream, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Base.BufferStream, Tuple{Symbol}, NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Base.BufferStream, Tuple{Symbol}, NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Base.BufferStream, Tuple{Symbol}, NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Base.BufferStream}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Base.BufferStream}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Base.BufferStream}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :response_stream), Tuple{Bool, Nothing, Base.BufferStream}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Base.BufferStream}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :response_stream), Tuple{Int64, Nothing, Base.BufferStream}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.write), Base.BufferStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Base.BufferStream, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.eachline), Base.BufferStream})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(JSON.Parser.parse), Base.EachLine{Base.BufferStream}})
precompile(Tuple{getfield(Base, Symbol("##readline#290")), Bool, typeof(Base.readline), Base.BufferStream})
precompile(Tuple{typeof(Base.iterate), Base.EachLine{Base.BufferStream}, Nothing})
precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.EachLine{Base.BufferStream}, typeof(JSON.Parser.parse)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.EachLine{Base.BufferStream}, typeof(JSON.Parser.parse)}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.Dict{String, Any}, 1}, Base.Generator{Base.EachLine{Base.BufferStream}, typeof(JSON.Parser.parse)}, Nothing})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Base.Dict{String, Any}, 1}, Vararg{Array{Base.Dict{String, Any}, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Base.Dict{String, Any}, 1}, Array{Base.Dict{String, Any}, 1}}})
precompile(Tuple{typeof(Base.all), Function, Base.Iterators.Zip{Tuple{Array{Base.Dict{String, Any}, 1}, Array{Base.Dict{String, Any}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("#11#16")), Tuple{Base.Dict{String, Any}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base._all), getfield(Main, Symbol("#11#16")), Base.Iterators.Zip{Tuple{Array{Base.Dict{String, Any}, 1}, Array{Base.Dict{String, Any}, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.in), Base.Pair{String, Any}, Base.Dict{String, Any}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Char, Char, Char})
precompile(Tuple{Type{NamedTuple{(:body,), T} where T<:Tuple}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body,), Tuple{Array{UInt8, 1}}}, typeof(HTTP.post), String})
precompile(Tuple{Type{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:body,), T} where T<:Tuple}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body,), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}}}, typeof(HTTP.post), String})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#12#17")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.open), String})
precompile(Tuple{Type{NamedTuple{(:body, :enablechunked), T} where T<:Tuple}, Tuple{Base.IOStream, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.IOStream, Bool}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Base.IOStream, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body, :enablechunked), Tuple{Base.IOStream, Bool}}, typeof(HTTP.post), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:enablechunked,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:enablechunked,), Tuple{Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:enablechunked, :parent), Tuple{Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:enablechunked,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:enablechunked,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :enablechunked), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :enablechunked), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{typeof(HTTP.Messages.setheader), HTTP.Messages.Request, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.readavailable), Base.IOStream})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.IOStream})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.IOStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.Filesystem.rm), String})
precompile(Tuple{typeof(Base.write), Base.BufferStream, String})
precompile(Tuple{typeof(Base.close), Base.BufferStream})
precompile(Tuple{Type{NamedTuple{(:body, :enablechunked), T} where T<:Tuple}, Tuple{Base.BufferStream, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, Bool}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Base.BufferStream, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body, :enablechunked), Tuple{Base.BufferStream, Bool}}, typeof(HTTP.post), String})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:enablechunked,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:enablechunked,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.BufferStream})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#13#18")), String, Vararg{String, N} where N})
precompile(Tuple{Type{NamedTuple{(:body,), T} where T<:Tuple}, Tuple{Base.IOStream}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Base.IOStream, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body,), Tuple{Base.IOStream}}, typeof(HTTP.post), String})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{Type{NamedTuple{(:body,), T} where T<:Tuple}, Tuple{Base.BufferStream}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Base.BufferStream, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body,), Tuple{Base.BufferStream}}, typeof(HTTP.post), String})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(Main, Symbol("#14#19")){String, Base.BufferStream}})
precompile(Tuple{typeof(HTTP.request), String, String})
precompile(Tuple{Type{NamedTuple{(:redirect,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:redirect,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:redirect,), Tuple{Bool}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:redirect,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:redirect,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:redirect,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:redirect,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :redirect), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :redirect), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:redirect,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}, NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}})
precompile(Tuple{Type{NamedTuple{(:basic_authorization,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:basic_authorization,), Tuple{Bool}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:basic_authorization,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:basic_authorization,), Tuple{Bool}}, typeof(HTTP.get), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:basic_authorization,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:basic_authorization,), Tuple{Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:basic_authorization, :parent), Tuple{Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:basic_authorization,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:basic_authorization,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:basic_authorization,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:basic_authorization,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:basic_authorization,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base64.encode), UInt8})
precompile(Tuple{typeof(Base.close), Base64.Base64EncodePipe})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, Base.SubString{String}})
precompile(Tuple{typeof(Base.unsafe_write), Base64.Base64EncodePipe, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, Base.SubString{String}})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :basic_authorization), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :basic_authorization), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:basic_authorization,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, String})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, String})
precompile(Tuple{typeof(HTTP.request), String, HTTP.URIs.URI})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, Base.SubString{String}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.get), Base.SubString{String}})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{Type{NamedTuple{(:canonicalizeheaders,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}, typeof(HTTP.get), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:canonicalizeheaders, :parent), Tuple{Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :canonicalizeheaders), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :canonicalizeheaders), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.take_buffered), Base.Channel{Tuple{IO, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{Tuple{IO, HTTP.Messages.Response}}})
precompile(Tuple{getfield(HTTP, Symbol("##openraw#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.openraw), String, String, Base.Dict{String, String}})
precompile(Tuple{typeof(HTTP.openraw), String, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.stack)})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#8#10")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String, String, Base.Dict{String, String}, Base.Channel{Tuple{IO, HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction, :parent), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Tuple{IO, HTTP.Messages.Response}}, Tuple{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Tuple{IO, HTTP.Messages.Response}}, Tuple{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response}})
precompile(Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response}, Int64, Int64})
precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.read), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base._uv_hook_close), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#23#24")){HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.ConnectionPool.isvalid), HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}, Int64, Int64})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :status_exception), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :status_exception), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Char})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, Char})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :stream), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:stream,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :stream), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Base.BufferStream}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :response_stream), Tuple{Int64, Nothing, Base.BufferStream}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.write), Base.BufferStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Base.BufferStream, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream), Tuple{Nothing, Base.BufferStream}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :enablechunked), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.IOStream})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.IOStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPSocket})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:enablechunked,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :enablechunked), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.BufferStream})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.BufferStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.IOStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :redirect), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:redirect,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :redirect), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :basic_authorization), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:basic_authorization,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :basic_authorization), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :canonicalizeheaders), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:canonicalizeheaders,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :canonicalizeheaders), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Tuple{IO, HTTP.Messages.Response}}, Tuple{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Tuple{IO, HTTP.Messages.Response}}, Tuple{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response}})
precompile(Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(HTTP, Symbol("#9#11")){Base.Channel{Tuple{IO, HTTP.Messages.Response}}}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response}, Int64, Int64})
precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.read), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Int64})
precompile(Tuple{getfield(HTTP, Symbol("##open#6")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.open), Function, Symbol, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(HTTP.open), Function, Symbol, String})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(Main, Symbol("#20#21"))}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Main, Symbol("#20#21"))}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#20#21")), HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction, :parent), Tuple{getfield(Main, Symbol("#20#21")), HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Main, Symbol("#20#21")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(Main, Symbol("#20#21")), Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#20#21"))}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:headers, :body, :query), T} where T<:Tuple}, Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(HTTP.Messages.decode), HTTP.Messages.Response, String})
precompile(Tuple{typeof(HTTP.Messages.payload), HTTP.Messages.Response})
precompile(Tuple{getfield(Main, Symbol("#test#22")), HTTP.Messages.Response, String})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#2")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.current), JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser.byteat), JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(JSON.Parser._float_from_bytes), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool, JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:body, :query), T} where T<:Tuple}, Tuple{Array{UInt8, 1}, Base.Dict{String, String}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, String, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, String, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.get), String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.get), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##get#12")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}, typeof(HTTP.get), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.get), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##get#12")), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}, typeof(HTTP.get), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##put")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.put), String})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##put")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.put), String, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##put")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.put), String, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.post), String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.post), String, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.post), String, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##patch")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.patch), String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##patch")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.patch), String, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##patch")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.patch), String, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##delete")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.delete), String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##delete")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.delete), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##delete#17")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}, typeof(HTTP.delete), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##delete")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.delete), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##delete#17")), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}, typeof(HTTP.delete), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), String, HTTP.URIs.URI})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), String, HTTP.URIs.URI, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.request), String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{UInt8, 1}, Base.Dict{String, String}, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Array{UInt8, 1}, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Nothing}, Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :body, :query), Tuple{Nothing, Array{UInt8, 1}, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :body, :query), Tuple{Nothing, Array{UInt8, 1}, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Array{UInt8, 1}, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:body, :query, :parent), Tuple{Array{UInt8, 1}, Base.Dict{String, String}, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.findfirst), getfield(HTTP.Pairs, Symbol("#7#8")){String}, Base.Dict{String, String}})
precompile(Tuple{typeof(HTTP.Pairs.getkv), Base.Dict{String, String}, String, String})
precompile(Tuple{typeof(Base.findfirst), getfield(HTTP.Pairs, Symbol("#1#2")){typeof(Base.:(==)), String}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, Base.Pair{String, String}, String})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Dict{String, String}, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Nothing}, Type{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :query), Tuple{Nothing, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :query), Tuple{Nothing, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:query, :parent), Tuple{Base.Dict{String, String}, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.get), HTTP.URIs.URI})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.get), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##get#12")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}, typeof(HTTP.get), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.get), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##get#12")), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}, typeof(HTTP.get), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, HTTP.URIs.URI, Array{Any, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##put")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.put), HTTP.URIs.URI})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, HTTP.URIs.URI, Base.Dict{String, String}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##put")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.put), HTTP.URIs.URI, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##put")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.put), HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.post), HTTP.URIs.URI})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.post), HTTP.URIs.URI, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##post")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.post), HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##patch")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.patch), HTTP.URIs.URI})
precompile(Tuple{getfield(HTTP, Symbol("#kw##patch")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.patch), HTTP.URIs.URI, Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##patch")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.patch), HTTP.URIs.URI, Base.Dict{String, String}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##delete")), NamedTuple{(:headers, :body, :query), Tuple{Base.Dict{String, String}, Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.delete), HTTP.URIs.URI})
precompile(Tuple{getfield(HTTP, Symbol("#kw##delete")), NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}, typeof(HTTP.delete), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##delete#17")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:body, :query), Tuple{Array{UInt8, 1}, Base.Dict{String, String}}}}, typeof(HTTP.delete), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##delete")), NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}, typeof(HTTP.delete), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##delete#17")), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:query,), Tuple{Base.Dict{String, String}}}}, typeof(HTTP.delete), HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(Test, Symbol("#@test_logs")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Tuple{Expr, Expr}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Test, Symbol("#@test_throws")), LineNumberNode, Module, Any, Any})
precompile(Tuple{getfield(Test, Symbol("#@test_nowarn")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Test, Symbol("#@test_warn")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.rand), Type{UInt128}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, Nothing}, UInt8})
precompile(Tuple{typeof(HTTP.sniff), Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.sniff), Base.IOStream})
precompile(Tuple{typeof(HTTP.writemultipartheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.IOStream})
precompile(Tuple{Type{HTTP.Form}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, HTTP.Form, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, HTTP.Form})
precompile(Tuple{typeof(HTTP.request), String, String, Base.Dict{String, String}, HTTP.Form})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(HTTP, Symbol("#1#2")), typeof(Base.add_sum), Array{IO, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(HTTP, Symbol("#1#2")), typeof(Base.add_sum), Base.IndexLinear, Array{IO, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, HTTP.Form})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, HTTP.Form})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, HTTP.Form})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, HTTP.Form})
precompile(Tuple{typeof(Base.mapreduce_first), getfield(HTTP, Symbol("#1#2")), Function, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(HTTP.Messages.setheader), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, HTTP.Form})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, HTTP.Form})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, HTTP.Form})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, HTTP.Form})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, HTTP.Form})
precompile(Tuple{typeof(Base.read), HTTP.Form})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Form})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, HTTP.Form})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, HTTP.Form, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}}})
precompile(Tuple{typeof(Base.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.append!), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.post), String, Base.Dict{String, String}, HTTP.Form})
precompile(Tuple{Type{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(JSON.Parser.parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{typeof(Base.match), Base.Regex, String})
precompile(Tuple{typeof(Base.getproperty), Base.RegexMatch, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Union{Nothing, Base.SubString{String}}, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), UInt32, Int64})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, HTTP.Form, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, HTTP.Form})
precompile(Tuple{typeof(HTTP.post), String, HTTP.Form})
precompile(Tuple{Type{HTTP.Multipart{T} where T<:IO}, Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, HTTP.Multipart{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.sprint), Function, HTTP.Multipart{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Multipart{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.findfirst), String, String})
precompile(Tuple{typeof(Base.redirect_stderr), getfield(Main, Symbol("#25#28")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#24#27")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base._redirect_stderr), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.redirect_stderr), Base.PipeEndpoint})
precompile(Tuple{typeof(Test.contains_warn), String, Base.Regex})
precompile(Tuple{Type{NamedTuple{(:force,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##rm")), NamedTuple{(:force,), Tuple{Bool}}, typeof(Base.Filesystem.rm), String})
precompile(Tuple{Type{Test.Threw}, MethodError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.println), Test.Fail})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Fail})
precompile(Tuple{typeof(Base.print), Test.Fail})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol, Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#3#5")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#4#6")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Test.scrub_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Fail})
precompile(Tuple{typeof(Test.do_test_throws), Test.Threw, Any, Any})
precompile(Tuple{typeof(Test.test_expr!), String, Symbol})
precompile(Tuple{typeof(Test.get_test_result), Symbol, LineNumberNode})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Array{Base.Pair{String, String}, 1}})
precompile(Tuple{getfield(HTTP.Messages, Symbol("##Request#3")), Base.VersionNumber, Nothing, Type{HTTP.Messages.Request}, String, String, Array{Base.Pair{String, String}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Main.generate_test_request)})
precompile(Tuple{Type{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Main.generate_test_body)})
precompile(Tuple{getfield(HTTP, Symbol("##find_multipart_boundary#29")), Int64, typeof(HTTP.find_multipart_boundary), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.find_multipart_boundary), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Int64, Int64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:start,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##find_multipart_boundary")), NamedTuple{(:start,), Tuple{Int64}}, typeof(HTTP.find_multipart_boundary), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Symbol})
precompile(Tuple{typeof(Main.generate_non_multi_test_request)})
precompile(Tuple{typeof(HTTP.Messages.decode), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.payload), HTTP.Messages.Request})
precompile(Tuple{getfield(HTTP, Symbol("##find_multipart_boundaries#30")), Int64, typeof(HTTP.find_multipart_boundaries), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(HTTP.find_header_boundary), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:chunk,), Tuple{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.NullLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Symbol}, NamedTuple{(:chunk,), Tuple{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.showarg), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Bool})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(DelimitedFiles, Symbol("##writedlm#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DelimitedFiles.writedlm), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Symbol}, NamedTuple{(:chunk,), Tuple{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.eachindex), Nothing})
precompile(Tuple{typeof(HTTP.content_disposition_tokenize), Nothing})
precompile(Tuple{typeof(HTTP.content_disposition_extract), Nothing})
precompile(Tuple{typeof(HTTP.content_disposition_tokenize), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.content_disposition_extract), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.parse_multipart_chunk), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.push!), Array{HTTP.Multipart{T} where T<:IO, 1}, Nothing})
precompile(Tuple{typeof(HTTP.parse_multipart_body), Array{UInt8, 1}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.parse_multipart_form), HTTP.Messages.Request})
precompile(Tuple{getfield(HTTP, Symbol("#strip_quotes#31")), Base.SubString{String}})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{Type{HTTP.Multipart{T} where T<:IO}, Base.SubString{String}, Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.SubString{String}, String, Base.SubString{String}})
precompile(Tuple{Type{HTTP.Multipart{T} where T<:IO}, Nothing, Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, String, String, Base.SubString{String}})
precompile(Tuple{typeof(Base.length), Array{HTTP.Multipart{T} where T<:IO, 1}})
precompile(Tuple{typeof(Base.getindex), Array{HTTP.Multipart{T} where T<:IO, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), HTTP.Multipart{Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Symbol})
precompile(Tuple{typeof(Base.read!), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.read), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(HTTP.content_disposition_tokenize), String})
precompile(Tuple{typeof(HTTP.content_disposition_extract), String})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Bool, Base.SubString{T} where T<:AbstractString, Union{Nothing, Base.SubString{T} where T<:AbstractString}}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Base.SubString{String}, Nothing}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Base.SubString{String}, Nothing}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Bool, Base.SubString{T} where T<:AbstractString, Union{Nothing, Base.SubString{T} where T<:AbstractString}}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Base.SubString{String}, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Base.SubString{String}, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.bytes), String})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Char, Char, Char, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Char, Int64})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Char, Char, Char, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, UInt8, UInt8, UInt8, UInt8, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{String, Array{UInt8, 1}, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Array{UInt8, 1}, String}, Vararg{Tuple{String, Array{UInt8, 1}, String}, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, Base.CodeUnits{UInt8, String}, String}}, Type{Tuple{String, DenseArray{UInt8, 1}, String}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, Array{UInt8, 1}, String}}, Type{Tuple{String, DenseArray{UInt8, 1}, String}}})
precompile(Tuple{Type{Array{Tuple{String, DenseArray{UInt8, 1}, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{String, DenseArray{UInt8, 1}, String}, 1}, Tuple{Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Base.CodeUnits{UInt8, String}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}, Tuple{String, Array{UInt8, 1}, String}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, DenseArray{UInt8, 1}, String}, 1}})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.HTMLSig, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.length), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.Masked, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.Exact, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.byteequal), Array{UInt8, 1}, Int64, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.MP4Sig}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Ptr{UInt8}, 1}, Int64})
precompile(Tuple{typeof(HTTP.isjson), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.JSONSig}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.TextSig}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.contenttype), Type{HTTP.TextSig}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, DenseArray{UInt8, 1}, String}, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.CodeUnits{UInt8, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.getindex), Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(HTTP.sniff), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.HTMLSig, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.CodeUnits{UInt8, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(HTTP.contenttype), HTTP.HTMLSig})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.Masked, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.Exact, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(HTTP.bigend), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.byteequal), Base.CodeUnits{UInt8, String}, Int64, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.MP4Sig}, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(HTTP.ignorewhitespace), Base.CodeUnits{UInt8, String}, Int64, Int64})
precompile(Tuple{typeof(HTTP.restofstring), Base.CodeUnits{UInt8, String}, Int64, Int64})
precompile(Tuple{typeof(HTTP.isjson), Base.CodeUnits{UInt8, String}, Int64, Int64})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.JSONSig}, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.TextSig}, Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{UInt8, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(HTTP.contenttype), HTTP.Masked})
precompile(Tuple{typeof(HTTP.contenttype), HTTP.Exact})
precompile(Tuple{typeof(HTTP.contenttype), Type{HTTP.MP4Sig}})
precompile(Tuple{typeof(HTTP.isjson), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.ignorewhitespace), Base.CodeUnits{UInt8, String}, UInt64, Int64})
precompile(Tuple{typeof(HTTP.restofstring), Base.CodeUnits{UInt8, String}, UInt64, Int64})
precompile(Tuple{typeof(HTTP.isjson), Base.CodeUnits{UInt8, String}, UInt64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{String, DenseArray{UInt8, 1}, String}, 1}, Int64})
precompile(Tuple{typeof(HTTP.sniff), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.ignorewhitespace), String, Int64, Int64})
precompile(Tuple{typeof(HTTP.isjson), String, Int64, Int64})
precompile(Tuple{typeof(HTTP.isjson), String})
precompile(Tuple{typeof(Base.vect), Tuple{String, Array{String, 1}}, Vararg{Tuple{String, Array{String, 1}}, N} where N})
precompile(Tuple{Type{Main.Offset}, Int64, Int64})
precompile(Tuple{Type{Main.URLTest}, String, String, Bool, Tuple{Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset}, Bool})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset}, getfield(Main, Symbol("#29#30")){String}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset, Main.Offset}, getfield(Main, Symbol("#29#30")){String}}, Int64})
precompile(Tuple{Type{HTTP.URIs.URI}, String, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{Main.URLTest}, String, String, Bool, Bool})
precompile(Tuple{typeof(Base.getindex), Type{Main.URLTest}, Main.URLTest, Main.URLTest, Main.URLTest, Main.URLTest, Vararg{Main.URLTest, N} where N})
precompile(Tuple{typeof(Base.string), HTTP.URIs.URI})
precompile(Tuple{Type{NamedTuple{(:scheme, :host), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), String, Base.SubString{String}, String, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:scheme, :host), Tuple{String, String}}, Type{HTTP.URIs.URI}})
precompile(Tuple{typeof(Base.:(==)), HTTP.URIs.URI, HTTP.URIs.URI})
precompile(Tuple{Type{NamedTuple{(:scheme, :host, :path), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), String, Base.SubString{String}, String, Base.SubString{String}, String, Base.SubString{String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:scheme, :host, :path), Tuple{String, String, String}}, Type{HTTP.URIs.URI}})
precompile(Tuple{Type{NamedTuple{(:scheme, :host, :userinfo), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), String, String, String, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:scheme, :host, :userinfo), Tuple{String, String, String}}, Type{HTTP.URIs.URI}})
precompile(Tuple{Type{NamedTuple{(:scheme, :host, :query), T} where T<:Tuple}, Tuple{String, String, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Base.Dict{String, String}}}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), String, Base.SubString{String}, String, Base.SubString{String}, Base.SubString{String}, Base.Dict{String, String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:scheme, :host, :query), Tuple{String, String, Base.Dict{String, String}}}, Type{HTTP.URIs.URI}})
precompile(Tuple{Type{NamedTuple{(:scheme, :host, :path, :fragment), T} where T<:Tuple}, Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), String, Base.SubString{String}, String, Base.SubString{String}, String, Base.SubString{String}, String, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:scheme, :host, :path, :fragment), Tuple{String, String, String, String}}, Type{HTTP.URIs.URI}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, Array{String, 1}}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), String, String, Array{String, 1}})
precompile(Tuple{typeof(Base.parse), Type{HTTP.URIs.URI}, String})
precompile(Tuple{typeof(Base.isvalid), HTTP.URIs.URI})
precompile(Tuple{typeof(Base.getproperty), HTTP.URIs.URI, Symbol})
precompile(Tuple{typeof(HTTP.URIs.splitpath), Base.SubString{String}})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, Array{String, 1}}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:host, :path, :scheme, :port, :userinfo), T} where T<:Tuple}, Tuple{String, String, String, Int64, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, String, Int64, String}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), String, String, String, Int64, String, Base.SubString{String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:host, :path, :scheme, :port, :userinfo), Tuple{String, String, String, Int64, String}}, Type{HTTP.URIs.URI}})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{Type{NamedTuple{(:host, :path, :scheme), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:host, :path, :scheme), Tuple{String, String, String}}, Type{HTTP.URIs.URI}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, HTTP.URIs.URI})
precompile(Tuple{typeof(Base.sprint), Function, HTTP.URIs.URI})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.URIs.URI})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.URIs.URI})
precompile(Tuple{typeof(HTTP.Strings.lower), UInt8})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Char})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{String, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Base.Dict{String, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Dict{String, Any}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#16#17")), Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Dict{String, Any}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), String, Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Generator{Array{String, 1}, getfield(HTTP.URIs, Symbol("#14#15")){String}}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Array{String, 1}, getfield(HTTP.URIs, Symbol("#14#15")){String}}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), String, String})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), String})
precompile(Tuple{typeof(HTTP.URIs.unescapeuri), String})
precompile(Tuple{typeof(Base.vect), Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, String}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Tuple{Any, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any}, 1}, Tuple{Tuple{String, String}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Array{Tuple{Any, Any}, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#16#17")), Tuple{String, String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#16#17")), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, String}, Base.Pair{Int64, Int64}})
precompile(Tuple{Type{Array{Base.Pair{Any, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Any, Any}, 1}, Tuple{Base.Pair{String, String}, Base.Pair{Int64, Int64}}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Array{Base.Pair{Any, Any}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{Any, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), Int64, String})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Dict{Any, Any}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#16#17")), Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Dict{Any, Any}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Int64, Int64})
precompile(Tuple{typeof(Base.in), String, Tuple{String, String}})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Array{Base.Pair{Any, Any}, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Array{Base.Pair{Any, Any}, 1}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Array{Base.Pair{Any, Any}, 1}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.SubString{String}, 1}}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#9#11")), Base.SubString{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.URIs, Symbol("#9#11"))}, getfield(HTTP.URIs, Symbol("#8#10"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Generator{Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.URIs, Symbol("#9#11"))}, getfield(HTTP.URIs, Symbol("#8#10"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.URIs, Symbol("#9#11"))}, getfield(HTTP.URIs, Symbol("#8#10"))}})
precompile(Tuple{typeof(HTTP.URIs.queryparams), HTTP.URIs.URI})
precompile(Tuple{typeof(Base.vect), Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.SubString{String}, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.promote_type), Type{Base.SubString{String}}, Type{AbstractString}})
precompile(Tuple{Type{Array{AbstractString, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractString, 1}, Tuple{Base.SubString{String}, Base.SubString{String}, String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#8#10")), Array{AbstractString, 1}})
precompile(Tuple{typeof(HTTP.URIs.decodeplus), Base.SubString{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Base.Generator{Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.URIs, Symbol("#9#11"))}, getfield(HTTP.URIs, Symbol("#8#10"))}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, String}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractString, 1}, Tuple{Base.SubString{String}, String}})
precompile(Tuple{typeof(HTTP.URIs.decodeplus), String})
precompile(Tuple{Type{NamedTuple{(:strict,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#kw##parse_uri")), NamedTuple{(:strict,), Tuple{Bool}}, typeof(HTTP.URIs.parse_uri), String})
precompile(Tuple{Type{Test.Threw}, HTTP.URIs.ParseError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.iterate), Array{Main.URLTest, 1}})
precompile(Tuple{typeof(Base.string), String, Main.URLTest})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Main.URLTest})
precompile(Tuple{typeof(Base.sizeof), Main.URLTest})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.URIs.URI})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.URIs.URI})
precompile(Tuple{typeof(Base.getproperty), Main.URLTest, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{Main.URLTest, 1}, Int64})
precompile(Tuple{typeof(Main.parse_connect_target), String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.SubString{String}, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.SubString{String}, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#kw##parse_uri_reference")), NamedTuple{(:strict,), Tuple{Bool}}, typeof(HTTP.URIs.parse_uri_reference), String})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Base.Dict{String, String}})
precompile(Tuple{typeof(HTTP.URIs.queryparams), String})
precompile(Tuple{typeof(HTTP.URIs.splitpath), String})
precompile(Tuple{typeof(Base.endswith), String, Char})
precompile(Tuple{typeof(HTTP.URIs.normpath), String})
precompile(Tuple{typeof(Base.first), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.URIs.normpath), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.URIs.normpath), HTTP.URIs.URI})
precompile(Tuple{getfield(Main, Symbol("#31#32")), String, String})
precompile(Tuple{Type{NamedTuple{(:scheme, :userinfo, :host, :port, :path, :query, :fragment), T} where T<:Tuple}, Tuple{Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, String, Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, String, Base.SubString{String}, Base.SubString{String}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##merge#4")), Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, String, Base.SubString{String}, Base.SubString{String}, typeof(Base.merge), HTTP.URIs.URI})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:scheme, :userinfo, :host, :port, :path, :query, :fragment), Tuple{Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, String, Base.SubString{String}, Base.SubString{String}}}, Type{HTTP.URIs.URI}})
precompile(Tuple{Type{NamedTuple{(:scheme, :userinfo, :host, :port, :path, :query, :fragment), T} where T<:Tuple}, Tuple{Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:scheme, :userinfo, :host, :port, :path, :query, :fragment), Tuple{Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}}}, Type{HTTP.URIs.URI}})
precompile(Tuple{typeof(Base.read), String})
precompile(Tuple{typeof(Base.string), String, Base.Dict{String, Any}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Pair{DataType, DataType}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.typeinfo_eltype), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Nothing})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64})
precompile(Tuple{Type{HTTP.Cookies.Cookie}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Cookies.Cookie, Symbol})
precompile(Tuple{typeof(HTTP.Cookies.domainmatch), HTTP.Cookies.Cookie, String})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Cookies.Cookie, Symbol, String})
precompile(Tuple{typeof(HTTP.Cookies.pathmatch), HTTP.Cookies.Cookie, String})
precompile(Tuple{Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{Type{NamedTuple{(:maxage,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#1")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:maxage,), Tuple{Int64}}}, Type{HTTP.Cookies.Cookie}, HTTP.Cookies.Cookie})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:maxage,), Tuple{Int64}}, Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{Type{NamedTuple{(:domain,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#1")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:domain,), Tuple{String}}}, Type{HTTP.Cookies.Cookie}, HTTP.Cookies.Cookie})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:domain,), Tuple{String}}, Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{Type{NamedTuple{(:path,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#1")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:path,), Tuple{String}}}, Type{HTTP.Cookies.Cookie}, HTTP.Cookies.Cookie})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:path,), Tuple{String}}, Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{typeof(Dates.unix2datetime), Int64})
precompile(Tuple{Type{NamedTuple{(:expires,), T} where T<:Tuple}, Tuple{Dates.DateTime}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#1")), Base.Iterators.Pairs{Symbol, Dates.DateTime, Tuple{Symbol}, NamedTuple{(:expires,), Tuple{Dates.DateTime}}}, Type{HTTP.Cookies.Cookie}, HTTP.Cookies.Cookie})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:expires,), Tuple{Dates.DateTime}}, Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{typeof(Base.convert), Type{Dates.DateTime}, Dates.DateTime})
precompile(Tuple{Type{Dates.DateTime}, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{HTTP.Cookies.Cookie, String}, Vararg{Tuple{HTTP.Cookies.Cookie, String}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{HTTP.Cookies.Cookie, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{HTTP.Cookies.Cookie, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{HTTP.Cookies.Cookie, String}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{HTTP.Cookies.Cookie, String}, 1}, Int64})
precompile(Tuple{typeof(Base.filter), typeof(HTTP.Cookies.validcookiepathbyte), String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Char})
precompile(Tuple{typeof(Base.vect), HTTP.Cookies.Cookie, Vararg{HTTP.Cookies.Cookie, N} where N})
precompile(Tuple{typeof(Base.string), String, Array{HTTP.Cookies.Cookie, 1}})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}})
precompile(Tuple{Type{Base.Dict{String, String}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{Type{NamedTuple{(:path, :domain, :httponly, :expires), T} where T<:Tuple}, Tuple{String, String, Bool, Dates.DateTime}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Bool, Dates.DateTime}}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:path, :domain, :httponly, :expires), Tuple{String, String, Bool, Dates.DateTime}}}, Type{HTTP.Cookies.Cookie}, HTTP.Cookies.Cookie})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:path, :domain, :httponly, :expires), Tuple{String, String, Bool, Dates.DateTime}}, Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{Type{NamedTuple{(:path, :expires, :httponly), T} where T<:Tuple}, Tuple{String, Dates.DateTime, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Dates.DateTime, Bool}}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:path, :expires, :httponly), Tuple{String, Dates.DateTime, Bool}}}, Type{HTTP.Cookies.Cookie}, HTTP.Cookies.Cookie})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:path, :expires, :httponly), Tuple{String, Dates.DateTime, Bool}}, Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{Type{NamedTuple{(:path, :httponly), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{getfield(HTTP.Cookies, Symbol("##Cookie#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:path, :httponly), Tuple{String, Bool}}}, Type{HTTP.Cookies.Cookie}, HTTP.Cookies.Cookie})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:path, :httponly), Tuple{String, Bool}}, Type{HTTP.Cookies.Cookie}, String, String})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Dict{String, String}, Array{HTTP.Cookies.Cookie, 1}}, Vararg{Tuple{Base.Dict{String, String}, Array{HTTP.Cookies.Cookie, 1}}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.Dict{String, String}, Array{HTTP.Cookies.Cookie, 1}}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, String}, Array{HTTP.Cookies.Cookie, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, String}, Array{HTTP.Cookies.Cookie, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{String, String}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{typeof(HTTP.Cookies.readsetcookie), String, String})
precompile(Tuple{typeof(HTTP.Cookies.readsetcookies), String, Array{String, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{HTTP.Cookies.Cookie, 1}, Array{HTTP.Cookies.Cookie, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.Dict{String, String}, Array{HTTP.Cookies.Cookie, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.string), String, Dates.Delim{Char, 1}, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Delim{Char, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Delim{Char, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{HTTP.Cookies.Cookie, 1}, Array{HTTP.Cookies.Cookie, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{HTTP.Cookies.Cookie, 1}, Array{HTTP.Cookies.Cookie, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{HTTP.Cookies.Cookie, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{HTTP.Cookies.Cookie, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{HTTP.Cookies.Cookie, 1}, Array{HTTP.Cookies.Cookie, 1}}}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{typeof(HTTP.Cookies.sanitizeCookiePath), String})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Dict{String, String}, String, Array{HTTP.Cookies.Cookie, 1}}, Vararg{Tuple{Base.Dict{String, String}, String, Array{HTTP.Cookies.Cookie, 1}}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.Dict{String, String}, String, Array{HTTP.Cookies.Cookie, 1}}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, String}, String, Array{HTTP.Cookies.Cookie, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Dict{String, String}, String, Array{HTTP.Cookies.Cookie, 1}}, Int64, Int64})
precompile(Tuple{typeof(HTTP.Cookies.readcookies), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{typeof(HTTP.Cookies.readcookies), Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.split), Base.SubString{String}, Char})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.Dict{String, String}, String, Array{HTTP.Cookies.Cookie, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, String, String, Int64, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, Int64, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{Type{Array{Base.Pair{String, String}, 1}}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :upgrade, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :upgrade, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :num_headers, :upgrade, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :host, :port, :request_url, :num_headers, :upgrade, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :host, :port, :request_url, :num_headers, :upgrade, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :host, :port, :request_url, :num_headers, :upgrade, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :num_headers, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :num_headers, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :num_headers, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :port, :num_headers, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :port, :num_headers, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :port, :num_headers, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :port, :num_headers, :upgrade, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :port, :num_headers, :upgrade, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :query_string, :fragment, :request_path, :request_url, :host, :port, :num_headers, :upgrade, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :fragment, :request_path, :request_url, :host, :userinfo, :port, :num_headers, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :fragment, :request_path, :request_url, :host, :userinfo, :port, :num_headers, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :fragment, :request_path, :request_url, :host, :userinfo, :port, :num_headers, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :request_path, :request_url, :num_headers, :upgrade, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :request_path, :request_url, :num_headers, :upgrade, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :request_path, :request_url, :num_headers, :upgrade, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :request_url, :host, :port, :num_headers, :upgrade, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :request_url, :host, :port, :num_headers, :upgrade, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :request_url, :host, :port, :num_headers, :upgrade, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, Int64, String, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :request_path, :request_url, :query_string, :fragment, :num_headers, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :method, :request_path, :request_url, :query_string, :fragment, :num_headers, :headers, :body), Tuple{String, Bool, Int64, Int64, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :method, :request_path, :request_url, :query_string, :fragment, :num_headers, :headers, :body), Tuple{String, String, Bool, Int64, Int64, String, String, String, String, String, Int64, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{typeof(Base.getindex), Type{HTTPMessages.Message}, HTTPMessages.Message, HTTPMessages.Message, HTTPMessages.Message, HTTPMessages.Message, Vararg{HTTPMessages.Message, N} where N})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :status_code, :response_status, :num_headers, :headers, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :status_code, :response_status, :num_headers, :headers, :body), Tuple{String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :status_code, :response_status, :num_headers, :headers, :body), Tuple{String, String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{Type{NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :status_code, :response_status, :num_headers, :headers, :body_size, :body), T} where T<:Tuple}, Tuple{String, String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, Int64, String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, Int64, String}}})
precompile(Tuple{getfield(HTTPMessages, Symbol("##Message#1")), String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:raw, :should_keep_alive, :http_major, :http_minor, :status_code, :response_status, :num_headers, :headers, :body_size, :body), Tuple{String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, Int64, String}}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:name, :raw, :should_keep_alive, :http_major, :http_minor, :status_code, :response_status, :num_headers, :headers, :body_size, :body), Tuple{String, String, Bool, Int64, Int64, Int64, String, Int64, Array{Base.Pair{String, String}, 1}, Int64, String}}, Type{HTTPMessages.Message}})
precompile(Tuple{getfield(Test, Symbol("#@test_broken")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(Test, Symbol("#@test_skip")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{HTTPMessages.Message, 1}})
precompile(Tuple{typeof(Base.string), String, HTTPMessages.Message})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTPMessages.Message})
precompile(Tuple{typeof(Base.sizeof), HTTPMessages.Message})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{String, String}, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{String, String}, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{String, String}, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{String, String}, 1}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.getproperty), HTTPMessages.Message, Symbol})
precompile(Tuple{typeof(HTTP.IOExtras.peerport), Base.BufferStream})
precompile(Tuple{typeof(HTTP.IOExtras.localport), Base.BufferStream})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#12#13")){HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#8#9")){HTTP.ConnectionPool.Connection{Base.BufferStream}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.ConnectionPool.Transaction{Base.BufferStream}})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{Base.BufferStream}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#10#11")){HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#4#5")){HTTP.ConnectionPool.Connection{Base.BufferStream}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.ConnectionPool.Transaction{Base.BufferStream}})
precompile(Tuple{typeof(HTTP.Messages.writestartline), HTTP.ConnectionPool.Transaction{Base.BufferStream}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{Base.BufferStream}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Streams.handle_continue), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Base.BufferStream}}})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Base.BufferStream}}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{Base.BufferStream}, HTTP.Messages.Request})
precompile(Tuple{getfield(Base, Symbol("#526#527")){Base.BufferStream, Ptr{UInt8}, UInt64}})
precompile(Tuple{typeof(Base.lock), getfield(Base, Symbol("#526#527")){Base.BufferStream, Ptr{UInt8}, UInt64}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Base.BufferStream}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.eof), HTTP.ConnectionPool.Transaction{Base.BufferStream}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Base.BufferStream}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.purge), HTTP.ConnectionPool.Connection{Base.BufferStream}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Base.BufferStream}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Base.BufferStream}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.ConnectionPool.Transaction{Base.BufferStream}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#2#3")){HTTP.ConnectionPool.Connection{Base.BufferStream}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#6#7")){HTTP.ConnectionPool.Connection{Base.BufferStream}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.ConnectionPool.Transaction{Base.BufferStream}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Transaction{Base.BufferStream}})
precompile(Tuple{typeof(Base.parse), Type{HTTP.Messages.Request}, String})
precompile(Tuple{typeof(HTTP.ConnectionPool.read_to_buffer), HTTP.ConnectionPool.Transaction{Base.BufferStream}, Int64})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Base.BufferStream}, Function, Int64})
precompile(Tuple{typeof(Base.getproperty), HTTP.Messages.Request, Symbol})
precompile(Tuple{typeof(Base.in), Base.SubString{String}, Tuple{String, String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#33#35")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{getfield(Main, Symbol("#33#35")), Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, getfield(Main, Symbol("#33#35"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, getfield(Main, Symbol("#33#35"))}})
precompile(Tuple{typeof(Base.length), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Pair{String, String}, 1}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.catch_stack)})
precompile(Tuple{Type{Test.Threw}, UndefVarError, Array{Any, 1}, LineNumberNode})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Broken})
precompile(Tuple{typeof(Test.do_broken_test), Test.Threw, Expr})
precompile(Tuple{typeof(Base.iterate), Array{HTTPMessages.Message, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Base.SubString{String}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{Type{HTTP.Messages.Request}, String, String, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Messages.Request, Symbol, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.convert), Type{Array{UInt8, 1}}, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Base.SubString{String}, Base.SubString{String}}, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.:(==)), HTTP.Messages.Request, HTTP.Messages.Request})
precompile(Tuple{Type{Test.Threw}, HTTP.Parsers.ParseError, Nothing, LineNumberNode})
precompile(Tuple{Type{Test.Broken}, Symbol, Expr})
precompile(Tuple{Type{HTTP.Messages.Request}, String, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{String, String}}, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base.getindex), Type{Base.Pair{String, String}}, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(HTTP.Messages.header), HTTP.Messages.Request, String})
precompile(Tuple{Type{HTTP.Messages.Response}})
precompile(Tuple{typeof(HTTP.Messages.readheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.vect), Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{Base.BufferStream}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Base.BufferStream}}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{Base.BufferStream}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Base.BufferStream}}})
precompile(Tuple{typeof(Base.readavailable), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Base.BufferStream}}, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Base.BufferStream}}})
precompile(Tuple{typeof(Base.parse), Type{HTTP.Messages.Response}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#34#36")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{getfield(Main, Symbol("#34#36")), Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, getfield(Main, Symbol("#34#36"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, getfield(Main, Symbol("#34#36"))}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Parsers.ParseError, Symbol})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(HTTP.ConnectionPool.monitor_idle_connection), HTTP.ConnectionPool.Connection{Base.BufferStream}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#14#15")){HTTP.ConnectionPool.Transaction{Base.BufferStream}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Main.Loopback}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, DataType}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Bool}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Int64}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Pair{Symbol, DataType}}, Type{Base.Pair{Symbol, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, Any}, 1}, Tuple{Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, Any}, 1}, Base.Pair{Symbol, DataType}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, Any}, 1}, Base.Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, Any}, 1}, Base.Pair{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.Docs.docerror), Any})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{Type{Main.FunctionIO}, Function})
precompile(Tuple{typeof(Main.call), Main.FunctionIO})
precompile(Tuple{typeof(Base.read), Main.FunctionIO})
precompile(Tuple{getfield(Main, Symbol("#66#76"))})
precompile(Tuple{typeof(Base.setproperty!), Main.FunctionIO, Symbol, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Base.GenericIOBuffer{Array{UInt8, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, Base.GenericIOBuffer{Array{UInt8, 1}}, String}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{Any, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{getfield(Main, Symbol("##lbreq#37")), String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Main.lbreq), String, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Main.lbreq), String, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:socket_type, :retry, :connection_limit), T} where T<:Tuple}, Tuple{DataType, Bool, Int64}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:socket_type, :connection_limit), Tuple{DataType, Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{Any, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, DataType, Bool, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Nothing}, Type{DataType}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Bool, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :retry), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Bool, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:socket_type, :retry, :connection_limit, :parent), Tuple{DataType, Bool, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Any, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), Array{Any, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Any, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Any, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Any, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:parent, :version), Tuple{Nothing, Base.VersionNumber}}, Type{HTTP.Messages.Request}, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{Nothing, DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{Nothing, DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{Any, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{Any, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :retry), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :retry, :connection_limit), Tuple{Int64, Nothing, Bool, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :retry), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :retry), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :retry), Tuple{Bool, Nothing, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :retry), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.peerport), Main.Loopback})
precompile(Tuple{typeof(HTTP.IOExtras.localport), Main.Loopback})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, Int64, Main.Loopback, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, Int64, Main.Loopback, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, UInt16, Main.Loopback, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, UInt16, Main.Loopback, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Threads.Atomic{Int64}, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Int64, Base.GenericCondition{Base.ReentrantLock}, Bool, Float64, Base.ReentrantLock, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Main.Loopback, Bool})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Main.Loopback})
precompile(Tuple{typeof(Base.print_to_string), Sockets.TCPSocket, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{T} where T, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.sizeof), Base.Libc.RawFD})
precompile(Tuple{Type{Ref{T} where T}, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Base.RefValue{Base.Libc.RawFD}})
precompile(Tuple{typeof(Base.:(+)), Ptr{Nothing}, Int64})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#10#11")){HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#4#5")){HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.ConnectionPool.Transaction{Main.Loopback}})
precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{Main.Loopback}})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#12#13")){HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#8#9")){HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.ConnectionPool.Transaction{Main.Loopback}})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Main.Loopback}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.eof), HTTP.ConnectionPool.Transaction{Main.Loopback}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{typeof(Base.close), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.purge), HTTP.ConnectionPool.Connection{Main.Loopback}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Main.Loopback}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{HTTP.ConnectionPool.Connection{T} where T<:IO}, HTTP.ConnectionPool.Connection{Main.Loopback}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.ConnectionPool.Transaction{Main.Loopback}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#2#3")){HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#6#7")){HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.ConnectionPool.Transaction{Main.Loopback}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Transaction{Main.Loopback}})
precompile(Tuple{typeof(HTTP.Messages.readheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.truncate), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Array{Base.Pair{String, Any}, 1}})
precompile(Tuple{typeof(HTTP.Messages.writestartline), Base.BufferStream, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.BufferStream, HTTP.Messages.Response})
precompile(Tuple{getfield(Main, Symbol("#40#42")){Main.Loopback}, HTTP.Messages.Request})
precompile(Tuple{typeof(Main.on_headers), getfield(Main, Symbol("#40#42")){Main.Loopback}, Main.Loopback})
precompile(Tuple{typeof(Main.on_body), getfield(Main, Symbol("#41#43")){Main.Loopback}, Main.Loopback})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{typeof(Base.readavailable), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:retry, :connection_limit), Tuple{Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Any, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Any, 1}})
precompile(Tuple{typeof(HTTP.Messages.writestartline), HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.Pair{Symbol, Bool}, Int64, typeof(Base.sprint), Function, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.compactstartline), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.bodysummary), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.StreamRequest.writebodystream), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{Any, 1}})
precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{Main.Loopback}, String, String})
precompile(Tuple{typeof(Base.unsafe_write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{Any, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Any, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}}})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, String})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.read_to_buffer), HTTP.ConnectionPool.Transaction{Main.Loopback}, Int64})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Main.Loopback}, Function, Int64})
precompile(Tuple{getfield(Main, Symbol("#38#39")){getfield(Main, Symbol("#41#43")){Main.Loopback}}})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{getfield(Main, Symbol("#41#43")){Main.Loopback}, HTTP.Messages.Request})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.Pair{Symbol, Bool}, Int64, typeof(Base.sprint), Function, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writestartline), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.compactstartline), HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writestartline), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Main.FunctionIO, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{getfield(Main, Symbol("##lbreq#37")), String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Main.lbreq), String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{typeof(Main.lbreq), String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Main.FunctionIO, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{Nothing, DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{typeof(HTTP.ConnectionPool.inactiveseconds), HTTP.ConnectionPool.Connection{Main.Loopback}})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#23#24")){HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{Main.Loopback}}, Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.ConnectionPool.isvalid), HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{Main.Loopback}, Int64, Int64})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:retry, :connection_limit), Tuple{Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{typeof(HTTP.ConnectionPool.monitor_idle_connection), HTTP.ConnectionPool.Connection{Main.Loopback}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#14#15")){HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, Main.FunctionIO})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Main.FunctionIO, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}}})
precompile(Tuple{getfield(Main, Symbol("#67#77"))})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{String, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{String, 1}})
precompile(Tuple{getfield(Main, Symbol("##lbreq#37")), String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Main.lbreq), String, Array{Any, 1}, Array{String, 1}})
precompile(Tuple{typeof(Main.lbreq), String, Array{Any, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{String, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.sizeof), typeof(Base.add_sum), Array{String, 1}, Int64, Int64, Int64})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{Nothing, DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{String, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{String, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:retry, :connection_limit), Tuple{Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{String, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{String, 1}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebodystream), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{String, 1}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{String, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{String, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}}})
precompile(Tuple{typeof(Base.vect), Base.CodeUnits{UInt8, String}, Vararg{Base.CodeUnits{UInt8, String}, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{Base.CodeUnits{UInt8, String}, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(Main, Symbol("##lbreq#37")), String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Main.lbreq), String, Array{Any, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{typeof(Main.lbreq), String, Array{Any, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{Base.CodeUnits{UInt8, String}, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.length), typeof(Base.add_sum), Array{Base.CodeUnits{UInt8, String}, 1}, Int64, Int64, Int64})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{Nothing, DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:retry, :connection_limit), Tuple{Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebodystream), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{Base.CodeUnits{UInt8, String}, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Base.CodeUnits{UInt8, String}, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}}})
precompile(Tuple{getfield(HTTP, Symbol("##open#6")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.open), Function, String, String, Array{Any, 1}})
precompile(Tuple{typeof(Main.lbopen), Function, String, Array{Any, 1}})
precompile(Tuple{getfield(HTTP, Symbol("##open#6")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.open), Function, String, String, Array{Any, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##open")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.open), Function, String, String, Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(Main, Symbol("#68#78"))}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#68#78"))}}}, Type{NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#68#78"))}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#68#78")), DataType, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Nothing})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#68#78")), Bool, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#68#78")), Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :retry), Tuple{getfield(Main, Symbol("#68#78")), Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Main, Symbol("#68#78")), Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit, :parent), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Function, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :retry), Tuple{getfield(Main, Symbol("#68#78")), Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :retry, :connection_limit), Tuple{Int64, getfield(Main, Symbol("#68#78")), Bool, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(Main, Symbol("#68#78")), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(Main, Symbol("#68#78")), Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:retry, :connection_limit), Tuple{Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#68#78")), Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Main, Symbol("#69#79")){HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}}})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(Main, Symbol("#70#80"))}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#70#80"))}}}, Type{NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(Main, Symbol("#70#80"))}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#70#80")), DataType, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Nothing})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#70#80")), Bool, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#70#80")), Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :retry), Tuple{getfield(Main, Symbol("#70#80")), Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Main, Symbol("#70#80")), Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit, :parent), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :retry), Tuple{getfield(Main, Symbol("#70#80")), Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :retry, :connection_limit), Tuple{Int64, getfield(Main, Symbol("#70#80")), Bool, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(Main, Symbol("#70#80")), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(Main, Symbol("#70#80")), Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:retry, :connection_limit), Tuple{Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{getfield(Main, Symbol("#70#80")), Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Nothing})
precompile(Tuple{Type{Array{Base.Pair{String, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, Any}, 1}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{getfield(Main, Symbol("#71#81")){HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}}})
precompile(Tuple{Type{Test.Threw}, HTTP.ExceptionRequest.StatusError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.vect), Main.FunctionIO, Vararg{Main.FunctionIO, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{Main.FunctionIO, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(Main, Symbol("##lbreq#37")), String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Main.lbreq), String, Array{Any, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{typeof(Main.lbreq), String, Array{Any, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{Main.FunctionIO, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit), Tuple{Nothing, DataType, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:retry, :connection_limit), Tuple{Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit), Tuple{Nothing, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Main.FunctionIO, 1}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebodystream), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{Main.FunctionIO, 1}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}, HTTP.Messages.Request, Array{Main.FunctionIO, 1}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Array{Main.FunctionIO, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Main.Loopback}}}})
precompile(Tuple{getfield(Main, Symbol("#72#82"))})
precompile(Tuple{getfield(Main, Symbol("#73#83"))})
precompile(Tuple{getfield(Main, Symbol("#74#84"))})
precompile(Tuple{Type{NamedTuple{(:pipeline_limit,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Main, Symbol("##async_test#44")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}, typeof(Main.async_test), Array{String, 1}})
precompile(Tuple{getfield(Main, Symbol("#kw##async_test")), NamedTuple{(:pipeline_limit,), Tuple{Int64}}, typeof(Main.async_test)})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:method,), Tuple{String}}}, Type{NamedTuple{(:pipeline_limit,), Tuple{Int64}}}})
precompile(Tuple{getfield(Main, Symbol("##lbreq#37")), String, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}, typeof(Main.lbreq), String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{getfield(Main, Symbol("#45#55")){Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}, Array{String, 1}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}}, Type{NamedTuple{(:pipeline_limit,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:socket_type, :retry, :connection_limit), Tuple{DataType, Bool, Int64}}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Bool, Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Int64, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :connection_limit, :pipeline_limit), Tuple{DataType, Int64, Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Main.FunctionIO, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}, typeof(HTTP.request), String, String, Array{Any, 1}, Main.FunctionIO})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, DataType, Bool, Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Bool, Int64, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit, :pipeline_limit), Tuple{Nothing, Bool, Int64, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Int64, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :retry, :connection_limit, :pipeline_limit), Tuple{Nothing, Bool, Int64, Int64}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Bool, Int64, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit, :parent), Tuple{DataType, Bool, Int64, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(MbedTLS, Symbol("#33#35")){MbedTLS.SSLContext}, MbedTLS.SSLContext})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{DataType, Bool, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{Nothing, DataType, Bool, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :socket_type, :retry, :connection_limit, :pipeline_limit), Tuple{Nothing, DataType, Bool, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :retry, :connection_limit, :pipeline_limit), Tuple{Nothing, Bool, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :retry, :connection_limit, :pipeline_limit), Tuple{Int64, Nothing, Bool, Int64, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Main.Loopback}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:retry, :connection_limit, :pipeline_limit), Tuple{Bool, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :retry, :connection_limit, :pipeline_limit), Tuple{Nothing, Bool, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Main.Loopback}, HTTP.Messages.Request, Main.FunctionIO})
precompile(Tuple{getfield(Main, Symbol("#47#57")){Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}, Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#49#59")){Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}, Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#51#61")){Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}, Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#53#63")){Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:pipeline_limit,), Tuple{Int64}}}, Array{String, 1}}})
precompile(Tuple{getfield(MbedTLS, Symbol("#34#36")){MbedTLS.SSLContext}})
precompile(Tuple{getfield(Main, Symbol("#46#56"))})
precompile(Tuple{getfield(Main, Symbol("#48#58"))})
precompile(Tuple{getfield(Main, Symbol("#50#60"))})
precompile(Tuple{getfield(Main, Symbol("#52#62"))})
precompile(Tuple{getfield(Main, Symbol("#54#64"))})
precompile(Tuple{typeof(Base.repr), Float64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Base.Grisu._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Char})
precompile(Tuple{typeof(Base.haskey), Base.EnvDict, String})
precompile(Tuple{getfield(Main, Symbol("##async_test#44")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Main.async_test), Array{String, 1}})
precompile(Tuple{typeof(Main.async_test)})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:method,), Tuple{String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Main, Symbol("#45#55")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#47#57")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#49#59")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#51#61")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Array{String, 1}}})
precompile(Tuple{getfield(Main, Symbol("#53#63")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Array{String, 1}}})
precompile(Tuple{typeof(Main.async_test), Array{String, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{String, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#16#17"))})
precompile(Tuple{typeof(Base.lock), getfield(HTTP.ConnectionPool, Symbol("#16#17")), Base.ReentrantLock})
precompile(Tuple{typeof(HTTP.ConnectionPool.closeall)})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Connection{Main.Loopback}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Connection{Base.BufferStream}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit, :verbose), Tuple{Int64, Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(HTTP.WebSockets.open), Function, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}}}}, Type{NamedTuple{(:reuse_limit, :verbose), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{UInt8}, Random.SamplerType{UInt8}})
precompile(Tuple{typeof(Base.rand), Type{UInt8}, Tuple{Int64}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{String, String}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, String}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("##open#2")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.WebSockets.open), getfield(Main, Symbol("#89#95")), String})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :reuse_limit, :verbose, :parent), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Function, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:reuse_limit, :verbose), Tuple{Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}}}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:reuse_limit, :verbose), Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose), Tuple{Int64, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose), Tuple{Bool, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose), Tuple{Bool, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, String, String})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.print_to_string), HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.WebSockets.check_upgrade), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(MbedTLS.digest!), MbedTLS.MDKind, String, Array{UInt8, 1}})
precompile(Tuple{typeof(MbedTLS.digest), MbedTLS.MDKind, String})
precompile(Tuple{typeof(HTTP.WebSockets.mask!), Array{UInt8, 1}, Array{UInt8, 1}, Int64, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){UInt16, UInt8}, Type{UInt16}, Type{UInt8}, Int64})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){UInt64, UInt8}, Type{UInt64}, Type{UInt8}, Int64})
precompile(Tuple{typeof(HTTP.WebSockets.wswrite), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, UInt8, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Base.RefValue{UInt64}, Int64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Base.RefValue{UInt32}, Int64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Base.RefValue{UInt16}, Int64})
precompile(Tuple{typeof(HTTP.WebSockets.readheader), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{UInt8, 1}, Tuple{Base.OneTo{UInt64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt8, 1}, Base.UnitRange{UInt64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt8, 1}, Tuple{Base.UnitRange{UInt64}}})
precompile(Tuple{typeof(HTTP.WebSockets.mask!), Array{UInt8, 1}, Array{UInt8, 1}, Int64, Base.ReinterpretArray{UInt8, 1, UInt32, Array{UInt32, 1}}})
precompile(Tuple{typeof(HTTP.WebSockets.readframe), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(Base.readavailable), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(HTTP.WebSockets.mask!), Array{UInt8, 1}, Base.CodeUnits{UInt8, String}, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.WebSockets.wswrite), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, UInt8, Base.CodeUnits{UInt8, String}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("##closewrite#9")), Nothing, typeof(HTTP.IOExtras.closewrite), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{getfield(Main, Symbol("#89#95")), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("##close#10")), Nothing, typeof(Base.close), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(Base.__cat), Array{UInt8, 1}, Tuple{Int64}, Tuple{Bool}, UInt8, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, UInt8})
precompile(Tuple{typeof(Base.cat_indices), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{UInt8, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose), Tuple{Int64, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, String, String})
precompile(Tuple{typeof(HTTP.WebSockets.check_upgrade), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.WebSockets.wswrite), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, UInt8, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Base.RefValue{UInt64}, Int64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Base.RefValue{UInt32}, Int64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Base.RefValue{UInt16}, Int64})
precompile(Tuple{typeof(HTTP.WebSockets.readheader), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.WebSockets.readframe), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.readavailable), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.WebSockets.wswrite), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, UInt8, Base.CodeUnits{UInt8, String}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("##closewrite#9")), Nothing, typeof(HTTP.IOExtras.closewrite), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(Main, Symbol("#89#95")), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("##close#10")), Nothing, typeof(Base.close), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#89#95")), String}, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Main, Symbol("#listen_localhost#91")){Int64}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}}}}, Type{NamedTuple{(:reuse_limit, :verbose), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{String, String}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, String}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("##open#2")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.WebSockets.open), getfield(Main, Symbol("#90#96")), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :reuse_limit, :verbose, :parent), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}}}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:reuse_limit, :verbose), Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :reuse_limit, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose), Tuple{Bool, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose), Tuple{Int64, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(Main, Symbol("#86#92")){Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Nothing, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(Main, Symbol("#87#93")), Sockets.IPv4, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Main, Symbol("#90#96")), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{getfield(HTTP.WebSockets, Symbol("#3#4")){Bool, getfield(Main, Symbol("#90#96")), String}, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(Main, Symbol("#87#93")), HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(Main, Symbol("#87#93")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, String, String})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.print_to_string), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.WebSockets.check_upgrade), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(Main, Symbol("#88#94")), HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.WebSockets, Symbol("##upgrade#8")), Bool, typeof(HTTP.WebSockets.upgrade), getfield(Main, Symbol("#88#94")), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(Main, Symbol("#87#93")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Test.testset_forloop), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{Type{NamedTuple{(:body, :request), T} where T<:Tuple}, Tuple{String, HTTP.Messages.Request}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:body, :request), Tuple{String, HTTP.Messages.Request}}, Type{HTTP.Messages.Response}, Int64, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Int64})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.view), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), String})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, String, Int64, Int64})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Array{String, 1}})
precompile(Tuple{typeof(Base.promote_typeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Base.SubString{String}})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{AbstractString}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractString, 1}, Tuple{String, String, Base.SubString{String}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.sizeof), typeof(Base.add_sum), Array{AbstractString, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.sizeof), typeof(Base.add_sum), Base.IndexLinear, Array{AbstractString, 1}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.sizeof), Base.SubString{String}})
precompile(Tuple{typeof(Base.promote_typeof), Base.SubString{String}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractString, 1}, Tuple{Base.SubString{String}, String, Base.SubString{String}}})
precompile(Tuple{typeof(Base.vect), Array{UInt8, 1}, Vararg{Array{UInt8, 1}, N} where N})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.length), typeof(Base.add_sum), Array{Array{UInt8, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.length), typeof(Base.add_sum), Base.IndexLinear, Array{Array{UInt8, 1}, 1}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Array{Array{UInt8, 1}, 1}})
precompile(Tuple{typeof(Base.vect), Array{UInt8, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{Array{AbstractArray{UInt8, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{UInt8, 1}, 1}, Tuple{Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.length), typeof(Base.add_sum), Array{AbstractArray{UInt8, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.length), typeof(Base.add_sum), Base.IndexLinear, Array{AbstractArray{UInt8, 1}, 1}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Array{AbstractArray{UInt8, 1}, 1}})
precompile(Tuple{typeof(Base.length), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.add_sum), Int64, Int64})
precompile(Tuple{typeof(Base.vect), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Vararg{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, N} where N})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.length), typeof(Base.add_sum), Array{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.length), typeof(Base.add_sum), Base.IndexLinear, Array{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Array{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.vect), Base.GenericIOBuffer{Array{UInt8, 1}}, Vararg{Base.GenericIOBuffer{Array{UInt8, 1}}, N} where N})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.bytesavailable), typeof(Base.add_sum), Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.bytesavailable), typeof(Base.add_sum), Base.IndexLinear, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}})
precompile(Tuple{typeof(HTTP.Messages.bodylength), Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), Int64})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Int64, Int64})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), String})
precompile(Tuple{typeof(Base.:(==)), Base.CodeUnits{UInt8, String}, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), Base.SubString{String}})
precompile(Tuple{typeof(Base.:(==)), Base.CodeUnits{UInt8, Base.SubString{String}}, Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), Array{String, 1}})
precompile(Tuple{typeof(HTTP.MessageRequest.bodybytes), Array{Array{UInt8, 1}, 1}})
precompile(Tuple{Type{String}, HTTP.Messages.Request})
precompile(Tuple{Type{String}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.header), HTTP.Messages.Response, String})
precompile(Tuple{getfield(Main, Symbol("#append_header#100")), HTTP.Messages.Request, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(HTTP.Messages.field_name_isequal), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.strip), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{typeof(HTTP.Messages.headercontains), HTTP.Messages.Request, String, String})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#97#101")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(HTTP.Messages.httpversion), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.httpversion), HTTP.Messages.Response})
precompile(Tuple{Type{NamedTuple{(:verbose,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose,), Tuple{Int64}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:verbose,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:verbose,), Tuple{Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:verbose, :parent), Tuple{Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose,), Tuple{Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose,), Tuple{Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose), Tuple{Bool, Nothing, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose), Tuple{Int64, Nothing, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose), Tuple{Int64, Nothing, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose), Tuple{Bool, Nothing, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{Type{NamedTuple{(:response_stream, :verbose), T} where T<:Tuple}, Tuple{Base.BufferStream, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Base.BufferStream, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Base.BufferStream, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose, :parent), Tuple{Base.BufferStream, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose), Tuple{Base.BufferStream, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :response_stream, :verbose), Tuple{Bool, Nothing, Base.BufferStream, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :response_stream, :verbose), Tuple{Int64, Nothing, Base.BufferStream, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.read), Base.BufferStream})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :response_stream, :verbose), Tuple{Int64, Nothing, Base.BufferStream, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.BufferStream, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{String, String}, 1}, String, Nothing, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, String}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose,), Tuple{Int64}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, String}, 1}, String})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose,), Tuple{Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:verbose,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose,), Tuple{Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.IOStream, Int64}}})
precompile(Tuple{getfield(Main, Symbol("#98#102"))})
precompile(Tuple{typeof(Base.Filesystem.cd), getfield(Main, Symbol("#98#102")), String})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Base.IOStream, Tuple{Symbol}, NamedTuple{(:response_stream,), Tuple{Base.IOStream}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#99#103")){Int64}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Base.IOStream, Int64}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Nothing}, Type{Base.IOStream}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Base.IOStream, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.IOStream, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose, :parent), Tuple{Base.IOStream, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose), Tuple{Base.IOStream, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :response_stream, :verbose), Tuple{Bool, Nothing, Base.IOStream, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :response_stream, :verbose), Tuple{Int64, Nothing, Base.IOStream, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.write), Base.IOStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.StreamRequest.readbody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Response, Base.IOStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Base.IOStream, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose), Tuple{Nothing, Base.IOStream, Int64}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{Type{Base.Dict{HTTP.Handlers.Route, String}}})
precompile(Tuple{Type{Base.Dict{String, Base.Val{x} where x}}})
precompile(Tuple{Type{HTTP.Handlers.Router{sym} where sym}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}})
precompile(Tuple{Type{HTTP.Handlers.Router{sym} where sym}})
precompile(Tuple{Type{Base.Dict{HTTP.Handlers.Route, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{HTTP.Handlers.Route, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.Route})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, String, HTTP.Handlers.Route})
precompile(Tuple{Type{Base.Dict{HTTP.Handlers.Route, Any}}, Base.Dict{HTTP.Handlers.Route, String}})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##422")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(FooRouter, Symbol("#1#2"))})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#@register")), LineNumberNode, Module, Any, Any, Any})
precompile(Tuple{typeof(HTTP.Handlers.generate_gethandler), Symbol, String, String, String, String, Symbol})
precompile(Tuple{typeof(Base.getproperty), HTTP.Handlers.Router{Symbol("##422")}, Symbol})
precompile(Tuple{Type{HTTP.Handlers.Route}, String, String, String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(FooRouter, Symbol("#1#2"))}, HTTP.Handlers.Route})
precompile(Tuple{Type{NamedTuple{(:keepempty,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.map), Type{T} where T, Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{String}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Base.SubString{String}, 1}, Type{String}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, Type{String}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, Type{String}}})
precompile(Tuple{typeof(HTTP.Handlers.newsplitsegments), Array{String, 1}})
precompile(Tuple{typeof(HTTP.Handlers.gh), String})
precompile(Tuple{typeof(HTTP.Handlers.generate_gethandler), Symbol, String, String, String, Symbol, Symbol})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#@register")), LineNumberNode, Module, Any, Any, Any, Any})
precompile(Tuple{Type{HTTP.Messages.Request}})
precompile(Tuple{typeof(Base.setproperty!), HTTP.Messages.Request, Symbol, String})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Base.Val{x} where x}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##422")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##422")}, HTTP.Messages.Request})
precompile(Tuple{Type{Base.Val{Symbol("")}}})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##422")}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##422")}}}})
precompile(Tuple{Type{Base.Val{:test}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##422")}}}, Int64})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##422")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(FooRouter, Symbol("#1#2"))}, HTTP.Messages.Request})
precompile(Tuple{Type{HTTP.Messages.Response}, Int64})
precompile(Tuple{typeof(Base.:(==)), HTTP.Messages.Response, HTTP.Messages.Response})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#104#112"))})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#104#112"))}, HTTP.Messages.Request})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##423")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Handlers.Router{Symbol("##423")}, Symbol})
precompile(Tuple{typeof(Base.isempty), Base.Dict{HTTP.Handlers.Route, Any}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##423")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##423")}, HTTP.Messages.Request})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##423")}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##423")}}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##423")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#104#112"))}, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##423")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##423")}, HTTP.Messages.Request})
precompile(Tuple{Type{Base.Val{:path}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##423")}}}, Int64})
precompile(Tuple{Type{Base.Val{:to}}})
precompile(Tuple{Type{Base.Val{:greatness}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##423")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:path}, Base.Val{:to}, Base.Val{:greatness}})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#105#113"))})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#105#113"))}, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##423")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##423")}, HTTP.Messages.Request})
precompile(Tuple{Type{Base.Val{:next}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##423")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:next}, Base.Val{:path}, Base.Val{:to}, Base.Val{:greatness}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#105#113"))}, HTTP.Messages.Request})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##424")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Handlers.Router{Symbol("##424")}, Symbol})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##424")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##424")}, HTTP.Messages.Request})
precompile(Tuple{Type{Base.Val{:GET}}})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##424")}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##424")}}}})
precompile(Tuple{Type{Base.Val{:sget}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##424")}}}, Int64})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##424")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:sget}})
precompile(Tuple{Type{Base.Val{:POST}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##424")}, Base.Val{:POST}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:sget}})
precompile(Tuple{Type{Base.Val{:spost}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##424")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:spost}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##424")}, Base.Val{:POST}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:spost}})
precompile(Tuple{Type{Base.Val{:tpost}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##424")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:tpost}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##424")}, Base.Val{:POST}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:tpost}})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##425")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Handlers.Router{Symbol("##425")}, Symbol})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#106#114"))})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#106#114"))}, HTTP.Handlers.Route})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#107#115"))})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#107#115"))}, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##425")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##425")}, HTTP.Messages.Request})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##425")}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##425")}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##425")}}}, Int64})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##425")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}})
precompile(Tuple{Type{Base.Val{:sarv}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##425")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}, Base.Val{:sarv}})
precompile(Tuple{Type{Base.Val{:ghotra}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##425")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}, Base.Val{:sarv}, Base.Val{:ghotra}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#106#114"))}, HTTP.Messages.Request})
precompile(Tuple{Type{Base.Val{:sar}}})
precompile(Tuple{Type{Base.Val{:seven}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##425")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}, Base.Val{:sar}, Base.Val{:ghotra}, Base.Val{:seven}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#107#115"))}, HTTP.Messages.Request})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#108#116"))})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#108#116"))}, HTTP.Messages.Request})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##426")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Handlers.Router{Symbol("##426")}, Symbol})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##426")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##426")}, HTTP.Messages.Request})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##426")}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##426")}}}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##426")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#108#116"))}, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##426")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##426")}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##426")}}}, Int64})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##426")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:path}, Base.Val{:to}, Base.Val{:greatness}})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#109#117"))})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#109#117"))}, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##426")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##426")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##426")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:next}, Base.Val{:path}, Base.Val{:to}, Base.Val{:greatness}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#109#117"))}, HTTP.Messages.Request})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##427")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Handlers.Router{Symbol("##427")}, Symbol})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##427")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##427")}, HTTP.Messages.Request})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##427")}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##427")}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##427")}}}, Int64})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##427")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:sget}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##427")}, Base.Val{:POST}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:sget}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##427")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:spost}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##427")}, Base.Val{:POST}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:spost}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##427")}, Base.Val{:GET}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:tpost}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##427")}, Base.Val{:POST}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:tpost}})
precompile(Tuple{Type{HTTP.Handlers.Router{Symbol("##428")}}, HTTP.Handlers.RequestHandlerFunction{getfield(HTTP.Handlers, Symbol("#1#2"))}, Base.Dict{HTTP.Handlers.Route, String}, Base.Dict{String, Base.Val{x} where x}})
precompile(Tuple{typeof(Base.getproperty), HTTP.Handlers.Router{Symbol("##428")}, Symbol})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#110#118"))})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#110#118"))}, HTTP.Handlers.Route})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(Main, Symbol("#111#119"))})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{HTTP.Handlers.Route, Any}, HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#111#119"))}, HTTP.Handlers.Route})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##428")}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.Router{Symbol("##428")}, HTTP.Messages.Request})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##428")}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##428")}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, getfield(HTTP.Handlers, Symbol("#6#7")){HTTP.Handlers.Router{Symbol("##428")}}}, Int64})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##428")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##428")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}, Base.Val{:sarv}})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##428")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}, Base.Val{:sarv}, Base.Val{:ghotra}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#110#118"))}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Handlers.gethandler), HTTP.Handlers.Router{Symbol("##428")}, Base.Val{Symbol("")}, Base.Val{()}, Base.Val{Symbol("")}, Base.Val{:test}, Base.Val{:sar}, Base.Val{:ghotra}, Base.Val{:seven}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Main, Symbol("#111#119"))}, HTTP.Messages.Request})
precompile(Tuple{Type{Sockets.InetAddr{T} where T<:Sockets.IPAddr}, Sockets.IPv4, Int64})
precompile(Tuple{typeof(Sockets.listen), Sockets.InetAddr{Sockets.IPv4}})
precompile(Tuple{typeof(Base.sleep), Float64})
precompile(Tuple{getfield(test_server, Symbol("#4#16")){getfield(test_server, Symbol("#3#15"))}})
precompile(Tuple{Type{NamedTuple{(:server,), T} where T<:Tuple}, Tuple{Sockets.TCPServer}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#kw##listen")), NamedTuple{(:server,), Tuple{Sockets.TCPServer}}, typeof(HTTP.Servers.listen), Function, String, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(test_server, Symbol("#3#15")), String, Int64})
precompile(Tuple{typeof(HTTP.Servers.listenloop), Function, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, getfield(HTTP.Servers, Symbol("#2#5")){Nothing, getfield(HTTP.Servers, Symbol("#4#7"))}, Base.RefValue{Int64}, Int64, Int64, Bool})
precompile(Tuple{Type{Random.Sampler{E} where E}, Type{Random.MersenneTwister}, Base.StepRange{Char, Int64}, Base.Val{inf}})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Char, 1}, Random.SamplerSimple{Base.StepRange{Char, Int64}, Random.SamplerRangeFast{UInt64, Int64}, Char}})
precompile(Tuple{typeof(Base.rand), Base.StepRange{Char, Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt8, 1}, Base.IndexLinear, Array{Char, 1}})
precompile(Tuple{typeof(test_server.testget), String, Int64})
precompile(Tuple{typeof(test_server.testget), String})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Any, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Any, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(test_server, Symbol("#1#2")){String, Array{Any, 1}, Int64, Array{UInt8, 1}}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(test_server, Symbol("#3#15")), HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(test_server, Symbol("#3#15")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(test_server, Symbol("#3#15")), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(test_server, Symbol("#3#15")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base._uv_hook_close), Sockets.TCPServer})
precompile(Tuple{typeof(Base.rethrow), Base.IOError})
precompile(Tuple{Type{HTTP.Handlers.RequestHandlerFunction{F} where F}, getfield(test_server, Symbol("#6#18"))})
precompile(Tuple{getfield(test_server, Symbol("#5#17")){getfield(test_server, Symbol("#3#15"))}})
precompile(Tuple{getfield(test_server, Symbol("#7#19")){HTTP.Handlers.RequestHandlerFunction{getfield(test_server, Symbol("#6#18"))}, Sockets.TCPServer}})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#kw##serve")), NamedTuple{(:server,), Tuple{Sockets.TCPServer}}, typeof(HTTP.Handlers.serve), HTTP.Handlers.RequestHandlerFunction{getfield(test_server, Symbol("#6#18"))}, String, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(test_server, Symbol("#6#18"))}}, String, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.isioerror), Base.IOError})
precompile(Tuple{typeof(Base.rethrow), HTTP.IOExtras.IOError})
precompile(Tuple{getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, Tuple{Int64, Float64}, HTTP.IOExtras.IOError})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(test_server, Symbol("#6#18"))}}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(test_server, Symbol("#6#18"))}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(test_server, Symbol("#6#18"))}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(test_server, Symbol("#6#18"))}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.string), String, Int64, String})
precompile(Tuple{typeof(Base.foreach), getfield(test_server, Symbol("#8#20")), Array{Any, 1}})
precompile(Tuple{getfield(test_server, Symbol("#8#20")), HTTP.Messages.Response})
precompile(Tuple{Type{NamedTuple{(:readtimeout,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:readtimeout,), Tuple{Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##get")), NamedTuple{(:readtimeout,), Tuple{Int64}}, typeof(HTTP.get), String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:readtimeout,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:readtimeout,), Tuple{Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:readtimeout, :parent), Tuple{Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:readtimeout,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:readtimeout,), Tuple{Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:readtimeout,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:readtimeout,), Tuple{Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:readtimeout,), Tuple{Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :readtimeout), Tuple{Bool, Nothing, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :readtimeout), Tuple{Int64, Nothing, Int64}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.TimeoutRequest, Symbol("##request#1")), Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :readtimeout), Tuple{Nothing, Int64}}, typeof(HTTP.request), Type{HTTP.TimeoutRequest.TimeoutLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.TimeoutRequest, Symbol("#2#3")){Int64, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Base.RefValue{Bool}}})
precompile(Tuple{typeof(Sockets.connect!), Sockets.TCPSocket, Sockets.IPv4, Int64})
precompile(Tuple{typeof(Sockets.connect), Sockets.IPv4, Int64})
precompile(Tuple{typeof(Base.repr), Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.write), Sockets.TCPSocket, String})
precompile(Tuple{typeof(Base.read), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.readavailable), Sockets.TCPSocket})
precompile(Tuple{getfield(test_server, Symbol("#10#22")){getfield(test_server, Symbol("#9#21"))}})
precompile(Tuple{Type{NamedTuple{(:server, :verbose), T} where T<:Tuple}, Tuple{Sockets.TCPServer, Bool}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#kw##listen")), NamedTuple{(:server, :verbose), Tuple{Sockets.TCPServer, Bool}}, typeof(HTTP.Servers.listen), Function, String, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(test_server, Symbol("#9#21")), String, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(test_server, Symbol("#9#21")), HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(test_server, Symbol("#9#21")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{getfield(test_server, Symbol("#9#21")), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(test_server, Symbol("#9#21")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{getfield(test_server, Symbol("#11#23")){getfield(test_server, Symbol("#9#21"))}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Nothing, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(test_server, Symbol("#9#21")), String, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##bind")), NamedTuple{(:reuseaddr,), Tuple{Bool}}, typeof(Base.bind), Sockets.TCPServer, Sockets.IPv4, UInt16})
precompile(Tuple{getfield(test_server, Symbol("#12#24")){getfield(test_server, Symbol("#9#21"))}})
precompile(Tuple{typeof(HTTP.Servers.listen), Function, String, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.IOError, Symbol})
precompile(Tuple{getfield(test_server, Symbol("#13#25"))})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Nothing, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(test_server, Symbol("#14#26")), String, Int64})
precompile(Tuple{typeof(HTTP.get), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##get#12")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.get), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{String, String}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, String}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.request), String, String, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.endswith), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.RedirectRequest.isdomainorsubdomain), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, HTTP.Messages.Response, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, HTTP.Messages.Response, Tuple{Symbol}, NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(test_server, Symbol("#14#26")), HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, Int64}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(test_server, Symbol("#14#26")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{getfield(test_server, Symbol("#14#26")), HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(test_server, Symbol("#14#26")), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPServer})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, Nothing}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String, Expr, Vararg{Expr, N} where N})
precompile(Tuple{typeof(Base.getindex), Type{Base.Pair{Symbol, Any}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.getindex), Type{Base.Pair{Symbol, Any}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Int64}})
precompile(Tuple{typeof(Base.vect), Array{Base.Pair{Symbol, Any}, 1}, Vararg{Array{Base.Pair{Symbol, Any}, 1}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Array{Base.Pair{Symbol, Any}, 1}, 1}})
precompile(Tuple{typeof(Base.string), String, Array{Base.Pair{Symbol, Any}, 1}, String, String})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{Symbol, Any}, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Base.Pair{Symbol, Any}, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Pair{Symbol, Any}, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Pair{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{String, Int64}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, Int64}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:response,), Tuple{HTTP.Messages.Response}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.NullLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, HTTP.Messages.Response, Tuple{Symbol}, NamedTuple{(:response,), Tuple{HTTP.Messages.Response}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(DelimitedFiles, Symbol("##writedlm#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DelimitedFiles.writedlm), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.Messages.Response, Char})
precompile(Tuple{typeof(DelimitedFiles.writedlm), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, HTTP.Messages.Response, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/csv")}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, HTTP.Messages.Response})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, HTTP.Messages.Response, Tuple{Symbol}, NamedTuple{(:response,), Tuple{HTTP.Messages.Response}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(test_async, Symbol("#1#7")){getfield(test_async, Symbol("#dump_async_exception#6")), String, Array{Base.Pair{Symbol, Any}, 1}, Array{Any, 1}, Int64}})
precompile(Tuple{Type{NamedTuple{(:verbose, :status_exception), T} where T<:Tuple}, Tuple{Int64, Bool}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{String, Int64}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, Int64}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Int64, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Int64, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:verbose, :status_exception, :parent), Tuple{Int64, Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose, :status_exception), Tuple{Bool, Nothing, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose, :status_exception), Tuple{Int64, Nothing, Int64, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose, :status_exception), Tuple{Int64, Nothing, Int64, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose, :status_exception), Tuple{Bool, Nothing, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{Nothing, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Array{Base.Pair{Symbol, Any}, 1}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:verbose, :status_exception, :reuse_limit), T} where T<:Tuple}, Tuple{Int64, Bool, Int64}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:reuse_limit,), Tuple{Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{String, Int64}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, Int64}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Int64, Bool, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:verbose, :status_exception, :reuse_limit, :parent), Tuple{Int64, Bool, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{Nothing, Int64, Bool, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{Nothing, Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(test_async, Symbol("#2#8")){getfield(test_async, Symbol("#dump_async_exception#6")), String, Array{Base.Pair{Symbol, Any}, 1}, Array{Any, 1}, Int64}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Int64, Int64}, Int64, Int64})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(test_async, Symbol("#4#10"))}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, getfield(test_async, Symbol("#4#10")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(test_async, Symbol("#4#10"))}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, getfield(test_async, Symbol("#4#10")), Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(test_async, Symbol("#4#10"))}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(test_async, Symbol("#3#9")){getfield(test_async, Symbol("#dump_async_exception#6")), String, Array{Base.Pair{Symbol, Any}, 1}, Array{Any, 1}, Int64}})
precompile(Tuple{getfield(HTTP, Symbol("##open#6")), Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, typeof(HTTP.open), Function, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##open")), NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}, typeof(HTTP.open), Function, String, String})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(test_async, Symbol("#4#10"))}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(test_async, Symbol("#4#10"))}}}, Type{NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(test_async, Symbol("#4#10"))}}, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(test_async, Symbol("#4#10")), Int64, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :verbose, :status_exception, :parent), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Function, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose, :status_exception), Tuple{Bool, getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose, :status_exception), Tuple{Int64, getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(test_async, Symbol("#4#10")), Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.length), Array{Base.SubString{String}, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :verbose, :status_exception), Tuple{Int64, getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :verbose, :status_exception), Tuple{Bool, getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(test_async, Symbol("#4#10")), Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("##open#6")), Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, typeof(HTTP.open), Function, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##open")), NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}, typeof(HTTP.open), Function, String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(test_async, Symbol("#4#10"))}}}, Type{NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(test_async, Symbol("#4#10"))}}, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(test_async, Symbol("#4#10")), Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit, :parent), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Function, Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :verbose, :status_exception, :reuse_limit), Tuple{getfield(test_async, Symbol("#4#10")), Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}, Array{Base.Pair{Symbol, Any}, 1}})
precompile(Tuple{getfield(test_async, Symbol("#5#11")){getfield(test_async, Symbol("#dump_async_exception#6")), String, Array{Base.Pair{Symbol, Any}, 1}, Array{Any, 1}, Int64}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, Type{NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}, NamedTuple{(:verbose, :status_exception), Tuple{Int64, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, Int64, Bool}}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Base.BufferStream, Int64, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Base.BufferStream, Int64, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, Int64, Bool, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose, :status_exception, :parent), Tuple{Base.BufferStream, Int64, Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose, :status_exception), Tuple{Base.BufferStream, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :response_stream, :verbose, :status_exception), Tuple{Bool, Nothing, Base.BufferStream, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :response_stream, :verbose, :status_exception), Tuple{Int64, Nothing, Base.BufferStream, Int64, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Base.BufferStream, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :response_stream, :verbose, :status_exception), Tuple{Int64, Nothing, Base.BufferStream, Int64, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :response_stream, :verbose, :status_exception), Tuple{Bool, Nothing, Base.BufferStream, Int64, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Base.BufferStream, Nothing, Int64, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:status_exception,), Tuple{Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception), Tuple{Nothing, Base.BufferStream, Int64, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}}, Type{NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:response_stream,), Tuple{Base.BufferStream}}, NamedTuple{(:verbose, :status_exception, :reuse_limit), Tuple{Int64, Bool, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, Int64, Bool, Int64}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:response_stream, :reuse_limit), Tuple{Base.BufferStream, Int64}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Base.BufferStream, Int64, Bool, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.BufferStream, Int64, Bool, Int64, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit, :parent), Tuple{Base.BufferStream, Int64, Bool, Int64, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Base.BufferStream, Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Nothing, Base.BufferStream, Int64, Bool, Int64}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :response_stream, :verbose, :status_exception, :reuse_limit), Tuple{Nothing, Base.BufferStream, Int64, Bool, Int64}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Printf.decode_dec), Float64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.to_index), Float64})
precompile(Tuple{typeof(Base.to_index), Array{String, 1}, Float64})
precompile(Tuple{typeof(Base.format_bytes), Int64})
precompile(Tuple{typeof(Base.time_print), UInt64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Printf.fix_dec), Base.PipeEndpoint, Float64, String, Int64, Int64, Char, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Union{Nothing, String}}})
precompile(Tuple{typeof(HTTP.MessageRequest.setuseragent!), Nothing})
precompile(Tuple{typeof(Base.vect), Tuple{String, String, String}, Vararg{Tuple{String, String, String}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{Type{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Dates.DateTime, String, String, String, String, Bool, Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(MbedTLS.digest!), MbedTLS.MDKind, Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(MbedTLS.digest), MbedTLS.MDKind, Array{UInt8, 1}})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{:yyyymmdd, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.DatePart{Char(0x6d000000)}, Dates.DatePart{Char(0x64000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{:yyyymmdd, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.DatePart{Char(0x6d000000)}, Dates.DatePart{Char(0x64000000)}}}, Int64})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("yyyymmddTHHMMSS\Z"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.DatePart{Char(0x6d000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("yyyymmddTHHMMSS\Z"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.DatePart{Char(0x6d000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.DatePart{Char(0x4d000000)}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}}}, Int64})
precompile(Tuple{typeof(MbedTLS.digest!), MbedTLS.MDKind, String, Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(MbedTLS.digest), MbedTLS.MDKind, String, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.Pairs.rmkv), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, Nothing})
precompile(Tuple{typeof(HTTP.Pairs.setbyfirst), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, Base.SubString{String}}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Base.SubString{String}}, 1}, Base.Pair{String, Base.SubString{String}}, Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, getfield(HTTP.AWS4AuthRequest, Symbol("#3#5"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, getfield(HTTP.AWS4AuthRequest, Symbol("#3#5"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, Base.SubString{String}}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{typeof(Base.first)}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, Base.SubString{String}}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{typeof(Base.first)}, Array{Base.Pair{String, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(HTTP.AWS4AuthRequest, Symbol("#4#6")){Base.Dict{String, Array{String, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(HTTP.AWS4AuthRequest, Symbol("#4#6")){Base.Dict{String, Array{String, 1}}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(MbedTLS.digest!), MbedTLS.MDKind, String, String, Array{UInt8, 1}})
precompile(Tuple{typeof(MbedTLS.digest), MbedTLS.MDKind, String, String})
precompile(Tuple{typeof(Base._any), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}, Base.Colon})
precompile(Tuple{typeof(HTTP.AWS4AuthRequest._normalize_ws), Base.SubString{String}})
precompile(Tuple{getfield(HTTP.AWS4AuthRequest, Symbol("##sign_aws4!#2")), Array{UInt8, 1}, Array{UInt8, 1}, Nothing, Dates.DateTime, String, String, String, String, String, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.AWS4AuthRequest.sign_aws4!), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.AWS4AuthRequest, Symbol("#kw##sign_aws4!")), NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.AWS4AuthRequest.sign_aws4!), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Main.test_sign!), String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Any, Any}, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.collect), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(Base.first)}, Base.Pair{Any, Any}, Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{Any, Any}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{typeof(Base.first)}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{Any, Any}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{typeof(Base.first)}, Array{Base.Pair{Any, Any}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:by,), Tuple{typeof(Base.first)}}, typeof(Base.sort!), Array{Base.Pair{Any, Any}, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, Base.SubString{String}}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.ispathsafe)}}})
precompile(Tuple{typeof(HTTP.URIs.ispathsafe), Char})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.ispathsafe)}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, Base.SubString{String}}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.ispathsafe)}}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, Base.SubString{String}}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.ispathsafe)}}})
precompile(Tuple{typeof(Base.sort!), Array{Base.SubString{String}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Base.SubString{String}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Base.SubString{String}, Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Main.header_keys), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.SubString{String}, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Base.Pair{String, String}, 1}, getfield(Main, Symbol("#121#122"))}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{String, String}, 1}, Base.Generator{Array{Base.Pair{String, String}, 1}, getfield(Main, Symbol("#121#122"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Main.test_auth_string), String, String, String, String, String})
precompile(Tuple{typeof(Main.test_auth_string), String, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{String, String}, Char})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String, String}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, String}, 1}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.collect), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, String}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{typeof(Base.first)}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, String}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{typeof(Base.first)}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:by,), Tuple{typeof(Base.first)}}, typeof(Base.sort!), Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(HTTP.URIs.escapeuri), Array{Base.Pair{String, String}, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Array{Base.Pair{String, String}, 1}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Array{Base.Pair{String, String}, 1}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.ispathsafe)}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.ispathsafe)}}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.ispathsafe)}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.IndexLinear, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{Type{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.vect), Tuple{String, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String}, Vararg{Tuple{String, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.first), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Generator{Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.SubString{String}, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.sort), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Main.test_sign!), String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Base.SubString{String}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{AbstractString}, Tuple{Array{String, 1}, Array{Base.SubString{String}, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractString, 1}, Int64, Array{AbstractString, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{AbstractString, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{AbstractString, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.sort), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, String, String})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Base.SubString{String}, String})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.SubString{String}, 1}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(HTTP.AWS4AuthRequest._normalize_ws), Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, typeof(HTTP.AWS4AuthRequest._normalize_ws)}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Base.SubString{String}, 1}, typeof(HTTP.AWS4AuthRequest._normalize_ws)}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(HTTP.AWS4AuthRequest._normalize_ws)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Base.SubString{String}, 1}, typeof(HTTP.AWS4AuthRequest._normalize_ws)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(HTTP.AWS4AuthRequest._normalize_ws)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(HTTP.AWS4AuthRequest._normalize_ws)}})
precompile(Tuple{Type{NamedTuple{(:aws_session_token,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Dates.DateTime, String, String, String, String, Bool, Bool}}}, Type{NamedTuple{(:aws_session_token,), Tuple{String}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Main, Symbol("##test_sign!#120")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:aws_session_token,), Tuple{String}}}, typeof(Main.test_sign!), String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String})
precompile(Tuple{getfield(Main, Symbol("#kw##test_sign!")), NamedTuple{(:aws_session_token,), Tuple{String}}, typeof(Main.test_sign!), String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{Type{NamedTuple{(:aws_session_token, :token_in_signature), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Dates.DateTime, String, String, String, String, Bool, Bool}}}, Type{NamedTuple{(:aws_session_token, :token_in_signature), Tuple{String, Bool}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Main, Symbol("##test_sign!#120")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:aws_session_token, :token_in_signature), Tuple{String, Bool}}}, typeof(Main.test_sign!), String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String, String})
precompile(Tuple{getfield(Main, Symbol("#kw##test_sign!")), NamedTuple{(:aws_session_token, :token_in_signature), Tuple{String, Bool}}, typeof(Main.test_sign!), String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{Type{Dates.DateTime}, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), T} where T<:Tuple}, Tuple{Dates.DateTime, String, String, String, String, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), Tuple{Dates.DateTime, String, String, String, String, Bool}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), Tuple{Dates.DateTime, String, String, String, String, Bool}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP.AWS4AuthRequest, Symbol("#kw##sign_aws4!")), NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), Tuple{Dates.DateTime, String, String, String, String, Bool}}, typeof(HTTP.AWS4AuthRequest.sign_aws4!), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), Tuple{Dates.DateTime, String, String, String, String, Bool}}, Symbol})
precompile(Tuple{typeof(Base.hex2bytes), String})
precompile(Tuple{Type{NamedTuple{(:body_sha256,), T} where T<:Tuple}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:body_sha256,), Tuple{Array{UInt8, 1}}}}, Type{NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), Tuple{Dates.DateTime, String, String, String, String, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:body_sha256,), Tuple{Array{UInt8, 1}}}, NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), Tuple{Dates.DateTime, String, String, String, String, Bool}}})
precompile(Tuple{getfield(HTTP.AWS4AuthRequest, Symbol("#kw##sign_aws4!")), NamedTuple{(:body_sha256, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5), Tuple{Array{UInt8, 1}, Dates.DateTime, String, String, String, String, Bool}}, typeof(HTTP.AWS4AuthRequest.sign_aws4!), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Dates.DateTime}, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), T} where T<:Tuple}, Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Dates.DateTime, String, String, String, String, Bool, Bool}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.request), String, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256, :parent), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.AWS4AuthRequest.AWS4AuthLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.AWS4AuthRequest.AWS4AuthLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}}}})
precompile(Tuple{Type{Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}}, Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.read), IniFile.Inifile, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(IniFile, Symbol("#1#2")){IniFile.Inifile}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Union{Nothing, AbstractString, Number}}, String})
precompile(Tuple{typeof(Base.get), IniFile.Inifile, String, String, Symbol})
precompile(Tuple{typeof(HTTP.AWS4AuthRequest.dot_aws_credentials)})
precompile(Tuple{typeof(HTTP.AWS4AuthRequest.sign_aws4!), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.AWS4AuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), Type{HTTP.AWS4AuthRequest.AWS4AuthLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.AWS4AuthRequest.AWS4AuthLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.BasicAuthRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.AWS4AuthRequest.AWS4AuthLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.AWS4AuthRequest.AWS4AuthLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}})
precompile(Tuple{getfield(HTTP.AWS4AuthRequest, Symbol("##sign_aws4!#2")), Array{UInt8, 1}, Array{UInt8, 1}, Nothing, Dates.DateTime, String, String, String, String, String, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization), Tuple{Nothing, Bool}}}, typeof(HTTP.AWS4AuthRequest.sign_aws4!), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.AWS4AuthRequest, Symbol("#kw##sign_aws4!")), NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.AWS4AuthRequest.sign_aws4!), String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#22")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Int64, Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#30")), Bool, MbedTLS.SSLConfig, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.ConnectionPool.sslconnection), Sockets.TCPSocket, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#26")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction, :aws_authorization, :timestamp, :aws_service, :aws_region, :aws_access_key_id, :aws_secret_access_key, :include_md5, :include_sha256), Tuple{Nothing, Bool, Dates.DateTime, String, String, String, String, Bool, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.MessageRequest.setuseragent!), String})
precompile(Tuple{typeof(HTTP.Layers.insert), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, Type{HTTP.RedirectRequest.RedirectLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}, Type{TestRequest.TestLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}})
precompile(Tuple{typeof(HTTP.Layers.insert), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, Type{HTTP.ExceptionRequest.ExceptionLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}, Type{TestRequest.TestLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}})
precompile(Tuple{typeof(HTTP.Layers.insert), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, Core.TypeofBottom, Type{TestRequest.TestLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}})
precompile(Tuple{typeof(HTTP.Layers.next), Type{HTTP.StreamRequest.StreamLayer{Union{}}}})
precompile(Tuple{typeof(HTTP.Layers.insert), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, Type{HTTP.AWS4AuthRequest.AWS4AuthLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}, Type{TestRequest.TestLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}})
precompile(Tuple{typeof(Base.print_to_string), Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeName})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeofBottom})
precompile(Tuple{Type{Test.Threw}, HTTP.Layers.LayerNotFoundException, Nothing, LineNumberNode})
precompile(Tuple{typeof(HTTP.Layers.insert), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, Type{HTTP.RetryRequest.RetryLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}, Type{HTTP.ExceptionRequest.ExceptionLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}})
precompile(Tuple{typeof(HTTP.Layers.insert), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}}, Type{HTTP.ExceptionRequest.ExceptionLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}, Type{TestRequest.TestLayer{Next} where Next<:(HTTP.Layers.Layer{Next} where Next)}})
precompile(Tuple{typeof(HTTP.Layers.next), Type{HTTP.MessageRequest.MessageLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}})
precompile(Tuple{typeof(HTTP.Layers.top_layer), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(MbedTLS, Symbol("#27#28")), MbedTLS.CRT})
precompile(Tuple{getfield(MbedTLS, Symbol("#22#23")), MbedTLS.CtrDrbg})
precompile(Tuple{getfield(MbedTLS, Symbol("#20#21")), MbedTLS.Entropy})
precompile(Tuple{getfield(MbedTLS, Symbol("#29#31")), MbedTLS.SSLConfig})
