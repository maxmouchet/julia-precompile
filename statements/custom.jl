precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.TTY, Base.TTY})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(IJulia.push_preexecute_hook), Function})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Symbol, String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.get), Base.EnvDict, String, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, Int64, String})
precompile(Tuple{Type{FileWatching._FDWatcher}, Base.Libc.RawFD, Bool, Bool})
precompile(Tuple{Type{ZMQ.Socket}, ZMQ.Context, Int64})
precompile(Tuple{Type{ZMQ.Socket}, Int64})
precompile(Tuple{typeof(Base.bind), ZMQ.Socket, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, ZMQ.Socket})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, Base.ReentrantLock, ZMQ.Socket})
precompile(Tuple{typeof(IJulia.heartbeat_thread), Ptr{Nothing}})
precompile(Tuple{typeof(Base._redirect_stderr), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.CoreLogging.global_logger), Base.CoreLogging.SimpleLogger})
precompile(Tuple{typeof(IJulia.send_status), String, IJulia.Msg})
precompile(Tuple{typeof(IJulia.send_status), String})
precompile(Tuple{typeof(IJulia.init), Array{String, 1}})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), Base.SubString{String}})
precompile(Tuple{typeof(Base.Unicode.uppercase), Base.SubString{String}})
precompile(Tuple{Type{MbedTLS.MD{IsHMAC} where IsHMAC}, MbedTLS.MDKind, String})
precompile(Tuple{Type{IJulia.IJuliaStdio{IO_t} where IO_t<:IO}, Base.PipeEndpoint, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.PipeEndpoint, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.redirect_stdout), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stderr), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stdin), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.CoreLogging.SimpleLogger}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.UUID})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.UUID, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Any}, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Dates.DateTime})
precompile(Tuple{Type{IJulia.InlineDisplay}})
precompile(Tuple{typeof(Base.Multimedia.pushdisplay), IJulia.InlineDisplay})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{IO}})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{getfield(Base, Symbol("##Timer#507")), Float64, Type{Base.Timer}, typeof(IJulia.send_stdout), Float64})
precompile(Tuple{getfield(Base, Symbol("##Timer#507")), Float64, Type{Base.Timer}, typeof(IJulia.send_stderr), Float64})
precompile(Tuple{typeof(IJulia.watch_stdio)})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(IJulia.waitloop)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{getfield(Base, Symbol("#wait_locked#519")), Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, String}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(IJulia.send_stream), String})
precompile(Tuple{typeof(IJulia.watch_stream), Base.PipeEndpoint, String})
precompile(Tuple{getfield(IJulia, Symbol("#22#24"))})
precompile(Tuple{typeof(IJulia.send_stdio), String})
precompile(Tuple{getfield(Base, Symbol("#508#509")){typeof(IJulia.send_stdout), Base.Timer}})
precompile(Tuple{getfield(IJulia, Symbol("#23#25"))})
precompile(Tuple{getfield(Base, Symbol("#508#509")){typeof(IJulia.send_stderr), Base.Timer}})
precompile(Tuple{typeof(IJulia.flush_all)})
precompile(Tuple{typeof(IJulia.eventloop), ZMQ.Socket})
precompile(Tuple{getfield(IJulia, Symbol("#14#17"))})
precompile(Tuple{getfield(IJulia, Symbol("#15#18"))})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(IJulia.kernel_info_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.print_to_string), UInt32, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, String}, 1}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.flush), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(IJulia.CommManager.comm_info_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{getfield(IJulia.CommManager, Symbol("#2#3")){Symbol}, Base.Pair{String, IJulia.CommManager.Comm{target} where target}})
precompile(Tuple{typeof(Base.filter), getfield(IJulia.CommManager, Symbol("#2#3")){Symbol}, Base.Dict{String, IJulia.CommManager.Comm{target} where target}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{Symbol, Base.Dict{String, Base.Dict{Symbol, Symbol}}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{Symbol, Base.Dict{String, Base.Dict{Symbol, Symbol}}}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Base.Dict{Symbol, Symbol}}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Symbol, Base.Dict{String, Base.Dict{Symbol, Symbol}}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Base.Dict{String, Base.Dict{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Int64}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(Base._replace), Base.GenericIOBuffer{Array{UInt8, 1}}, getfield(IJulia, Symbol("#37#38")), String, Base.UnitRange{Int64}, Base.RegexAndMatchData})
precompile(Tuple{typeof(Base._replace), Base.GenericIOBuffer{Array{UInt8, 1}}, getfield(IJulia, Symbol("#37#38")), String, Int64, Base.RegexAndMatchData})
precompile(Tuple{getfield(Base, Symbol("##replace#337")), Int64, typeof(Base.replace), String, Base.Pair{Base.Regex, getfield(IJulia, Symbol("#37#38"))}})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Base.Regex, getfield(IJulia, Symbol("#37#38"))}})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Base.Regex, String}})
precompile(Tuple{typeof(Base.string), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.count), Base.Fix2{typeof(Base.:(==)), Char}, Base.SubString{String}})
precompile(Tuple{typeof(SoftGlobalScope.softscope_include_string), Module, String, String})
precompile(Tuple{getfield(Base.Meta, Symbol("#kw##parse")), NamedTuple{(:greedy, :raise), Tuple{Bool, Bool}}, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Expr, LineNumberNode}, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Expr, LineNumberNode}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(SoftGlobalScope.add_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope.shift_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(SoftGlobalScope.shift_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Symbol, Int64, Symbol})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope.softscope), Module, Expr})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope._softscope), LineNumberNode, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Type{LineNumberNode}})
precompile(Tuple{typeof(Base.setindex!), Array{LineNumberNode, 1}, LineNumberNode, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Symbol, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Int64, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Any, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Int64}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Int64})
precompile(Tuple{typeof(Base.Multimedia.display)})
precompile(Tuple{typeof(IJulia.metadata), Int64})
precompile(Tuple{typeof(IJulia.display_mimestring), Array{Base.Multimedia.MIME{mime} where mime, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){Int64}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{typeof(IJulia.display_mimejson), Array{Base.Multimedia.MIME{mime} where mime, 1}, Int64})
precompile(Tuple{typeof(IJulia.display_dict), Int64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Int64})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Int64})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Int64})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Int64}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Int64})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{K, V} where V where K, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(REPL._helpmode), IJulia.IJuliaStdio{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(REPL.helpmode), IJulia.IJuliaStdio{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(REPL.repl), IJulia.IJuliaStdio{Base.PipeEndpoint}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#@doc")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, Char, Char})
precompile(Tuple{typeof(REPL.repl_latex), IJulia.IJuliaStdio{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, Char})
precompile(Tuple{typeof(REPL.repl_search), IJulia.IJuliaStdio{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Vararg{Array{T, 1} where T, N} where N})
precompile(Tuple{Type{NamedTuple{(:cols,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(REPL.printmatch), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, String})
precompile(Tuple{getfield(REPL, Symbol("##printmatches#16")), Int64, typeof(REPL.printmatches), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, Array{String, 1}})
precompile(Tuple{getfield(REPL, Symbol("#kw##printmatches")), NamedTuple{(:cols,), Tuple{Int64}}, typeof(REPL.printmatches), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, IJulia.IJuliaStdio{Base.PipeEndpoint}, Char})
precompile(Tuple{typeof(Base.Docs.catdoc), Markdown.MD, Vararg{Markdown.MD, N} where N})
precompile(Tuple{Type{Markdown.MD}, Markdown.MD, Vararg{Markdown.MD, N} where N})
precompile(Tuple{typeof(Base.vcat), Markdown.MD, Markdown.MD})
precompile(Tuple{typeof(REPL.insert_hlines), IJulia.IJuliaStdio{Base.PipeEndpoint}, Markdown.MD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Markdown.MD, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Markdown.MD}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Markdown.MD})
precompile(Tuple{typeof(IJulia.metadata), Markdown.MD})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(REPL.REPLCompletions.completion_text), Tuple{Base.Broadcast.Extruded{Array{REPL.REPLCompletions.Completion, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(IJulia.complete_types), Array{String, 1}})
precompile(Tuple{typeof(IJulia.complete_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(IJulia.utf16_to_ind), String, Int64})
precompile(Tuple{typeof(IJulia.chr2ind), IJulia.Msg, String, Int64})
precompile(Tuple{typeof(Base.all), Function, String})
precompile(Tuple{typeof(Base._all), typeof(Base.Unicode.isspace), String, Base.Colon})
precompile(Tuple{typeof(IJulia.find_parsestart), String, Int64})
precompile(Tuple{typeof(REPL.REPLCompletions.filtered_mod_names), Function, Module, String})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{REPL.REPLCompletions.Completion, Nothing}, REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{REPL.REPLCompletions.Completion, Nothing}, Nothing, REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.push!), Base.Set{REPL.REPLCompletions.Completion}, REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{REPL.REPLCompletions.Completion, Nothing}, REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.in), REPL.REPLCompletions.KeywordCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{REPL.REPLCompletions.Completion, Nothing}, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.in), REPL.REPLCompletions.ModuleCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{REPL.REPLCompletions.Completion, Nothing}, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{REPL.REPLCompletions.Completion, Nothing}, Nothing, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.push!), Base.Set{REPL.REPLCompletions.Completion}, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text)}, REPL.REPLCompletions.KeywordCompletion, REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text)}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text)}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.KeywordCompletion})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{typeof(IJulia.ind_to_utf16), String, Int64})
precompile(Tuple{typeof(IJulia.ind2chr), IJulia.Msg, String, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Int64}, Base.Pair{String, Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Int64}, Base.Pair{String, Int64}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Int64}, Base.Pair{String, Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Int64}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Int64}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{String, 1}})
precompile(Tuple{typeof(Base.prevind), String, Int64})
precompile(Tuple{typeof(Base.incomplete_tag), Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Nothing}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Nothing})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, Plots.Attr, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(Base.copyto!), Array{RecipesBase.RecipeData, 1}, Int64, Array{RecipesBase.RecipeData, 1}, Int64, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#146#147")), Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Any}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Bool, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Nothing, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, String, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.GRBackend}, Symbol, Nothing})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#187")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Float64, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#11")), Bool, typeof(Base.identity), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGB{Float64}, 1}, Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}}, Int64})
precompile(Tuple{typeof(PlotUtils.gradient_from_list), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("##generate_colorgradient#1")), Array{ColorTypes.RGBA{Float64}, 1}, Float64, Int64, Int64, typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.atan), Float64})
precompile(Tuple{typeof(Base.atan), Float64, Float64})
precompile(Tuple{typeof(Base.__cat), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}, Tuple{Bool}, ColorTypes.RGBA{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.LCHab{T} where T<:AbstractFloat}, ColorTypes.LCHab{Float64}})
precompile(Tuple{typeof(Base.Math.sind), Float64})
precompile(Tuple{typeof(Base.Math.cosd), Float64})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, ColorTypes.Lab{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.IndexLinear, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Float64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.eltype), Nothing})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Plots.Plot{Plots.GRBackend}}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.metadata), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{typeof(IJulia.display_mimejson), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_dict), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{getfield(Plots, Symbol("#107#108")){Symbol}, Float64})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Float64})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{getfield(PlotUtils, Symbol("#kw##optimize_ticks")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#39#41"))}})
precompile(Tuple{typeof(Base.reduce_first), Function, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("#40#43")){Float64}, Float64})
precompile(Tuple{typeof(Base.filter), getfield(PlotUtils, Symbol("#40#43")){Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#107#108")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Showoff.concrete_minimum), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.concrete_maximum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64})
precompile(Tuple{typeof(Showoff.plain_precision_heuristic), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64})
precompile(Tuple{typeof(Showoff.format_fixed), Float64, Int64})
precompile(Tuple{getfield(Showoff, Symbol("#1#2")), Float64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}})
precompile(Tuple{typeof(Showoff.format_fixed_scientific), Float64, Int64, Bool})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#391")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Measures.Length{:mm, Float64}, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Measures.Length{:mm, Float64}, 1}, Int64, Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 2}, Int64, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{RecipesBase.AbstractLayout, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.leftpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.toppad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.rightpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.bottompad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##maximum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}, Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}}, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reduce_first), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Measures.Length{:mm, Float64}}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}, Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.fill!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.check_reducedims), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Plots.GRBackend})
precompile(Tuple{typeof(Base.sizeof), Plots.GRBackend})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Type{T} where T})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#391")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(GR.tick), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_set_linecolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64, Int64})
precompile(Tuple{typeof(Plots.gr_tick_label), Plots.Axis, String})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Char}, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, String}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Char, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Char, String}, Type{Any}, Type{String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, String}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, Char})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, String}, Base.Dict{Char, String}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, Char})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{Type{Plots.SegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/svg+xml")}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/svg+xml")}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/markdown")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("image/svg+xml")}}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#401")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(GR.setborderwidth), Int64})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#38#39")){String}, Base.CoreLogging.LogState})
precompile(Tuple{Type{Base.Dict{Base.PkgId, String}}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Revise, Symbol("#36#37")){Base.Dict{Base.PkgId, String}, String}, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, String}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, String}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, String}, String, Base.PkgId})
precompile(Tuple{typeof(Base._uv_hook_close), FileWatching.FileMonitor})
precompile(Tuple{typeof(IJulia.shutdown_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.which), Any, Any})
precompile(Tuple{getfield(Plots, Symbol("#331#364"))})
precompile(Tuple{typeof(Base.display_error), Array{Any, 1}})
precompile(Tuple{typeof(Base.show_exception_stack), Base.IOContext{Base.TTY}, Array{Any, 1}})
precompile(Tuple{typeof(Base.display_error), Base.TTY, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ErrorException, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ErrorException, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.show_reduced_backtrace), Base.IOContext{Base.TTY}, Array{Any, 1}, Bool})
precompile(Tuple{typeof(Base.show_backtrace), Base.IOContext{Base.TTY}, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("##showerror#656")), Bool, typeof(Base.showerror), Base.IOContext{Base.TTY}, ErrorException, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##showerror")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, ErrorException, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.TTY}})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.TTY}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String, String})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.TTY}, Array{String, 1}, String, String})
precompile(Tuple{typeof(Base.show_method_params), Base.IOContext{Base.TTY}, Array{Any, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Module})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Module})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String, Module})
precompile(Tuple{getfield(Base, Symbol("##show#393")), Nothing, typeof(Base.show), Base.IOContext{Base.TTY}, Method})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Core.MethodInstance})
precompile(Tuple{getfield(Base, Symbol("##show#379")), Symbol, typeof(Base.show), Base.IOContext{Base.TTY}, Core.CodeInfo})
precompile(Tuple{typeof(Base.StackTraces.show_spec_linfo), Base.IOContext{Base.TTY}, Base.StackTraces.StackFrame})
precompile(Tuple{getfield(Base.StackTraces, Symbol("##show#9")), Bool, typeof(Base.show), Base.IOContext{Base.TTY}, Base.StackTraces.StackFrame})
precompile(Tuple{getfield(Base, Symbol("##show_trace_entry#673")), String, typeof(Base.show_trace_entry), Base.IOContext{Base.TTY}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##show_trace_entry")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{Base.TTY}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.TTY}, String})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{Base.TTY}, Symbol, Type})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String, Type{T} where T})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Type})
precompile(Tuple{typeof(Base.show_sym), Base.IOContext{Base.TTY}, String})
precompile(Tuple{getfield(Base, Symbol("##show_sym#371")), Bool, typeof(Base.show_sym), Base.IOContext{Base.TTY}, String})
precompile(Tuple{getfield(Base, Symbol("##show_sym#371")), Bool, typeof(Base.show_sym), Base.IOContext{Base.TTY}, Symbol})
precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{Base.TTY}, Core.TypeName})
precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{Base.TTY}, DataType})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.TTY}, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Type})
