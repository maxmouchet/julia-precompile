precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Compat.Sys.__init__)})
precompile(Tuple{typeof(FilePathsBase.__init__)})
precompile(Tuple{typeof(CSV.__init__)})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{getfield(Base, Symbol("#681#682")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#681#682")){String}, String})
precompile(Tuple{typeof(Base.project_deps_get), String, String})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._include_dependency), Module, String})
precompile(Tuple{typeof(Base.include_relative), Module, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.print_to_string), Array{String, 1}})
precompile(Tuple{typeof(Base.arg_gen), Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.PipeEndpoint, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.PipeEndpoint}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.ImmutableDict{Symbol, Any}, Base.ImmutableDict{Symbol, Any}})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any})
precompile(Tuple{typeof(Base.convert), Type{Any}, Type{T} where T})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.catch_backtrace)})
precompile(Tuple{typeof(Distributed.flush_gc_msgs)})
precompile(Tuple{getfield(Distributed, Symbol("#135#136"))})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Base.PkgId}, Any, Any})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.pathof), Module})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Test, Symbol("#@test_throws")), LineNumberNode, Module, Any, Any})
precompile(Tuple{getfield(Base, Symbol("#@b_str")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base.in), Expr, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#@cmd")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Base, Symbol("##shell_parse#350")), String, typeof(Base.shell_parse), String, Bool})
precompile(Tuple{getfield(Base, Symbol("#kw##shell_parse")), NamedTuple{(:special,), Tuple{String}}, typeof(Base.shell_parse), String})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("#kw##parse")), NamedTuple{(:greedy,), Tuple{Bool}}, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Base.Meta, Symbol("#2#3")){Bool, String}, Base.CoreLogging.LogState})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Core.Compiler.zero), Type{Int128}})
precompile(Tuple{typeof(Core.Compiler.zero), Type{UInt8}})
precompile(Tuple{typeof(Mmap.mmap), String, Type{Array{UInt8, 1}}})
precompile(Tuple{getfield(Mmap, Symbol("##mmap#1")), Bool, Bool, typeof(Mmap.mmap), Mmap.Anonymous, Type{Array{UInt8, 1}}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(CSV.getsource), String, Bool})
precompile(Tuple{typeof(CSV.skiptorow), CSV.ReversedBuf, Int64, Int64, UInt8, UInt8, UInt8, Int64, Int64})
precompile(Tuple{typeof(CSV.skiptorow), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Int64, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Nothing, Bool})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Int64, Int64})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, UInt8, Nothing, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int8, Type}, Int8})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, UInt64}, 1}, Base.Dict{String, UInt64}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, UInt64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(CSV, Symbol("#21#29"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, UInt64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(CSV, Symbol("#21#29"))}, Array{Base.Pair{String, UInt64}, 1}})
precompile(Tuple{typeof(Base.rand), Type{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Base.Pair{String, UInt64}, 1}, getfield(CSV, Symbol("#20#28"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Union{Nothing, Array{String, 1}}, 1}, Nothing})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Base.Generator{Array{String, 1}, typeof(Parsers.ptrlen)}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Parsers.ptrlen)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Parsers, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Parsers, Symbol("#1#2"))}, Array{Tuple{Ptr{UInt8}, Int64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Parsers, Symbol("#1#2"))}}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Parsers, Symbol("#1#2"))}}, Array{Tuple{Ptr{UInt8}, Int64}, 1}})
precompile(Tuple{typeof(Parsers.prepare), Array{String, 1}})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{Type{Test.Threw}, ArgumentError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.println), Test.Fail})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Fail})
precompile(Tuple{typeof(Base.print), Test.Fail})
precompile(Tuple{typeof(Base.backtrace)})
precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol, Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#3#5")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#4#6")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Test.scrub_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Fail})
precompile(Tuple{typeof(Test.do_test_throws), Test.Threw, Any, Any})
precompile(Tuple{Type{NamedTuple{(:datarow, :header), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:datarow, :header), Tuple{Int64, Int64}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{typeof(Base.vect), Type{Int64}, Vararg{Type{Int64}, N} where N})
precompile(Tuple{Type{NamedTuple{(:types, :strict), T} where T<:Tuple}, Tuple{Array{DataType, 1}, Bool}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#17#25")), Array{DataType, 1}, Base.Colon})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Array{DataType, 1}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:types, :strict), Tuple{Array{DataType, 1}, Bool}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(CSV, Symbol("#17#25")), Type{T} where T})
precompile(Tuple{typeof(CSV.typecode), Type{Int64}})
precompile(Tuple{typeof(Base.:(==)), Int8, Int8})
precompile(Tuple{typeof(Mmap.grow!), Base.IOStream, Int64, Int64})
precompile(Tuple{getfield(Mmap, Symbol("##mmap#1")), Bool, Bool, typeof(Mmap.mmap), Base.IOStream, Type{Array{UInt8, 1}}, Tuple{Int64}, Int64})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Mmap, Symbol("#7#8")){Array{UInt8, 1}, Bool, Bool, Tuple{Int64}, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#8#11"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#8#11"))}})
precompile(Tuple{typeof(CSV.unescape), CSV.PointerString, UInt8})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64})
precompile(Tuple{typeof(Base.Unicode.utf8proc_error), Int64})
precompile(Tuple{typeof(Base.Unicode.utf8proc_map), String, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.map), getfield(CSV, Symbol("#4#5")), Base.SubString{String}})
precompile(Tuple{typeof(CSV.normalizename), String})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{String, 1}, getfield(CSV, Symbol("#9#12")){Bool}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(CSV, Symbol("#9#12")){Bool}}})
precompile(Tuple{typeof(CSV.makeunique), Array{Symbol, 1}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{Int8, 1}, Int8, Int64})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{typeof(Dates.character_codes), Core.SimpleVector})
precompile(Tuple{getfield(Parsers, Symbol("##s52#15")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Type, 1}, getfield(Parsers, Symbol("#19#20"))}})
precompile(Tuple{getfield(Parsers, Symbol("##s52#18")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Type, 1}, getfield(Parsers, Symbol("#19#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, getfield(Parsers, Symbol("#19#20"))}, Int64})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64, Int64})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("##chop#326")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, Base.SubString{String}})
precompile(Tuple{typeof(Base.nextind), Base.SubString{String}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##chop#326")), Int64, Int64, typeof(Base.chop), Base.SubString{String}})
precompile(Tuple{typeof(Parsers.codes), Int16})
precompile(Tuple{typeof(CSV.fatalerror), Array{UInt8, 1}, Int64, Int64, Int16, Int64, Int64})
precompile(Tuple{typeof(CSV.reallocatetape), Int64, Int64, Int64})
precompile(Tuple{getfield(Mmap, Symbol("##mmap#1")), Bool, Bool, typeof(Mmap.mmap), Mmap.Anonymous, Type{Array{UInt64, 1}}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(CSV.notenoughcolumns), Int64, Int64, Int64})
precompile(Tuple{typeof(CSV.toomanycolumns), Int64, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int8, Int8}, Int8})
precompile(Tuple{Type{Base.Dict{String, UInt64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt64}, String})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt64}, CSV.PointerString})
precompile(Tuple{typeof(Dates.validargs), Type{Dates.Time}, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int64})
precompile(Tuple{Type{Float64}, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Parsers.roundQuotient), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{Int32}, Int128})
precompile(Tuple{typeof(Parsers.BigInt!), Base.GMP.BigInt, Int128})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.realloc2), Int64})
precompile(Tuple{Type{Base.GMP.BigInt}, Int128})
precompile(Tuple{typeof(Base.exp2), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.add_ui), Base.GMP.BigInt, UInt8})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Float64}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Date}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Time}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Bool}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Bool})
precompile(Tuple{typeof(CSV.stricterror), Type{T} where T, Array{UInt8, 1}, Int64, Int64, Int16, Int64, Int64})
precompile(Tuple{Type{Test.Threw}, CSV.Error, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.vect), Type{Int8}})
precompile(Tuple{typeof(CSV.typecode), Type{Int8}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{T} where T})
precompile(Tuple{Type{Base.Pair{Int64, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Integer}})
precompile(Tuple{Type{Base.Dict{Int64, DataType}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Int64, DataType}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, DataType}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, DataType}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, DataType}, Type{T} where T, Int64})
precompile(Tuple{Type{NamedTuple{(:types,), T} where T<:Tuple}, Tuple{Base.Dict{Int64, DataType}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#16#24")), Base.ValueIterator{Base.Dict{Int64, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#17#25")), Base.ValueIterator{Base.Dict{Int64, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, DataType}, Int64})
precompile(Tuple{typeof(CSV.initialtypes), Int8, Base.Dict{Int64, DataType}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#19#27")), Base.ValueIterator{Base.Dict{Int64, DataType}}, Base.Colon})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Base.Dict{Int64, DataType}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Mmap, Symbol("#3#5")){Int64, Ptr{Nothing}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Int64, DataType}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Int64, DataType}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Int64, DataType}})
precompile(Tuple{Type{Base.Pair{DataType, DataType}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, DataType}})
precompile(Tuple{typeof(Base.isdelimited), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type{T} where T})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{Type{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{Type{NamedTuple{(:datarow,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(CSV.slurp), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:datarow,), Tuple{Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Array{UInt64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.nonmissingtype), Type{CSV.PooledString}})
precompile(Tuple{typeof(CSV.sentinelvalue), Type{CSV.PooledString}})
precompile(Tuple{Type{CSV.Column{String, CSV.PooledString}}, Array{UInt64, 1}, Int64, UInt8, Bool, Array{String, 1}, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}, CSV.Column{String, CSV.PooledString}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{String, CSV.PooledString}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{typeof(Base.:(|>)), CSV.File{false}, Type{T} where T})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##make_unique!#1")), Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#100#103"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#99#102")), Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, DataFrames.Index})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, CSV.File{false}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{String, CSV.PooledString}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{AbstractArray{T, 1} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{Type{Base.Dict{String, UInt32}}})
precompile(Tuple{typeof(Base.foreach), getfield(CSV, Symbol("#41#44")), Base.Iterators.Enumerate{Nothing}})
precompile(Tuple{getfield(CSV, Symbol("#41#44")), Tuple{Int64, String}})
precompile(Tuple{typeof(Base.copy), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt32}, UInt32, String})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt32, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{String, UInt32}, Array{String, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Symbol}, 1}, Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#15#20")){String}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#15#20")){String}}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Tuple{Int64, Symbol}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#16#21")){Array{Tuple{Int64, Symbol}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#16#21")){Array{Tuple{Int64, Symbol}, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#19#24")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#18#23"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#19#24")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#18#23"))}})
precompile(Tuple{typeof(DataFrames.fuzzymatch), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(CSV._eltype), Type{Dates.Date}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Dates.Date}})
precompile(Tuple{Type{CSV.Column{Dates.Date, Dates.Date}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(CSV.uint64), Int64})
precompile(Tuple{Type{CSV.Column{Int64, Int64}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Dates.Date, Dates.Date}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Dates.Date, Dates.Date}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}, CSV.Column{Dates.Date, Dates.Date}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Int64, Int64}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{T, P} where P where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Dates.Date, Dates.Date}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{T, P} where P where T}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Dates.Date, Dates.Date}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Dates.Date, Dates.Date}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Int64, Int64}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Dates.Date, Dates.Date}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.copy), CSV.Column{Dates.Date, Dates.Date}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.Date, 1}, Int64})
precompile(Tuple{typeof(Base.copy), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Dates.Date, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), Dates.Date, Dates.Date})
precompile(Tuple{Type{Base.Pair{Symbol, Union}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, Dates.DateTime}}})
precompile(Tuple{Type{Base.Dict{Symbol, Union}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Union}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Union}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Union}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Union}, Type{T} where T, Symbol})
precompile(Tuple{Type{NamedTuple{(:types, :silencewarnings), T} where T<:Tuple}, Tuple{Base.Dict{Symbol, Union}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Dict{Symbol, Union}, Bool}}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#16#24")), Base.ValueIterator{Base.Dict{Symbol, Union}}, Base.Colon})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#17#25")), Base.ValueIterator{Base.Dict{Symbol, Union}}, Base.Colon})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Union}, Symbol})
precompile(Tuple{typeof(CSV.initialtypes), Int8, Base.Dict{Symbol, Union}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#19#27")), Base.ValueIterator{Base.Dict{Symbol, Union}}, Base.Colon})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Base.Dict{Symbol, Union}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:types, :silencewarnings), Tuple{Base.Dict{Symbol, Union}, Bool}}, typeof(CSV.read), String})
precompile(Tuple{typeof(CSV.typecode), Type{Union{Base.Missing, Dates.DateTime}}})
precompile(Tuple{typeof(CSV.sentinelvalue), Type{Base.Missing}})
precompile(Tuple{typeof(CSV._eltype), Type{Float64}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Float64}})
precompile(Tuple{Type{CSV.Column{Float64, Float64}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Dates.DateTime}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Dates.DateTime}})
precompile(Tuple{Type{CSV.Column{Dates.DateTime, Dates.DateTime}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Bool}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Bool}})
precompile(Tuple{Type{CSV.Column{Bool, Bool}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Union{Base.Missing, Dates.DateTime}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Dates.DateTime}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Base.Missing}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Base.Missing}})
precompile(Tuple{typeof(CSV.sentinelvalue), Type{Union{}}})
precompile(Tuple{Type{CSV.Column{Base.Missing, Base.Missing}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, CSV.Column{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Float64, Float64}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Dates.DateTime, Dates.DateTime}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Bool, Bool}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Bool, Bool}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{String, CSV.PooledString}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Base.Missing, Base.Missing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Dates.DateTime, Dates.DateTime}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Bool, Bool}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Base.Missing, Base.Missing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Dates.DateTime, Dates.DateTime}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Bool, Bool}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Base.Missing, Base.Missing}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Float64, Float64}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Bool, Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.File{false}, Tuple{Int64}})
precompile(Tuple{typeof(Base.first), CSV.File{false}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Symbol})
precompile(Tuple{typeof(Base.getproperty), CSV.Row{false}, Symbol})
precompile(Tuple{Type{Test.Threw}, Base.KeyError, Nothing, LineNumberNode})
precompile(Tuple{Type{NamedTuple{(:delim,), T} where T<:Tuple}, Tuple{Char}})
precompile(Tuple{typeof(CSV.isvaliddelim), Char})
precompile(Tuple{typeof(CSV.checkvaliddelim), Char})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, Char, Nothing, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, Char, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, Char, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:delim,), Tuple{Char}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.show_invalid), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Char, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Char, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{Type{NamedTuple{(:delim,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base._all), typeof(CSV.isvaliddelim), String, Base.Colon})
precompile(Tuple{typeof(CSV.checkvaliddelim), String})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, String, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, String, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, String, Nothing, Bool})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, String, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:delim,), Tuple{String}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:header,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.getproperty), CSV.File{false}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Type, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Base.Missing, Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Base.Missing, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Base.Missing, Base.Missing}}, CSV.Column{Base.Missing, Base.Missing}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Base.Missing, Base.Missing}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:skipto,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Int64, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:skipto,), Tuple{Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:limit,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:limit,), Tuple{Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.vect), Type{Base.Missing}, Vararg{Type{Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.:(==)), Array{Type, 1}, Array{DataType, 1}})
precompile(Tuple{Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Int64, Int64}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators.partition), CSV.File{false}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.PartitionIterator{CSV.File{false}}})
precompile(Tuple{typeof(Base.iterate), Array{CSV.Row{false}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Int64, Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{CSV.Row{false}, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.PartitionIterator{CSV.File{false}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.PartitionIterator{CSV.File{false}}, Base.Iterators.IterationCutShort})
precompile(Tuple{typeof(Base.copymutable), CSV.File{false}})
precompile(Tuple{typeof(Base.copy), CSV.File{false}})
precompile(Tuple{typeof(Base._unaliascopy), CSV.File{false}, Array{CSV.Row{false}, 1}})
precompile(Tuple{typeof(Base.unaliascopy), CSV.File{false}})
precompile(Tuple{typeof(Base.unalias), Array{CSV.Row{false}, 1}, CSV.File{false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{CSV.Row{false}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{CSV.Row{false}, 1}, CSV.File{false}})
precompile(Tuple{typeof(Base.collect), CSV.File{false}})
precompile(Tuple{typeof(Base.getindex), Array{CSV.Row{false}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:dateformat,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, String, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, String, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, String, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:dateformat,), Tuple{String}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{Type{Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}, Dates.DateLocale})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Int64})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Int64, Bool})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Bool})
precompile(Tuple{typeof(CSV.timetype), Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(Parsers.xparse), Type{Dates.Time}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(CSV.uint64), Dates.Time})
precompile(Tuple{typeof(Base.setindex!), Array{UInt64, 1}, UInt64, Int64})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Time}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parseint!), Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("H:M:S"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CSV._eltype), Type{Dates.Time}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Dates.Time}})
precompile(Tuple{Type{CSV.Column{Dates.Time, Dates.Time}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Dates.Time, Dates.Time}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Dates.Time, Dates.Time}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}, CSV.Column{Dates.Time, Dates.Time}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Dates.Time, Dates.Time}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Dates.Time, Dates.Time}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Dates.Time, Dates.Time}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Dates.Time, Dates.Time}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Dates.Time, Dates.Time}, Int64})
precompile(Tuple{Type{Dates.Time}, Int64})
precompile(Tuple{typeof(Dates.hour), Dates.Time})
precompile(Tuple{typeof(Dates.minute), Dates.Time})
precompile(Tuple{typeof(Dates.second), Dates.Time})
precompile(Tuple{typeof(Dates.millisecond), Dates.Time})
precompile(Tuple{typeof(Dates.microsecond), Dates.Time})
precompile(Tuple{typeof(Base.:(==)), Dates.Time, Dates.Time})
precompile(Tuple{Type{Dates.Time}, Int64, Int64})
precompile(Tuple{typeof(CSV.read), String})
precompile(Tuple{typeof(CSV._eltype), Type{String}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{String}})
precompile(Tuple{typeof(CSV.sentinelvalue), Type{String}})
precompile(Tuple{Type{CSV.Column{String, String}}, Array{UInt64, 1}, Int64, UInt8, Bool, Array{String, 1}, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{String, String}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{String, String}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{String, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{String, String}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{String, String}}, CSV.Column{String, String}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{String, String}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{String, String}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{String, String}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{String, String}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{String, String}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{String, String}})
precompile(Tuple{typeof(Base.length), CSV.Column{String, String}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:limit,), Tuple{Int64}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Float64, Float64}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Float64, Float64}}, CSV.Column{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Float64, Float64}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{Float64, Float64}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Float64, Float64}})
precompile(Tuple{typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{String, String}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{String, String}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Float64, Float64}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Float64, Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Float64, Float64}, Int64})
precompile(Tuple{typeof(CSV._eltype), Type{Union{Base.Missing, Int64}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(CSV._eltype), Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Float64}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{Type{CSV.Column{String, String}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{String, String}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{String, String}, Int64})
precompile(Tuple{typeof(CSV._eltype), Type{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, String}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:pool,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Bool, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:pool,), Tuple{Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, CSV.PooledString}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Array{String, 1}, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, Int64})
precompile(Tuple{Type{NamedTuple{(:pool,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:pool,), Tuple{Float64}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.names), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{Type{NamedTuple{(:transpose,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:transpose,), Tuple{Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.skiptofield!), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64})
precompile(Tuple{typeof(CSV.countfields), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(CSV, Symbol("#13#14")){Bool}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{String, 1}, getfield(CSV, Symbol("#13#14")){Bool}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(CSV, Symbol("#13#14")){Bool}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(CSV.detecttranspose), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Bool})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{true}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{String, CSV.PooledString}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{String, CSV.PooledString}, Int64})
precompile(Tuple{Type{NamedTuple{(:type,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:type,), Tuple{DataType}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Type{T} where T, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{typeof(CSV.warning), Type{T} where T, Array{UInt8, 1}, Int64, Int64, Int16, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:type, :strict), T} where T<:Tuple}, Tuple{DataType, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{DataType, Bool}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:type, :strict), Tuple{DataType, Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:transpose, :header), T} where T<:Tuple}, Tuple{Bool, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:transpose, :header, :datarow), T} where T<:Tuple}, Tuple{Bool, Int64, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Int64, Int64}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header, :datarow), Tuple{Bool, Int64, Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:transpose, :header, :datarow), Tuple{Bool, Int64, Int64}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:transpose, :header, :datarow), T} where T<:Tuple}, Tuple{Bool, Bool, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Int64}}})
precompile(Tuple{typeof(CSV.skiptorow), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Int64, Bool})
precompile(Tuple{typeof(CSV.skiptorow), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Bool, Int64})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Bool, Int64})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header, :datarow), Tuple{Bool, Bool, Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:transpose, :header, :datarow), Tuple{Bool, Bool, Int64}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.skiptofield!), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{typeof(CSV.detecttranspose), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Bool, Int64, Bool})
precompile(Tuple{Type{NamedTuple{(:transpose, :header), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header), Tuple{Bool, Bool}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:transpose, :header), Tuple{Bool, Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, Symbol})
precompile(Tuple{typeof(CSV.makeunique), Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:transpose, :header), T} where T<:Tuple}, Tuple{Bool, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Array{Symbol, 1}}}})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header), Tuple{Bool, Array{Symbol, 1}}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:transpose, :header), Tuple{Bool, Array{Symbol, 1}}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.detecttranspose), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{Symbol, 1}, Int64, Bool})
precompile(Tuple{Type{NamedTuple{(:header,), T} where T<:Tuple}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Array{Symbol, 1}}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:header,), Tuple{Array{Symbol, 1}}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#7#10"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#7#10"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Symbol, 1}, getfield(CSV, Symbol("#9#12")){Bool}}, Int64})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{Symbol, 1}, Bool})
precompile(Tuple{typeof(CSV._eltype), Type{Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Bool}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Union{Base.Missing, Bool}, Union{Base.Missing, Bool}}, Int64})
precompile(Tuple{typeof(CSV._eltype), Type{Union{Base.Missing, Dates.Date}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Dates.Date}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}})
precompile(Tuple{typeof(Base.length), CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Int64})
precompile(Tuple{Type{NamedTuple{(:use_mmap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:use_mmap,), Tuple{Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Type{T} where T})
precompile(Tuple{Type{Base.Pair{String, DataType}}, Any, Any})
precompile(Tuple{Type{Base.Dict{String, DataType}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, DataType}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, DataType}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, DataType}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, DataType}, Type{T} where T, String})
precompile(Tuple{Type{NamedTuple{(:types,), T} where T<:Tuple}, Tuple{Base.Dict{String, DataType}}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#16#24")), Base.ValueIterator{Base.Dict{String, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#17#25")), Base.ValueIterator{Base.Dict{String, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, DataType}, String})
precompile(Tuple{typeof(CSV.initialtypes), Int8, Base.Dict{String, DataType}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#19#27")), Base.ValueIterator{Base.Dict{String, DataType}}, Base.Colon})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Base.Dict{String, DataType}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:types,), Tuple{Base.Dict{String, DataType}}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.typecode), Type{Dates.Date}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:pool,), Tuple{Float64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tables.istable), CSV.File{false}})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{typeof(Tables.rowaccess), Type{CSV.File{false}}})
precompile(Tuple{typeof(Tables.columnaccess), Type{CSV.File{false}}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Symbol, 1}, typeof(Tables.sym)}, Int64})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Nothing})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Tables.schema), CSV.File{false}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.setindex!), Array{DataType, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Base.Missing}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DataType, 1}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{DataType, 1}})
precompile(Tuple{Type{Tables.Schema{(:int, :float, :date, :datetime, :bool, :null, :str, :catg, :int_float), Tuple{Int64, Float64, Dates.Date, Dates.DateTime, Bool, Base.Missing, String, String, Float64}}}})
precompile(Tuple{typeof(Base.vect), Type{Int64}, Vararg{DataType, N} where N})
precompile(Tuple{typeof(Base.:(==)), Tables.Schema{(:int, :float, :date, :datetime, :bool, :null, :str, :catg, :int_float), Tuple{Int64, Float64, Dates.Date, Dates.DateTime, Bool, Base.Missing, String, String, Float64}}, Tables.Schema{(:int, :float, :date, :datetime, :bool, :null, :str, :catg, :int_float), Tuple{Int64, Float64, Dates.Date, Dates.DateTime, Bool, Base.Missing, String, String, Float64}}})
precompile(Tuple{typeof(Tables.rows), CSV.File{false}})
precompile(Tuple{typeof(Base.propertynames), CSV.Row{false}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Dates.Date, Dates.Date}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Dates.Date, Dates.Date}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Dates.DateTime, Dates.DateTime}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Dates.DateTime, Dates.DateTime}, Int64})
precompile(Tuple{Type{Dates.DateTime}, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Bool, Bool}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Bool, Bool}, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Base.Missing, Base.Missing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Base.Missing, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.iterate), CSV.File{false}, Int64})
precompile(Tuple{Type{NamedTuple{(:ignorerepeated,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ignorerepeated,), Tuple{Bool}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.vect), Type{CSV.PooledString}})
precompile(Tuple{Type{NamedTuple{(:types, :copycols), T} where T<:Tuple}, Tuple{Array{DataType, 1}, Bool}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Array{DataType, 1}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:types, :copycols), Tuple{Array{DataType, 1}, Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.typecode), Type{CSV.PooledString}})
precompile(Tuple{typeof(Base.vect), Type{Union{Base.Missing, CSV.PooledString}}})
precompile(Tuple{Type{NamedTuple{(:types, :copycols), T} where T<:Tuple}, Tuple{Array{Union, 1}, Bool}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#17#25")), Array{Union, 1}, Base.Colon})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Array{Union, 1}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:types, :copycols), Tuple{Array{Union, 1}, Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.typecode), Type{Union{Base.Missing, CSV.PooledString}}})
precompile(Tuple{typeof(Base.foreach), getfield(CSV, Symbol("#42#45")), Base.Iterators.Enumerate{Nothing}})
precompile(Tuple{getfield(CSV, Symbol("#42#45")), Tuple{Int64, String}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt32}}})
precompile(Tuple{typeof(Base.foreach), getfield(CSV, Symbol("#43#46")), Base.Iterators.Enumerate{Nothing}})
precompile(Tuple{getfield(CSV, Symbol("#43#46")), Tuple{Int64, String}})
precompile(Tuple{typeof(Base.copy), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}})
precompile(Tuple{typeof(Base.length), Base.Dict{Union{Base.Missing, String}, UInt32}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, String}, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt32}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt32}, UInt32, Base.Missing})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{Union{Base.Missing, String}, UInt32}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{Union{Base.Missing, String}, UInt32}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{Union{Base.Missing, String}, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Type{NamedTuple{(:comment,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Tuple{Ptr{UInt8}, Int64}, Bool})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Tuple{Ptr{UInt8}, Int64}, Bool, Int64, Int64})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, UInt8, Tuple{Ptr{UInt8}, Int64}, Bool})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, String, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:comment,), Tuple{String}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Tuple{Ptr{UInt8}, Int64}, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Bool})
precompile(Tuple{typeof(Base.lastindex), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.vect), Type{Main.CSV_Foo}})
precompile(Tuple{Type{NamedTuple{(:types,), T} where T<:Tuple}, Tuple{Array{DataType, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:types,), Tuple{Array{DataType, 1}}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.typecode), Type{Main.CSV_Foo}})
precompile(Tuple{typeof(Base.string), String, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, DataType}})
precompile(Tuple{Type{NamedTuple{(:types,), T} where T<:Tuple}, Tuple{Base.Dict{Symbol, DataType}}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#16#24")), Base.ValueIterator{Base.Dict{Symbol, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#17#25")), Base.ValueIterator{Base.Dict{Symbol, DataType}}, Base.Colon})
precompile(Tuple{typeof(CSV.initialtypes), Int8, Base.Dict{Symbol, DataType}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._any), getfield(CSV, Symbol("#19#27")), Base.ValueIterator{Base.Dict{Symbol, DataType}}, Base.Colon})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Base.Dict{Symbol, DataType}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:ignoreemptylines,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:ignoreemptylines,), Tuple{Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, String, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:dateformat,), Tuple{String}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}, Dates.DateLocale})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Bool})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Bool})
precompile(Tuple{typeof(CSV.timetype), Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(Parsers.xparse), Type{Dates.DateTime}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("y-m-dTH:M:S.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base.length), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base.read), Base.Cmd})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Cmd})
precompile(Tuple{typeof(Base.print_to_string), Base.Cmd})
precompile(Tuple{typeof(CSV.file), Base.Cmd, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{typeof(CSV.read), Base.Cmd})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(CSV.consumeBOM), Array{UInt8, 1}})
precompile(Tuple{typeof(CSV.allocate), Int64, Int64, Array{Int8, 1}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.isequal), Bool, Bool})
precompile(Tuple{typeof(Base.:(&)), Bool, Bool})
precompile(Tuple{typeof(Base.open), String})
precompile(Tuple{typeof(Base.getproperty), Base.IOStream, Symbol})
precompile(Tuple{typeof(CodecZlib.inflate_init!), CodecZlib.ZStream, Int64})
precompile(Tuple{typeof(CodecZlib.zerror), CodecZlib.ZStream, Int32})
precompile(Tuple{getfield(TranscodingStreams, Symbol("##TranscodingStream#5")), Int64, Bool, Bool, Type{TranscodingStreams.TranscodingStream{C, S} where S<:IO where C<:TranscodingStreams.Codec}, CodecZlib.GzipDecompressor, Base.IOStream})
precompile(Tuple{getfield(CodecZlib, Symbol("##GzipDecompressorStream#8")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, S} where S<:IO}, Base.IOStream})
precompile(Tuple{Type{TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, S} where S<:IO}, Base.IOStream})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(TranscodingStreams.finalize_codec), CodecZlib.GzipDecompressor, TranscodingStreams.Error})
precompile(Tuple{typeof(TranscodingStreams.startproc), CodecZlib.GzipDecompressor, Symbol, TranscodingStreams.Error})
precompile(Tuple{typeof(TranscodingStreams.writedata!), Base.IOStream, TranscodingStreams.Buffer})
precompile(Tuple{getfield(TranscodingStreams, Symbol("##makemargin!#3")), Bool, typeof(TranscodingStreams.makemargin!), TranscodingStreams.Buffer, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:code, :input_size, :output_size, :input_delta, :output_delta), Tuple{Symbol, Int64, Int64, Int64, Int64}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.NullLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:code, :input_size, :output_size, :input_delta, :output_delta), Tuple{Symbol, Int64, Int64, Int64, Int64}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:code, :input_size, :output_size, :input_delta, :output_delta), Tuple{Symbol, Int64, Int64, Int64, Int64}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(TranscodingStreams.callprocess), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, TranscodingStreams.Buffer, TranscodingStreams.Buffer})
precompile(Tuple{typeof(TranscodingStreams.flushbuffer), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Bool})
precompile(Tuple{typeof(TranscodingStreams.flushuntilend), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}})
precompile(Tuple{typeof(TranscodingStreams.throw_panic_error)})
precompile(Tuple{typeof(TranscodingStreams.changemode!), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Symbol})
precompile(Tuple{typeof(TranscodingStreams.readdata!), Base.IOStream, TranscodingStreams.Buffer})
precompile(Tuple{getfield(TranscodingStreams, Symbol("##fillbuffer#11")), Bool, typeof(TranscodingStreams.fillbuffer), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}})
precompile(Tuple{typeof(Base.eof), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}})
precompile(Tuple{typeof(Base.unsafe_read), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(TranscodingStreams.unsafe_read), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.readbytes!), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CSV.slurp), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}})
precompile(Tuple{typeof(CSV.file), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{typeof(CSV.read), TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Symbol})
precompile(Tuple{typeof(Random.make_seed), Int64})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(Base.lastindex), CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}})
precompile(Tuple{Type{NamedTuple{(:threaded,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Bool, Bool, Bool, Nothing})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:threaded,), Tuple{Bool}}, typeof(CSV.read), String})
precompile(Tuple{typeof(CSV.findrowstarts!), Array{UInt8, 1}, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Nothing, Bool, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int8, 1}, 1}, Array{Int8, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#33#36")){Array{Int8, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#33#36")){Array{Int8, 1}}}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{UInt64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, UInt64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt64}, UInt64, String})
precompile(Tuple{typeof(CSV.multithreadparse), Array{Int8, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Float64, Int64, Bool, Base.Dict{Int8, Int8}, Int64, Nothing, Bool})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#32#35")){Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#32#35")){Int64, Int64}}, Int64})
precompile(Tuple{getfield(CSV, Symbol("#34#37")){Array{Int8, 1}, Array{UInt8, 1}, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Float64, Int64, Bool, Base.Dict{Int8, Int8}, Int64, Nothing, Bool, Int64, Array{Int64, 1}, Int64, Array{Int64, 1}, Array{Array{Array{UInt64, 1}, 1}, 1}, Array{Array{Array{UInt64, 1}, 1}, 1}, Array{Array{Base.Dict{String, UInt64}, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{Array{Int8, 1}, 1}, Array{Array{Int64, 1}, 1}, Int64}})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Array{UInt64, 1}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, 1}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64})
precompile(Tuple{Type{CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Array{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{CSV.Column{String, String}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{String, String}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{String, String}, 1}, CSV.Column{String, String}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64})
precompile(Tuple{Type{CSV.Column2{String, String}}, Array{CSV.Column{String, String}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, 1}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64})
precompile(Tuple{Type{CSV.Column2{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Array{CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, 1}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64})
precompile(Tuple{Type{CSV.Column2{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}, Array{CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, 1}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}, Int64})
precompile(Tuple{Type{CSV.Column2{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}}, Array{CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, 1}, Int64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column2{String, String}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column2{T, P} where P where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Type{Symbol}, Type{CSV.Column2{T, P} where P where T}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, Base.Dict{Symbol, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, CSV.Column2{String, String}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column2{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, CSV.Column2{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column2{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, CSV.Column2{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column2{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column2{T, P} where P where T}, CSV.Column2{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column2{T, P} where P where T}})
precompile(Tuple{Type{CSV.File{true}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column2{T, P} where P where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column2{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column2{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column2{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column2{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column2{String, String}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column2{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column2{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column2{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column2{String, String}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column2{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column2{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column2{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}})
precompile(Tuple{typeof(Base.lastindex), CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.getindex), CSV.Column2{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Dates.Time, Dates.Time}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Dates.Time, Dates.Time}})
precompile(Tuple{Type{NamedTuple{(:missingstrings,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}, Array{String, 1}, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64})
precompile(Tuple{typeof(CSV.readsplitline), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Float64}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Date}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Time}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Bool}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Bool})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:delim,), Tuple{Char}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV._eltype), Type{Union{Base.Missing, Dates.Time}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Dates.Time}}})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}})
precompile(Tuple{Type{Dates.Time}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Dates.Time, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Dates.Time, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Dates.Time})
precompile(Tuple{typeof(Base.promote_type), Type{Dates.Time}, Type{Union{Base.Missing, Dates.Time}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Dates.Time}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Dates.Time}, 1}, Tuple{Dates.Time, Base.Missing, Dates.Time}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Union{Base.Missing, Dates.Time}, Union{Base.Missing, Dates.Time}}, Array{Union{Base.Missing, Dates.Time}, 1}})
precompile(Tuple{Type{NamedTuple{(:footerskip,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:footerskip,), Tuple{Int64}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.length), CSV.File{false}})
precompile(Tuple{typeof(Base.getindex), CSV.File{false}, Int64})
precompile(Tuple{typeof(Base.getindex), CSV.Row{false}, Int64})
precompile(Tuple{Type{Base.Val{2262}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), String, Base.Val{2262}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), String, Base.Val{10}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:datarow,), Tuple{Int64}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.eachcol), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.all), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base._all), getfield(Main, Symbol("#3#4")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{getfield(Main, Symbol("#3#4")), CSV.Column{Float64, Float64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:normalizenames,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.getindex), Type{Base.Missing}, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Vararg{Base.Missing, N} where N})
precompile(Tuple{Type{NamedTuple{(:Column1,), T} where T<:Tuple}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{Type{NamedTuple{(:escapechar, :pool), T} where T<:Tuple}, Tuple{Char, Bool}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:escapechar,), T} where T<:Tuple}, Tuple{Char}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:header, :footerskip), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Int64, Int64, Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Base.Missing, Int64})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(Dates, Symbol("##s626#37")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dates, Symbol("#38#39")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}})
precompile(Tuple{getfield(Dates, Symbol("##s627#34")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}, Int64})
precompile(Tuple{typeof(Dates.tryparsenext_core), String, Int64, Int64, Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}, Bool})
precompile(Tuple{Type{Dates.Date}, String})
precompile(Tuple{typeof(Base.getindex), Type{Dates.Date}, Dates.Date, Dates.Date, Dates.Date})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base.parse), Type{Dates.DateTime}, String, Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}})
precompile(Tuple{Type{Dates.DateTime}, String})
precompile(Tuple{typeof(Base.getindex), Type{Dates.DateTime}, Dates.DateTime, Dates.DateTime, Dates.DateTime})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{Array{Dates.DateTime, 1}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:missingstring,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Base.Missing, Float64})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:header,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{Type{NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:header,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Int64, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:delim, :missingstring), T} where T<:Tuple}, Tuple{Char, String}})
precompile(Tuple{typeof(Base.getindex), Type{Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{Type{NamedTuple{(:header,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:delim, :decimal), T} where T<:Tuple}, Tuple{Char, Char}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Bool}, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Base.Missing}, Base.Missing, Base.Missing, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:col1, :col2), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:cat,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:pool, :normalizenames), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:header, :missingstring, :pool), T} where T<:Tuple}, Tuple{Int64, String, Bool}})
precompile(Tuple{Type{NamedTuple{(:aa, :bb), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), T} where T<:Tuple}, Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}})
precompile(Tuple{typeof(Base.getindex), Type{String}, String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Float64, Float64, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Float64}, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Float64}, 1}, Base.Missing, Int64})
precompile(Tuple{Type{NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:missingstring, :delim, :decimal), T} where T<:Tuple}, Tuple{String, Char, Char}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Base.Missing, Base.Missing, Float64})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e, :f), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#9#13")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#9#13"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#9#13"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#9#13"))}})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:transpose, :header), T} where T<:Tuple}, Tuple{Bool, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:c1, :c2, :c3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Base.Missing, Base.Missing, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:missingstrings, :openquotechar, :closequotechar), T} where T<:Tuple}, Tuple{Array{String, 1}, Char, Char}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Base.Missing, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:truestrings, :falsestrings), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Bool}, Bool, Bool, Bool, Bool, Vararg{Bool, N} where N})
precompile(Tuple{Type{NamedTuple{(:int, :bools), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Bool, 1}}})
precompile(Tuple{Type{Base.Dict{DataType, DataType}}})
precompile(Tuple{Type{Base.Dict{DataType, DataType}}, Tuple{Base.Pair{DataType, DataType}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{DataType, DataType}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, DataType}, Type{T} where T, Type{Bool}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, DataType}, Type{T} where T})
precompile(Tuple{Type{NamedTuple{(:truestrings, :falsestrings, :typemap), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}})
precompile(Tuple{Type{NamedTuple{(:int, :bools), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:num1, :num2, :num3, :num4), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, Float64}}})
precompile(Tuple{Type{NamedTuple{(:types,), T} where T<:Tuple}, Tuple{Base.Dict{Symbol, Union}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vect), Bool, Vararg{Bool, N} where N})
precompile(Tuple{Type{NamedTuple{(:delim, :ignorerepeated), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Base.Missing}, Base.Missing, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Missing})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), T} where T<:Tuple}, Tuple{Char, Char, String, String, Bool}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:event, :time, :typ), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.vect), Dates.Date})
precompile(Tuple{typeof(Base.vect), Dates.DateTime})
precompile(Tuple{typeof(Base.vect), Base.Missing})
precompile(Tuple{Type{NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Base.Missing})
precompile(Tuple{Type{Array{Union{Base.Missing, Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Float64, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:comment, :header), T} where T<:Tuple}, Tuple{String, Int64}})
precompile(Tuple{Type{NamedTuple{(:ignorerepeated, :delim), T} where T<:Tuple}, Tuple{Bool, Char}})
precompile(Tuple{Type{NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, String}}, String, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:a, :b, :_, :Column4), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.vect), Base.Missing, Vararg{Base.Missing, N} where N})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing}})
precompile(Tuple{typeof(Base.vect), Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{Type{NamedTuple{(:datarow, :pool), T} where T<:Tuple}, Tuple{Int64, Bool}})
precompile(Tuple{Type{NamedTuple{(:Column1,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:delim, :ignorerepeated, :datarow, :header), T} where T<:Tuple}, Tuple{Char, Bool, Int64, Array{Symbol, 1}}})
precompile(Tuple{Type{NamedTuple{(:debug, :normalizenames), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.vect), Dates.Time, Vararg{Dates.Time, N} where N})
precompile(Tuple{Type{NamedTuple{(:time, :value), T} where T<:Tuple}, Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:header, :types), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:fluid, :col2, :col3, :acentric_factor), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:comment, :header), T} where T<:Tuple}, Tuple{String, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, String})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{Union{Base.Missing, String}}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, String, Base.Missing, String}})
precompile(Tuple{Type{NamedTuple{(:eats_steak, :how_cooked), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{NamedTuple{(:header, :ignorerepeated, :delim), T} where T<:Tuple}, Tuple{Bool, Bool, Char}})
precompile(Tuple{Type{NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:delim, :ignoreemptylines), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{typeof(Base.vect), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(), Tuple{}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(), Tuple{}}}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{String, NamedTuple{(:footerskip,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:footerskip,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim, :missingstring), Tuple{Char, String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim, :missingstring), Tuple{Char, String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:header,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:header,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#6#10"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#6#10"))}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#7#11"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#7#11"))}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:missingstring, :delim, :decimal), Tuple{String, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstring, :delim, :decimal), Tuple{String, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:missingstrings, :openquotechar, :closequotechar), Tuple{Array{String, 1}, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:missingstrings, :openquotechar, :closequotechar), Tuple{Array{String, 1}, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}, Tuple{String, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:delim,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:skipto,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:skipto,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), Tuple{Char, Char, String, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), Tuple{Char, Char, String, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow, :pool), Tuple{Int64, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow, :pool), Tuple{Int64, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:debug, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:debug, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Tuple{String, NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{String, NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignoreemptylines), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:debug, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow, :pool), Tuple{Int64, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}}}, Type{Tuple{String, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), Tuple{Char, Char, String, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:skipto,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:missingstrings, :openquotechar, :closequotechar), Tuple{Array{String, 1}, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:missingstring, :delim, :decimal), Tuple{String, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#7#11"))}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#6#10"))}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:header,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim, :missingstring), Tuple{Char, String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:footerskip,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(), Tuple{}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}}, Type{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}}})
precompile(Tuple{Type{Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(), Tuple{}}}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{String, NamedTuple{(:footerskip,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim, :missingstring), Tuple{Char, String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:header,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#6#10"))}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#7#11"))}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:missingstring, :delim, :decimal), Tuple{String, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:missingstrings, :openquotechar, :closequotechar), Tuple{Array{String, 1}, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}, Tuple{String, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:delim,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:skipto,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), Tuple{Char, Char, String, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow, :pool), Tuple{Int64, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:debug, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}}, Tuple{String, NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Tuple{String, NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{String, NamedTuple{(:delim, :ignoreemptylines), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:footerskip,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim, :missingstring), Tuple{Char, String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:header,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#6#10"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, getfield(Main, Symbol("#7#11"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:cat,), Tuple{Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:missingstring, :delim, :decimal), Tuple{String, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:missingstrings, :openquotechar, :closequotechar), Tuple{Array{String, 1}, Char, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:skipto,), Tuple{Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), Tuple{Char, Char, String, String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Int64}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow, :pool), Tuple{Int64, Bool}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:debug, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Tuple{Int64, Int64}, DataType, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Tuple{String, NamedTuple{(:delim, :ignoreemptylines), Tuple{String, Bool}}, Tuple{Int64, Int64}, DataType, Nothing}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Generator{Base.Iterators.Enumerate{Array{Symbol, 1}}, getfield(CSV, Symbol("#48#49"))}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Enumerate{Array{Symbol, 1}}, getfield(CSV, Symbol("#48#49"))}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(Base.println), Test.Error})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Error})
precompile(Tuple{typeof(Base.print), Test.Error})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Error})
precompile(Tuple{typeof(Test.do_test), Test.Threw, Expr})
precompile(Tuple{getfield(Base, Symbol("##catch_stack#43")), Bool, typeof(Base.catch_stack), Task})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}}, String, Array{Symbol, 1}, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{Int64, 1}, Nothing, Bool, Bool, Array{UInt64, 1}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Tables.schema), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Tables.columntable), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.:(|>)), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, typeof(Tables.columntable)})
precompile(Tuple{Type{Array{Union, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{Union, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union, 1}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{Union, 1}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#27")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#28#30")){DataType}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#28#30")){DataType}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#28#30")){DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#28#30")){DataType}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#9")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#18")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Core.SimpleVector})
precompile(Tuple{Type{Tuple}, Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Tables.columntable), CSV.File{false}})
precompile(Tuple{typeof(Base.:(|>)), CSV.File{false}, typeof(Tables.columntable)})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Float64, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Any, NamedTuple{names, T} where T<:Tuple where names, Tuple{Int64, Int64}, DataType, Any}, 1}, Int64})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:col1,), Tuple{Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1,), Tuple{Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:col1,), Tuple{Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:col1,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1,), Tuple{Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:col1,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1,), Tuple{Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{Type{Tables.Schema{(:col1,), Tuple{Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1,), Tuple{Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1,), Tuple{CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1,), Tuple{CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1,), Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType}, Tuple{DataType}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1,), Tuple{CSV.Column{Int64, Int64}}}, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(), Tuple{}}})
precompile(Tuple{Type{Tables.Schema{(), Tuple{}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(), Tuple{}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(), Tuple{}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{}, DataType}, Int64})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(), Tuple{}}, Tables.CopiedColumns{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Tables, Symbol("#5#6")){Tuple{}}, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(), Tuple{}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{}, Tuple{}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Type, 1}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{Type, 1}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(), Tuple{}}, CSV.File{false}})
precompile(Tuple{typeof(Core.Compiler.iterate), NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:Column1,), Tuple{Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Column1,), Tuple{Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Column1,), Tuple{Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Column1,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1,), Tuple{Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Column1,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1,), Tuple{Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:Column1,), Tuple{Base.Missing}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1,), Tuple{Base.Missing}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Column1,), T} where T<:Tuple}, Tuple{CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1,), Tuple{CSV.Column{Base.Missing, Base.Missing}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Column1,), Tuple{CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1,), Tuple{Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.length), CSV.Column{Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Base.Missing, Base.Missing}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:Column1,), Tuple{CSV.Column{Base.Missing, Base.Missing}}}, NamedTuple{(:Column1,), Tuple{Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:pool,), Tuple{Bool}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Bool, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:escapechar, :pool), Tuple{Char, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1, :col2), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:col1, :col2), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:col1, :col2), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:col1, :col2), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2), Tuple{String, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2), Tuple{String, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2), Tuple{CSV.Column{String, String}, CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2), Tuple{CSV.Column{String, String}, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2), Tuple{String, String}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType}, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{String, String}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2), Tuple{CSV.Column{String, String}, CSV.Column{String, String}}}, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{String, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{String, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Type{Int64}, Type{String}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{String, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Int64}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Int64}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Float64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header, :footerskip), Tuple{Int64, Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Union}})
precompile(Tuple{typeof(Base.setindex!), Array{Union, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Union}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Union, 1}, Type, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Union, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{Union, Union, Union}, Tuple{Union, Union, Union}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:footerskip,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:footerskip,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Dates.Date, Dates.Date}}})
precompile(Tuple{Type{Tables.Schema{(:col1,), Tuple{Dates.Date}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1,), Tuple{Dates.Date}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{CSV.Column{Dates.Date, Dates.Date}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1,), Tuple{CSV.Column{Dates.Date, Dates.Date}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1,), Tuple{CSV.Column{Dates.Date, Dates.Date}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1,), Tuple{Dates.Date}}, Symbol})
precompile(Tuple{typeof(Base.length), CSV.Column{Dates.Date, Dates.Date}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Dates.Date, Dates.Date}, Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1,), Tuple{CSV.Column{Dates.Date, Dates.Date}}}, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:dateformat,), Tuple{String}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Dates.Date, 1}}}})
precompile(Tuple{Type{Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}, Dates.DateLocale})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Int64})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Int64, Bool})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Bool})
precompile(Tuple{typeof(CSV.timetype), Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(Parsers.xparse), Type{Dates.Date}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}})
precompile(Tuple{typeof(CSV.uint64), Dates.Date})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Date}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("mm/dd/yy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}, Dates.DateLocale})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Bool})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Bool})
precompile(Tuple{typeof(CSV.timetype), Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(Parsers.xparse), Type{Dates.DateTime}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(CSV.uint64), Dates.DateTime})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}, CSV.Column{Dates.DateTime, Dates.DateTime}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{Type{Tables.Schema{(:col1,), Tuple{Dates.DateTime}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1,), Tuple{Dates.DateTime}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{CSV.Column{Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1,), Tuple{CSV.Column{Dates.DateTime, Dates.DateTime}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1,), Tuple{CSV.Column{Dates.DateTime, Dates.DateTime}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1,), Tuple{Dates.DateTime}}, Symbol})
precompile(Tuple{typeof(Base.length), CSV.Column{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Dates.DateTime, Dates.DateTime}, Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1,), Tuple{CSV.Column{Dates.DateTime, Dates.DateTime}}}, NamedTuple{(:col1,), Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, String, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, String, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Type{Float64}, Type{String}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, String, Float64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, String, Float64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}}, String, Array{Symbol, 1}, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Array{Int64, 1}, Nothing, Bool, Bool, Array{UInt64, 1}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Tables.schema), CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{typeof(Tables.columntable), CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.:(|>)), CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}, typeof(Tables.columntable)})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.similar), Array{DataType, 1}, Type{T} where T})
precompile(Tuple{Type{Array{Type, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Type, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Union{Base.Missing, Float64}, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Union{Base.Missing, Float64}, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Union{Base.Missing, Float64}, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Union{Base.Missing, Float64}, Float64}}, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DataType}})
precompile(Tuple{typeof(Base.copyto!), Array{DataType, 1}, Int64, Array{DataType, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Union{Base.Missing, Float64}, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Union{Base.Missing, Float64}, Float64}}}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Type, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Int64, Array{DataType, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Type, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Union{Base.Missing, Float64}, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, Union, DataType}, Tuple{DataType, Union, DataType}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Float64, Float64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.isequal), Float64, Float64})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Base.UnitRange{Int64}, Int64})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Base.UnitRange{Int64}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Base.UnitRange{Int64}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Base.UnitRange{Int64}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Base.UnitRange{Int64}, Bool})
precompile(Tuple{Type{Tables.Schema{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Array{Int64, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Array{Int64, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Array{Int64, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1_sub1_part1, :col2_sub2_part2, :col3_sub3_part3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{Int64, 1}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Base.Dict{Int64, DataType}, Tuple{Symbol}, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.typecode), Type{Float64}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Float64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Float64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Type{Float64}, Type{Int64}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Float64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Float64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C, :D), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:A, :B, :C, :D), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C, :D), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:A, :B, :C, :D), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C, :D), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:A, :B, :C, :D), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C, :D), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C, :D), Tuple{Int64, Union{Base.Missing, Int64}, String, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C, :D), Tuple{Int64, Union{Base.Missing, Int64}, String, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{String, String}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C, :D), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{String, String}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:A, :B, :C, :D), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{String, String}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataType, 1}, Type, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Int64}, String, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C, :D), Tuple{Int64, Union{Base.Missing, Int64}, String, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Int64}, String, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, Union, DataType, DataType}, Tuple{DataType, Union, DataType, DataType}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:A, :B, :C, :D), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{String, String}, CSV.Column{Int64, Int64}}}, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim, :missingstring), Tuple{Char, String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim, :missingstring), Tuple{Char, String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:A, :B, :C, :D), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{Any, N} where N})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:a, :b, :c), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c), Tuple{Base.Missing, Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c), Tuple{Base.Missing, Base.Missing, Base.Missing}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c), Tuple{CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :c), Tuple{CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Base.Missing, Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c), Tuple{Base.Missing, Base.Missing, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c), Tuple{CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Array{String, 1}, Int64})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Array{String, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Array{String, 1}}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header,), Tuple{Array{String, 1}}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:header,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:header,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{String, 1}, Bool})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.similar), Array{Union, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{Union, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSV._eltype), Tuple{Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, Int64}, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, Int64}, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:x, :y), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:x, :y), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, Int64}, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Union, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Union, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Int64}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Int64, Array{Union, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{Union, DataType}, Tuple{Union, DataType}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:x, :y), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Int64, Int64}}}, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol}, NamedTuple{(:decimal,), Tuple{Char}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Char, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Char, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Nothing, Char, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:x, :y), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.Schema{(:x, :y), Tuple{Float64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:x, :y), Tuple{Float64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:x, :y), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:x, :y), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:x, :y), Tuple{Float64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:x, :y), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:x, :y), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, Function})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:escapechar,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, getfield(Main, Symbol("#6#10"))})
precompile(Tuple{Type{Tables.Schema{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Float64, Int64, String, String, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Float64, Int64, String, String, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Int64, String, String, String}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{Float64, Int64, String, String, String}}, Symbol})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{getfield(Main, Symbol("#6#10")), NamedTuple{(:APINo, :FileNo, :CurrentWellName, :LeaseName, :OriginalWellName), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Int64, Int64, Int64, Int64, Int64, Float64, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Int64, Int64, Int64, Int64, Int64, Float64, Float64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Int64, Int64, Int64, Int64, Int64, Float64, Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64, Int64, Float64, Float64, Float64, Float64}}}, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._isequal), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}, NamedTuple{(:GEOID, :POP10, :HU10, :ALAND, :AWATER, :ALAND_SQMI, :AWATER_SQMI, :INTPTLAT, :INTPTLONG), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Bool, Bool}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Bool, Bool}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Bool, Bool}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Bool, Bool}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Bool, Bool}}, CSV.Column{Bool, Bool}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Bool, Bool}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{Bool, Bool}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{Bool, Bool}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Bool, Bool, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Bool, Bool, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Bool, Bool}, CSV.Column{Bool, Bool}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Bool, Bool}, CSV.Column{Bool, Bool}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Bool, Bool}, CSV.Column{Bool, Bool}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Type{Bool}, Type{Int64}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Bool, Bool, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Bool, Bool, Int64}}}, Int64})
precompile(Tuple{typeof(Base.length), CSV.Column{Bool, Bool}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Bool, Bool}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Bool, Bool}, CSV.Column{Bool, Bool}, CSV.Column{Int64, Int64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Bool, 1}, Array{Bool, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, Function})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, getfield(Main, Symbol("#7#11"))})
precompile(Tuple{Type{Tables.Schema{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Int64, Float64, Union{Base.Missing, String}, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Int64, Float64, Union{Base.Missing, String}, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Float64, Union{Base.Missing, String}, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{Int64, Float64, Union{Base.Missing, String}, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Float64, Union{Base.Missing, String}, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, DataType, Union, DataType, DataType}, Tuple{DataType, DataType, Union, DataType, DataType}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, Union, DataType, DataType}, Tuple{DataType, DataType, Union, DataType, DataType}})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base._eq), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._eq), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(Main, Symbol("#7#11")), NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, CSV.Column{Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, CSV.Column{Float64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Float64, Float64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Int64, Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Main, Symbol("#8#12")), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{Type{NamedTuple{(:Event, :Mag, :Station, :Dist, :Accel), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:missingstring,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1, :col2), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2), Tuple{String, Base.Missing}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2), Tuple{String, Base.Missing}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2), Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2), Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Type{Base.Missing}, Type{String}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2), Tuple{String, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2), Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}}, NamedTuple{(:col1, :col2), Tuple{Array{String, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Int64, String, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Int64, String, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Int64, String, String}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, String, String}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}}}, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:cat,), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:cat,), Tuple{Array{String, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:cat,), Tuple{Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:cat,), Tuple{Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:cat,), Tuple{Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:cat,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:cat,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:cat,), Tuple{Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:cat,), Tuple{Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:cat,), Tuple{Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:cat,), Tuple{String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:cat,), Tuple{String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:cat,), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:cat,), Tuple{CSV.Column{String, CSV.PooledString}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:cat,), Tuple{CSV.Column{String, CSV.PooledString}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:cat,), Tuple{String}}, Symbol})
precompile(Tuple{typeof(Base.iterate), CSV.Column{String, CSV.PooledString}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), CSV.Column{String, CSV.PooledString}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{String, CSV.PooledString}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:cat,), Tuple{CSV.Column{String, CSV.PooledString}}}, NamedTuple{(:cat,), Tuple{Array{String, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:pool,), Tuple{Float64}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:cat,), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Float64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:cat,), Tuple{Array{String, 1}}}})
precompile(Tuple{Type{NamedTuple{(:cat,), T} where T<:Tuple}, Tuple{CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:cat,), Tuple{CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:cat,), Tuple{CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:cat,), Tuple{CSV.Column{String, String}}}, NamedTuple{(:cat,), Tuple{Array{String, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:pool, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{Type{Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), T} where T<:Tuple}, Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Rk, :Year, :Age, :Tm, :Lg, :Column6, :W, :L, :W_L_, :G, :Finish, :Wpost, :Lpost, :W_L_post, :Column15), Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Union, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Union, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}}}}, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{Union, Union, Union, Union, Union}, Tuple{Union, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base._eq), Tuple{Union, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{Union, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base._eq), Tuple{Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{Type{Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Int64, String, String, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64, Float64, String, String, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Int64, String, String, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64, Float64, String, String, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, String, String, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64, Float64, String, String, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:policyID, :statecode, :county, :eq_site_limit, :hu_site_limit, :fl_site_limit, :fr_site_limit, :tiv_2011, :tiv_2012, :eq_site_deductible, :hu_site_deductible, :fl_site_deductible, :fr_site_deductible, :point_latitude, :point_longitude, :line, :construction, :point_granularity), Tuple{Int64, String, String, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64, Float64, String, String, Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{Type{Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{String, String, Int64, String, Int64, String, Int64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{String, String, Int64, String, Int64, String, Int64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Int64, String, Int64, String, Int64, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:cdatetime, :address, :district, :beat, :grid, :crimedescr, :ucr_ncic_code, :latitude, :longitude), Tuple{String, String, Int64, String, Int64, String, Int64, Float64, Float64}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{String, String, Int64, String, Int64, Int64, Int64, String, String, Int64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{String, String, Int64, String, Int64, Int64, Int64, String, String, Int64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Int64, String, Int64, Int64, Int64, String, String, Int64, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:street, :city, :zip, :state, :beds, :baths, :sq__ft, :type, :sale_date, :price, :latitude, :longitude), Tuple{String, String, Int64, String, Int64, Int64, Int64, String, String, Int64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{String, P} where P}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}, Type{Symbol}, Type{CSV.Column{String, P} where P}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{String, P} where P}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{String, P} where P}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{String, P} where P}, CSV.Column{String, CSV.PooledString}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{String, P} where P}, Base.Dict{Symbol, CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{String, P} where P}, CSV.Column{String, String}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{String, P} where P}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{String, P} where P}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{String, P} where P}})
precompile(Tuple{Type{Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{String, String, String, String, String, String, Union{Base.Missing, String}, String, String, String, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{String, String, String, String, String, String, Union{Base.Missing, String}, String, String, String, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, String}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, String}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, String}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, String, String, String, String, Union{Base.Missing, String}, String, String, String, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Transaction_date, :Product, :Price, :Payment_Type, :Name, :City, :State, :Country, :Account_Created, :Last_Login, :Latitude, :Longitude), Tuple{String, String, String, String, String, String, Union{Base.Missing, String}, String, String, String, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, String, String, String, String, Union{Base.Missing, String}, String, String, String, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, DataType, DataType, Union, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, Union, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, Union, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, Union, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{Type{Tables.Schema{(:Stock_Name, :Company_Name), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Stock_Name, :Company_Name), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Stock_Name, :Company_Name), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Stock_Name, :Company_Name), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Stock_Name, :Company_Name), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Stock_Name, :Company_Name), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Stock_Name, :Company_Name), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Stock_Name, :Company_Name), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:Stock_Name, :Company_Name), Tuple{String, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Stock_Name, :Company_Name), Tuple{String, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Stock_Name, :Company_Name), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Stock_Name, :Company_Name), Tuple{CSV.Column{String, String}, CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Stock_Name, :Company_Name), Tuple{CSV.Column{String, String}, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Stock_Name, :Company_Name), Tuple{String, String}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{String, String, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, String, Int64, String, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{String, String, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, String, Int64, String, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, String, Int64, String, String}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:permalink, :company, :numEmps, :category, :city, :state, :fundedDate, :raisedAmt, :raisedCurrency, :round), Tuple{String, String, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, String, Int64, String, String}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, String, Int64, String, String}}}, Int64, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, Union, Union, Union, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, Union, Union, Union, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, Union, Union, Union, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, Union, Union, Union, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{String, Int64, Int64, String, String, String, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{String, Int64, Int64, String, String, String, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Int64, Int64, String, String, String, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:playerID, :yearID, :stint, :teamID, :lgID, :POS, :G, :GS, :InnOuts, :PO, :A, :E, :DP, :PB, :WP, :SB, :CS, :ZR), Tuple{String, Int64, Int64, String, String, String, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Int64, Int64, String, String, String, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header, :missingstring, :pool), Tuple{Int64, String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{String, String, Int64, Int64, String, Int64, String, Int64, Dates.Date, Dates.Date, Int64, String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{String, String, Int64, Int64, String, Int64, String, Int64, Dates.Date, Dates.Date, Int64, String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Int64, Int64, String, Int64, String, Int64, Dates.Date, Dates.Date, Int64, String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20, :Column21, :Column22, :Column23, :Column24, :Column25), Tuple{String, String, Int64, Int64, String, Int64, String, Int64, Dates.Date, Dates.Date, Int64, String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Int64, Int64, String, Int64, String, Int64, Dates.Date, Dates.Date, Int64, String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Float64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, DataType, Union, Union}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, DataType, Union, Union}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:pool,), Tuple{Bool}}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:aa, :bb), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:aa, :bb), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:aa, :bb), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:aa, :bb), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:aa, :bb), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:aa, :bb), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:aa, :bb), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:aa, :bb), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:aa, :bb), Tuple{Int64, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:aa, :bb), Tuple{Int64, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:aa, :bb), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:aa, :bb), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:aa, :bb), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:aa, :bb), Tuple{Int64, String}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, String}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:aa, :bb), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}}, NamedTuple{(:aa, :bb), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Array{String, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol}, NamedTuple{(:decimal,), Tuple{Char}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Array{String, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Nothing, Char, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:decimal, :delim, :missingstring, :datarow, :header, :normalizenames), Tuple{Char, Char, String, Int64, Array{String, 1}, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}, Array{String, 1}, Bool})
precompile(Tuple{Type{Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, Union, Union, Union, Union, Union, Union}, Tuple{DataType, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base._isequal), Tuple{CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, NamedTuple{(:Date, :EONIA, Symbol("1m"), Symbol("12m"), Symbol("3m"), Symbol("6m"), Symbol("9m")), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:missingstring, :delim, :decimal), Tuple{String, Char, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:missingstring, :delim, :decimal), Tuple{String, Char, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:A, :B, :C), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C), Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C), Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:A, :B, :C), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C), Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, Union, Union}, Tuple{DataType, Union, Union}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:A, :B, :C), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e, :f), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Int64, Int64, Int64, Float64, String, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Int64, Int64, Int64, Float64, String, Union{Base.Missing, Float64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e, :f), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Float64, String, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c, :d, :e, :f), Tuple{Int64, Int64, Int64, Float64, String, Union{Base.Missing, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Float64, String, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, DataType, DataType, DataType, Union}, Tuple{DataType, DataType, DataType, DataType, Union}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, Union}, Tuple{DataType, DataType, DataType, DataType, DataType, Union}})
precompile(Tuple{typeof(Base._isequal), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, NamedTuple{(:a, :b, :c, :d, :e, :f), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Base.Missing, Float64, Float64, Float64, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Base.Missing, Float64, Float64, Float64, Float64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Base.Missing, Float64, Float64, Float64, Float64, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Base.Missing, Float64, Float64, Float64, Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._isequal), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}, NamedTuple{(:Column1, :Column2, :Column3, :Column4, :Column5, :Column6, :Column7, :Column8, :Column9, :Column10, :Column11, :Column12, :Column13, :Column14, :Column15, :Column16, :Column17, :Column18, :Column19, :Column20), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:_0, :_1, :_2, :_3, :_4, :_5, :_6, :_7, :_8, :_9, :_10, :_11, :_12, :_13, :_14, :_15, :_16, :_17, :_18, :_19, :_20, :_21, :_22, :_23, :_24, :_25, :_26, :_27, :_28, :_29, :_30, :_31, :_32, :_33, :_34, :_35, :_36, :_37, :_38, :_39, :_40, :_41, :_42, :_43, :_44, :_45, :_46, :_47, :_48, :_49), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}}, String, Array{Symbol, 1}, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{Int64, 1}, Nothing, Bool, Bool, Array{UInt64, 1}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Tables.schema), CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Tables.columntable), CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.:(|>)), CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, typeof(Tables.columntable)})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1,), Tuple{Union{Base.Missing, String}}}, CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:col1,), Tuple{Base.Missing}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1,), Tuple{Base.Missing}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1,), Tuple{CSV.Column{Base.Missing, Base.Missing}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1,), Tuple{CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1,), Tuple{Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1,), Tuple{CSV.Column{Base.Missing, Base.Missing}}}, NamedTuple{(:col1,), Tuple{Array{Base.Missing, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:transpose,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:col1, :col2), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2), Tuple{Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2), Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:transpose, :header), Tuple{Bool, Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Column1, :Column2, :Column3), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1, :Column2, :Column3), Tuple{Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:Column1, :Column2, :Column3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Array{String, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Array{String, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:transpose, :header), Tuple{Bool, Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.detecttranspose), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{String, 1}, Int64, Bool})
precompile(Tuple{Type{Tables.Schema{(:c1, :c2, :c3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:c1, :c2, :c3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:c1, :c2, :c3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:c1, :c2, :c3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:c1, :c2, :c3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:c1, :c2, :c3), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:c1, :c2, :c3), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:c1, :c2, :c3), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:c1, :c2, :c3), Tuple{Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:c1, :c2, :c3), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:c1, :c2, :c3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:c1, :c2, :c3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:c1, :c2, :c3), Tuple{Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:c1, :c2, :c3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:c1, :c2, :c3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:limit,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Float64, Float64}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:missingstrings,), Tuple{Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Char, Char, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Char, Char, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:missingstrings, :openquotechar, :closequotechar), Tuple{Array{String, 1}, Char, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:missingstrings, :openquotechar, :closequotechar), Tuple{Array{String, 1}, Char, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:truestrings, :falsestrings), Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:int, :bools), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:int, :bools), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:int, :bools), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:int, :bools), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:int, :bools), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:int, :bools), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:int, :bools), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:int, :bools), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Nothing, Bool, Bool})
precompile(Tuple{Type{Tables.Schema{(:int, :bools), Tuple{Int64, Bool}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:int, :bools), Tuple{Int64, Bool}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:int, :bools), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Bool, Bool}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:int, :bools), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Bool, Bool}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:int, :bools), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Bool, Bool}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:int, :bools), Tuple{Int64, Bool}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Bool}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:int, :bools), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Bool, Bool}}}, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(CSV, Symbol("#2#3")), Base.Pair{DataType, DataType}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Base.Dict{DataType, DataType}, getfield(CSV, Symbol("#2#3"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Generator{Base.Dict{DataType, DataType}, getfield(CSV, Symbol("#2#3"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Dict{DataType, DataType}, getfield(CSV, Symbol("#2#3"))}})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Nothing, Base.Dict{DataType, DataType}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:truestrings, :falsestrings, :typemap), Tuple{Array{String, 1}, Array{String, 1}, Base.Dict{DataType, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(CSV.typecode), Type{Bool}})
precompile(Tuple{typeof(CSV.typecode), Type{String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int8, Int8})
precompile(Tuple{Type{Base.Dict{Int8, Int8}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Int8}, Type{Int8}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int8, Int8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int8, Int8}, Int8})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int8, Int8}, Int8, Int8})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Int8, Int8}, Base.Generator{Base.Dict{DataType, DataType}, getfield(CSV, Symbol("#2#3"))}, Int64})
precompile(Tuple{Type{Tables.Schema{(:int, :bools), Tuple{Int64, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:int, :bools), Tuple{Int64, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:int, :bools), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:int, :bools), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:int, :bools), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:int, :bools), Tuple{Int64, String}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:int, :bools), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}}}, NamedTuple{(:int, :bools), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, String, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, String, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, Tuple{Ptr{UInt8}, Int64}, UInt8, Nothing, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64})
precompile(Tuple{typeof(CSV.readsplitline), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64, Bool})
precompile(Tuple{Type{CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}}}, String, Array{Symbol, 1}, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Array{Int64, 1}, Nothing, Bool, Bool, Array{UInt64, 1}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Tables.schema), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}}})
precompile(Tuple{typeof(Tables.columntable), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}}})
precompile(Tuple{typeof(Base.:(|>)), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}}, typeof(Tables.columntable)})
precompile(Tuple{Type{Tables.Schema{(:num1, :num2, :num3, :num4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:num1, :num2, :num3, :num4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:num1, :num2, :num3, :num4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:num1, :num2, :num3, :num4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Float64}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Date}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Time}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Bool}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, Tuple{Ptr{UInt8}, Int64}, Nothing}, Bool})
precompile(Tuple{Type{Tables.Schema{(:num1, :num2, :num3, :num4), Tuple{Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:num1, :num2, :num3, :num4), Tuple{Int64, Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:num1, :num2, :num3, :num4), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:num1, :num2, :num3, :num4), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:num1, :num2, :num3, :num4), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:num1, :num2, :num3, :num4), Tuple{Int64, Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:num1, :num2, :num3, :num4), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:num1, :num2, :num3, :num4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Int64, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:skipto,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:skipto,), Tuple{Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1, :Column2, :Column3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Base.Dict{Symbol, DataType}, Tuple{Symbol}, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Base.Dict{Symbol, DataType}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Base.Dict{Symbol, Union}, Tuple{Symbol}, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Symbol, Union}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.typecode), Type{Union{Base.Missing, Float64}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Union{Base.Missing, Float64}, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Union{Base.Missing, Float64}, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Float64}, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Union{Base.Missing, Float64}, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Float64}, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Float64}, Int64}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Float64}, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Int64, Int64}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64})
precompile(Tuple{typeof(CSV.readsplitline), Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{Type{CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}}, String, Array{Symbol, 1}, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Array{Int64, 1}, Nothing, Bool, Bool, Array{UInt64, 1}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Tables.schema), CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Tables.columntable), CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.:(|>)), CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, typeof(Tables.columntable)})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Float64}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Date}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Time}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Bool}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Bool})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Int64, Int64, Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c, :d, :e), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :c, :d, :e), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Int64, Int64, Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c, :d, :e), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, String, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, String, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}}, String, Array{Symbol, 1}, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Array{Int64, 1}, Tuple{Ptr{UInt8}, Int64}, Bool, Bool, Array{UInt64, 1}, Base.Dict{Symbol, Int64}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c), Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :c), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C, :D, :E), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:A, :B, :C, :D, :E), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Type{Base.Missing}, Type{Int64}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:A, :B, :C, :D, :E), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C, :D, :E), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:A, :B, :C, :D, :E), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, DataType, DataType, Union, Union}, Tuple{DataType, DataType, DataType, Union, Union}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, Union, Union}, Tuple{DataType, DataType, DataType, Union, Union}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:A, :B, :C, :D, :E), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Char, String, Bool}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:decimal, :dateformat, :pool), Tuple{Char, String, Bool}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Char, Nothing, Nothing, String, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Char, Nothing, Nothing, String, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Nothing, Nothing, String, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Char, Nothing, Nothing, String, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, String, Char, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Bool, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), Tuple{Char, Char, String, String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim, :decimal, :missingstring, :dateformat, :pool), Tuple{Char, Char, String, String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{Type{Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Nothing}}, NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}}, Array{String, 1}, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}, Bool, Bool})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64})
precompile(Tuple{typeof(CSV.readsplitline), Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Bool})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Bool})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(Parsers.xparse), Type{Dates.DateTime}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(CSV.parseint!), Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CSV.parsestring!), Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Array{Int8, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Float64}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Array{Tuple{Ptr{UInt8}, Int64}, 1}, UInt8, Dates.DateFormat{Symbol("yyyy-mm-dd HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{Type{Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Int64, Int64, Int64, Int64, Int64, String, String, Dates.DateTime, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, Float64, Float64, Int64, Int64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Int64, Int64, Int64, Int64, Int64, String, String, Dates.DateTime, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, Float64, Float64, Int64, Int64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64, Int64, String, String, Dates.DateTime, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, Float64, Float64, Int64, Int64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:regine_area, :main_no, :point_no, :param_key, :version_no_end, :station_name, :station_status_name, :dt_start_date, :dt_end_date, :percent_missing_days, :first_year_regulation, :start_year, :end_year, :aktuell_avrenningskart, :excluded_years, :tilgang, :latitude, :longitude, :utm_east_z33, :utm_north_z33, :regulation_part_area, :regulation_part_reservoirs, :transfer_area_in, :transfer_area_out, :drainage_basin_key, :area_norway, :area_total, :comment, :drainage_dens, :dt_registration_date, :dt_regul_date, :gradient_1085, :gradient_basin, :gradient_river, :height_minimum, :height_hypso_10, :height_hypso_20, :height_hypso_30, :height_hypso_40, :height_hypso_50, :height_hypso_60, :height_hypso_70, :height_hypso_80, :height_hypso_90, :height_maximum, :length_km_basin, :length_km_river, :ocean_polar_angle, :ocean_polar_distance, :perc_agricul, :perc_bog, :perc_eff_bog, :perc_eff_lake, :perc_forest, :perc_glacier, :perc_lake, :perc_mountain, :perc_urban, :prec_intens_max, :utm_zone_gravi, :utm_east_gravi, :utm_north_gravi, :utm_zone_inlet, :utm_east_inlet, :utm_north_inlet, :br1_middelavrenning_1930_1960, :br2_Tilsigsberegning, :br3_Regional_flomfrekvensanalyse, :br5_Regional_lavvannsanalyse, :br6_Klimastudier, :br7_Klimascenarier, :br9_Flomvarsling, :br11_FRIEND, :br12_GRDC, :br23_HBV, :br24_middelavrenning_1961_1990, :br26_TotalAvlop, :br31_FlomserierPrim, :br32_FlomserierSekundar, :br33_Flomkart_aktive_ureg, :br34_Hydrologisk_referanseserier_klimastudier, :br38_Flomkart_aktive_ureg_periode, :br39_Flomkart_nedlagt_stasjon), Tuple{Int64, Int64, Int64, Int64, Int64, String, String, Dates.DateTime, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, Float64, Float64, Int64, Int64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64, Int64, String, String, Dates.DateTime, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, String, Float64, Float64, Int64, Int64, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Dates.DateTime}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Union{Base.Missing, Float64}, Base.Missing, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Base.Missing, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, DataType, Union, Union, DataType, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, DataType, Union, Union, DataType, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._isequal), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:a, :b, :c, :a_1, :a_2, :a_3, :a_4, :b_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:event, :time, :typ), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:event, :time, :typ), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:event, :time, :typ), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:event, :time, :typ), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:event, :time, :typ), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:event, :time, :typ), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:event, :time, :typ), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:event, :time, :typ), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{InexactError}, Symbol, Any, Any})
precompile(Tuple{Type{Tables.Schema{(:event, :time, :typ), Tuple{String, String, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:event, :time, :typ), Tuple{String, String, String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:event, :time, :typ), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:event, :time, :typ), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:event, :time, :typ), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, String}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:event, :time, :typ), Tuple{String, String, String}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:event, :time, :typ), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}}}, NamedTuple{(:event, :time, :typ), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:pool,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Int64, Float64, Dates.Date, Dates.DateTime, Bool, String, String, Base.Missing}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Int64, Float64, Dates.Date, Dates.DateTime, Bool, String, String, Base.Missing}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Bool, Bool}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Bool, Bool}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Bool, Bool}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Float64, Dates.Date, Dates.DateTime, Bool, String, String, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Int64, Float64, Dates.Date, Dates.DateTime, Bool, String, String, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base._isequal), Tuple{CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Bool, Bool}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}, Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Float64, Float64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.DateTime, Dates.DateTime}, CSV.Column{Bool, Bool}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}}}, NamedTuple{(:int, :float, :date, :datetime, :bool, :string, :weakrefstring, :missing), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{String, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim, :ignorerepeated), Tuple{String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:A, :B), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:A, :B), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:A, :B), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B), Tuple{Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:A, :B), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B), Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:A, :B), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Float64, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Float64, Union{Base.Missing, Float64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Float64, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Float64, Union{Base.Missing, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Float64, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Float64, Union{Base.Missing, Float64}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Float64, Union{Base.Missing, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, Union}, Tuple{DataType, DataType, Union}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:col1, :col2, :col3), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:comment, :header), Tuple{String, Int64}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:comment, :header), Tuple{String, Int64}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:comment, :header), Tuple{String, Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:comment, :header), Tuple{String, Int64}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{String, String, String, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{String, String, String, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{String, String, String, Float64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, String, Float64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}, NamedTuple{(:FAMILY, :PERSON, :MARKER, :RATIO), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :_, :Column4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:a, :b, :_, :Column4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :_, :Column4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :_, :Column4), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Array{UInt64, 1}, Int64, UInt8, Bool, Array{String, 1}, Array{UInt8, 1}, UInt64})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :_, :Column4), Tuple{Int64, Int64, String, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :_, :Column4), Tuple{Int64, Int64, String, Union{Base.Missing, String}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :_, :Column4), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :_, :Column4), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :_, :Column4), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, String, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :_, :Column4), Tuple{Int64, Int64, String, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, String, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, Union}, Tuple{DataType, DataType, DataType, Union}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :_, :Column4), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}, NamedTuple{(:a, :b, :_, :Column4), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:A, :B, :C), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C), Tuple{Int64, Int64, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C), Tuple{Int64, Int64, Union{Base.Missing, Int64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:A, :B, :C), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C), Tuple{Int64, Int64, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Union{Base.Missing, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:A, :B, :C), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:normalizenames,), Tuple{Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:A, :B, :C), Tuple{String, Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B, :C), Tuple{String, Base.Missing, Base.Missing}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C), Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:A, :B, :C), Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:A, :B, :C), Tuple{String, Base.Missing, Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Base.Missing, Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:A, :B, :C), Tuple{CSV.Column{String, String}, CSV.Column{Base.Missing, Base.Missing}, CSV.Column{Base.Missing, Base.Missing}}}, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:A, :B, :C), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:delim,), Tuple{Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c, :d, :e), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :c, :d, :e), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c, :d, :e), Tuple{Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, Union, Union, Union, Union}, Tuple{DataType, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, Union, Union, Union, Union}, Tuple{DataType, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c, :d, :e), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow, :pool), Tuple{Int64, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Main.testfile), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:datarow, :pool), Tuple{Int64, Bool}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:Column1,), Tuple{String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:Column1,), Tuple{String}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:Column1,), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:Column1,), Tuple{CSV.Column{String, CSV.PooledString}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:Column1,), Tuple{CSV.Column{String, CSV.PooledString}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:Column1,), Tuple{String}}, Symbol})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:Column1,), Tuple{CSV.Column{String, CSV.PooledString}}}, NamedTuple{(:Column1,), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim, :ignorerepeated, :datarow, :header), Tuple{Char, Bool, Int64, Array{Symbol, 1}}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Array{Symbol, 1}, Bool})
precompile(Tuple{Type{Tables.Schema{(:t, :heat_flux), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:t, :heat_flux), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:t, :heat_flux), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:t, :heat_flux), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:t, :heat_flux), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:t, :heat_flux), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:t, :heat_flux), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:t, :heat_flux), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:t, :heat_flux), Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:t, :heat_flux), Tuple{Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:t, :heat_flux), T} where T<:Tuple}, Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:t, :heat_flux), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:t, :heat_flux), Tuple{CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:t, :heat_flux), Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(), Tuple{}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{Type{Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:timestamp, :condition_calibration_enabled, :condition_system_sensors_initialized, :condition_system_hotplug_timeout, :condition_system_returned_to_home, :condition_auto_mission_available, :condition_global_position_valid, :condition_home_position_valid, :condition_local_position_valid, :condition_local_velocity_valid, :condition_local_altitude_valid, :condition_power_input_valid, :condition_battery_healthy, :circuit_breaker_engaged_power_check, :circuit_breaker_engaged_airspd_check, :circuit_breaker_engaged_enginefailure_check, :circuit_breaker_engaged_gpsfailure_check, :circuit_breaker_flight_termination_disabled, :circuit_breaker_engaged_usb_check, :circuit_breaker_engaged_posfailure_check, :offboard_control_signal_found_once, :offboard_control_signal_lost, :offboard_control_set_by_command, :offboard_control_loss_timeout, :rc_signal_found_once, :rc_input_blocked, :rc_calibration_valid, :vtol_transition_failure, :usb_connected, :avoidance_system_required, :avoidance_system_valid), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:debug, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:debug, :normalizenames), Tuple{Bool, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Symbol, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Symbol, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any, Int64, Int64})
precompile(Tuple{Type{Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add!), Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Base.SizeUnknown, Int64})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int8, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int8, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int8, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int8, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int8, 1}})
precompile(Tuple{getfield(Mmap, Symbol("#3#5")){Int64, Ptr{Nothing}}, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Type, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Type, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Type, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Type, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Type, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Type, 1}})
precompile(Tuple{typeof(Base.string), Core.TypeName})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Type, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{String, String}}, Type{Symbol}, Type{CSV.Column{String, P} where P}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{String, P} where P}, Base.Dict{Symbol, CSV.Column{String, String}}})
precompile(Tuple{Type{Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{String, String, Int64, String, Int64, String, Int64, Dates.Date, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Float64}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{String, String, Int64, String, Int64, String, Int64, Dates.Date, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Float64}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{CSV.Column{String, String}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{CSV.Column{String, String}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Int64, Int64}, CSV.Column{String, CSV.PooledString}, CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Dates.Date}, Union{Base.Missing, Dates.Date}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, CSV.PooledString}}, CSV.Column{Union{Base.Missing, Int64}, Union{Base.Missing, Int64}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Int64, String, Int64, String, Int64, Dates.Date, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Float64}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads), Tuple{String, String, Int64, String, Int64, String, Int64, Dates.Date, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Float64}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Int64, String, Int64, String, Int64, Dates.Date, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Float64}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Dates.Date}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:dateformat,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:time, :value), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:time, :value), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:time, :value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:time, :value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:time, :value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:time, :value), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:time, :value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:time, :value), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:time, :value), Tuple{Dates.Time, Int64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:time, :value), Tuple{Dates.Time, Int64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:time, :value), T} where T<:Tuple}, Tuple{CSV.Column{Dates.Time, Dates.Time}, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:time, :value), Tuple{CSV.Column{Dates.Time, Dates.Time}, CSV.Column{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:time, :value), Tuple{CSV.Column{Dates.Time, Dates.Time}, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Type{Int64}, Type{Dates.Time}}, 1}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:time, :value), Tuple{Dates.Time, Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{Dates.Time, Int64}}}, Int64})
precompile(Tuple{typeof(Base.length), CSV.Column{Dates.Time, Dates.Time}})
precompile(Tuple{typeof(Base.isequal), CSV.Column{Dates.Time, Dates.Time}, Array{Dates.Time, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:time, :value), Tuple{CSV.Column{Dates.Time, Dates.Time}, CSV.Column{Int64, Int64}}}, NamedTuple{(:time, :value), Tuple{Array{Dates.Time, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Base.Dict{Int64, DataType}, Tuple{Symbol}, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Base.Dict{Int64, DataType}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header, :types), Tuple{Array{Symbol, 1}, Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c), Tuple{String, String, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b, :c), Tuple{String, String, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b, :c), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:a, :b, :c), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:a, :b, :c), Tuple{String, String, Float64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Float64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c), Tuple{CSV.Column{String, CSV.PooledString}, CSV.Column{String, String}, CSV.Column{Float64, Float64}}}, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:comment,), Tuple{String}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:fluid, :col2, :col3, :acentric_factor), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:fluid, :col2, :col3, :acentric_factor), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:fluid, :col2, :col3, :acentric_factor), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:fluid, :col2, :col3, :acentric_factor), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:fluid, :col2, :col3, :acentric_factor), Tuple{String, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:fluid, :col2, :col3, :acentric_factor), Tuple{String, Float64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:fluid, :col2, :col3, :acentric_factor), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:fluid, :col2, :col3, :acentric_factor), Tuple{String, Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Float64, Float64, Float64}}}, Int64})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}, NamedTuple{(:fluid, :col2, :col3, :acentric_factor), Tuple{Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Tuple{Ptr{UInt8}, Int64}, Bool, Array{Symbol, 1}, Int64})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, String, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, String, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:comment, :header), Tuple{String, Array{Symbol, 1}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:eats_steak, :how_cooked), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:eats_steak, :how_cooked), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:eats_steak, :how_cooked), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:eats_steak, :how_cooked), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:eats_steak, :how_cooked), Tuple{String, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:eats_steak, :how_cooked), Tuple{String, Union{Base.Missing, String}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:eats_steak, :how_cooked), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:eats_steak, :how_cooked), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:eats_steak, :how_cooked), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:eats_steak, :how_cooked), Tuple{String, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, Union}, Tuple{DataType, Union}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:eats_steak, :how_cooked), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}, NamedTuple{(:eats_steak, :how_cooked), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Bool, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Type{CSV.Rows{transpose, O} where O where transpose}, String})
precompile(Tuple{typeof(CSV.file), String, Bool, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:header, :ignorerepeated, :delim), Tuple{Bool, Bool, Char}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Bool, Bool})
precompile(Tuple{Type{Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{String, String, Float64, Int64, String, Float64, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{String, String, Float64, Int64, String, Float64, Float64, Float64, Float64}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, String, Float64, Int64, String, Float64, Float64, Float64, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{String, String, Float64, Int64, String, Float64, Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base._isequal), Tuple{CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{CSV.Column{String, String}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Int64, Int64}, CSV.Column{String, String}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}, CSV.Column{Float64, Float64}}}, NamedTuple{(:RESULTAT, :NOM_CHAM, :INST, :NUME_ORDRE, :NOEUD, :COOR_X, :COOR_Y, :COOR_Z, :TEMP), Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), String, typeof(Main.testfile), String, NamedTuple{(:delim, :ignoreemptylines), Tuple{String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{typeof(Main.testfile), String, NamedTuple{(:delim, :ignoreemptylines), Tuple{String, Bool}}, Tuple{Int64, Int64}, Type{T} where T, Nothing})
precompile(Tuple{Type{Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.allocatecolumns), Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Int64})
precompile(Tuple{typeof(Tables.buildcolumns), Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.CopiedColumns{NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Tables.CopiedColumns{NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{Type{Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{String, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{String, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), T} where T<:Tuple}, Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}}})
precompile(Tuple{typeof(Tables.schema), NamedTuple{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{CSV.Column{String, String}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}, CSV.Column{Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(Symbol("Time (CEST)"), :Latitude, :Longitude, :Course, :kts, :mph, :feet, :Rate, Symbol("Reporting Facility")), Tuple{String, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#5#6")){Tuple{String, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base._eq), Tuple{DataType, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{DataType, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base.:(==)), Tuple{DataType, Union, Union, Union, Union, Union, Union, Union, Union}, Tuple{DataType, Union, Union, Union, Union, Union, Union, Union, Union}})
precompile(Tuple{typeof(Base.filter), getfield(FilePathsBase, Symbol("#4#5")){String}, Array{DataType, 1}})
precompile(Tuple{getfield(FilePathsBase, Symbol("##Path#3")), Bool, typeof(FilePathsBase.Path), String})
precompile(Tuple{typeof(FilePathsBase.Path), String})
precompile(Tuple{getfield(FilePathsBase, Symbol("#4#5")){String}, Type{T} where T})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Base.SubString{String}, 1}, Type{String}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, Type{String}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{FilePathsBase.PosixPath}, String})
precompile(Tuple{Type{NamedTuple{(:dir,), T} where T<:Tuple}, Tuple{FilePathsBase.PosixPath}})
precompile(Tuple{typeof(Base.join), FilePathsBase.PosixPath, String})
precompile(Tuple{typeof(Base.getproperty), FilePathsBase.PosixPath, Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, FilePathsBase.PosixPath})
precompile(Tuple{typeof(Base.print_to_string), FilePathsBase.PosixPath})
precompile(Tuple{Type{FilePathsBase.User}, UInt64})
precompile(Tuple{Type{FilePathsBase.Status}, Base.Filesystem.StatStruct})
precompile(Tuple{getfield(CSV, Symbol("##Rows#47")), Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Bool, Bool, Bool, Bool, Bool, Base.Iterators.Pairs{Symbol, Base.Dict{Int64, DataType}, Tuple{Symbol}, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}}, Type{CSV.Rows{transpose, O} where O where transpose}, FilePathsBase.PosixPath})
precompile(Tuple{typeof(CSV.file), FilePathsBase.PosixPath, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Base.Dict{Int64, DataType}, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("##testfile#5")), FilePathsBase.PosixPath, typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("#kw##testfile")), NamedTuple{(:dir,), Tuple{FilePathsBase.PosixPath}}, typeof(Main.testfile), String, NamedTuple{(:types,), Tuple{Base.Dict{Int64, DataType}}}, Tuple{Int64, Int64}, Type{T} where T, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(FilePathsBase.Path), FilePathsBase.PosixPath, Tuple{String, String, String, String, String, String, String, String, String, String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(FilePathsBase, Symbol("#6#7")){FilePathsBase.PosixPath, Tuple{String, String, String, String, String, String, String, String, String, String, String}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Symbol, Symbol}, getfield(FilePathsBase, Symbol("#6#7")){FilePathsBase.PosixPath, Tuple{String, String, String, String, String, String, String, String, String, String, String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Symbol, Symbol}, getfield(FilePathsBase, Symbol("#6#7")){FilePathsBase.PosixPath, Tuple{String, String, String, String, String, String, String, String, String, String, String}}}, Int64})
precompile(Tuple{Type{FilePathsBase.PosixPath}, Tuple{String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String, String, String, String, String, String, String, String, String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String, String, String, String, String, String, String, String}, String})
precompile(Tuple{typeof(Base.map), Function, Array{CSV.Row{false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#14#197")), Array{CSV.Row{false}, 1}})
precompile(Tuple{typeof(Base._collect), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#14#197"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#14#197"))}})
precompile(Tuple{typeof(Base._similar_for), Array{CSV.Row{false}, 1}, Type{Int64}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#14#197"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#14#197"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#14#197"))}, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#15#198")), Array{CSV.Row{false}, 1}})
precompile(Tuple{typeof(Base._collect), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#15#198"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#15#198"))}})
precompile(Tuple{typeof(Base._similar_for), Array{CSV.Row{false}, 1}, Type{Int64}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#15#198"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#15#198"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#15#198"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#16#199")), Array{CSV.Row{false}, 1}})
precompile(Tuple{typeof(Base._collect), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#16#199"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#16#199"))}})
precompile(Tuple{typeof(Base._similar_for), Array{CSV.Row{false}, 1}, Type{Int64}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#16#199"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#16#199"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#16#199"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#17#200")), Array{CSV.Row{false}, 1}})
precompile(Tuple{typeof(Base._collect), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#17#200"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#17#200"))}})
precompile(Tuple{typeof(Base._similar_for), Array{CSV.Row{false}, 1}, Type{Base.Missing}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#17#200"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#17#200"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#17#200"))}, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Base.Missing, 1}, Array{Base.Missing, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#18#201")), Array{CSV.Row{false}, 1}})
precompile(Tuple{typeof(Base._collect), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#18#201"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Row{false}, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#18#201"))}})
precompile(Tuple{typeof(Base._similar_for), Array{CSV.Row{false}, 1}, Type{Base.Missing}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#18#201"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#18#201"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{CSV.Row{false}, 1}, getfield(Main, Symbol("#18#201"))}, Int64})
precompile(Tuple{typeof(Base.map), Function, CSV.File{false}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#19#202")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#19#202"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#19#202"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#19#202"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#19#202"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#19#202"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#20#203")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#20#203"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#20#203"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#20#203"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#20#203"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#20#203"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#21#204")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#21#204"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#21#204"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#21#204"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#21#204"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#21#204"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#22#205")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#22#205"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#22#205"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#22#205"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#22#205"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#22#205"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#23#206")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#23#206"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#23#206"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#23#206"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#23#206"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#23#206"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#24#207")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#24#207"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#24#207"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#24#207"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#24#207"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#24#207"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Int64}, Vararg{Tuple{Int64, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Int64}, 1}, Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#25#208")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#25#208"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#25#208"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#25#208"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#25#208"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#25#208"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#26#209")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#26#209"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#26#209"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#26#209"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#26#209"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#26#209"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#27#210")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#27#210"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#27#210"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#27#210"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#27#210"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Base.Missing}, 1}, Tuple{Base.Missing, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#27#210"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Base.Missing, Base.Missing}, Vararg{Tuple{Base.Missing, Base.Missing, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Base.Missing, Base.Missing}, 1}, Array{Tuple{Base.Missing, Base.Missing, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#28#211")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#28#211"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#28#211"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#28#211"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#28#211"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Base.Missing}, 1}, Tuple{Base.Missing, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#28#211"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#29#212")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#29#212"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#29#212"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#29#212"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#29#212"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#29#212"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Base.Missing}, Vararg{Tuple{Int64, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Base.Missing}, 1}, Array{Tuple{Int64, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#30#213")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#30#213"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#30#213"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#30#213"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#30#213"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#30#213"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#31#214")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#31#214"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#31#214"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#31#214"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#31#214"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#31#214"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#32#215")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#32#215"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#32#215"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#32#215"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#32#215"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#32#215"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#33#216")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#33#216"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#33#216"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#33#216"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#33#216"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#33#216"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#34#217")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#34#217"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#34#217"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#34#217"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#34#217"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#34#217"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#35#218")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#35#218"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#35#218"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#35#218"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#35#218"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#35#218"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Int64}, Vararg{Tuple{Base.Missing, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Int64}, 1}, Array{Tuple{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#36#219")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#36#219"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#36#219"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#36#219"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#36#219"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#36#219"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#37#220")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#37#220"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#37#220"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#37#220"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#37#220"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#37#220"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#38#221")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#38#221"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#38#221"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#38#221"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#38#221"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#38#221"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#39#222")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#39#222"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#39#222"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#39#222"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#39#222"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#39#222"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#40#223")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#40#223"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#40#223"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#40#223"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#40#223"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#40#223"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#41#224")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#41#224"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#41#224"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#41#224"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#41#224"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#41#224"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64}, 1}, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#42#225")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#42#225"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#42#225"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#42#225"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#42#225"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#42#225"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#43#226")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#43#226"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#43#226"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#43#226"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#43#226"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#43#226"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#44#227")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#44#227"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#44#227"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#44#227"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#44#227"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#44#227"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#45#228")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#45#228"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#45#228"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#45#228"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#45#228"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#45#228"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#46#229")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#46#229"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#46#229"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#46#229"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#46#229"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#46#229"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#47#230")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#47#230"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#47#230"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#47#230"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#47#230"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#47#230"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#48#231")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#48#231"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#48#231"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#48#231"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#48#231"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#48#231"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#49#232")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#49#232"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#49#232"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#49#232"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#49#232"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#49#232"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#50#233")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#50#233"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#50#233"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#50#233"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#50#233"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#50#233"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#51#234")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#51#234"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#51#234"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#51#234"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#51#234"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#51#234"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#52#235")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#52#235"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#52#235"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#52#235"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#52#235"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#52#235"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#53#236")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#53#236"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#53#236"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#53#236"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#53#236"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#53#236"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Int64, Base.Missing}, Vararg{Tuple{Int64, Int64, Int64, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#54#237")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#54#237"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#54#237"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#54#237"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#54#237"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#54#237"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#55#238")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#55#238"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#55#238"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#55#238"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#55#238"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#55#238"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#56#239")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#56#239"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#56#239"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#56#239"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#56#239"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#56#239"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#57#240")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#57#240"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#57#240"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#57#240"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#57#240"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#57#240"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#58#241")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#58#241"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#58#241"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#58#241"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#58#241"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#58#241"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#59#242")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#59#242"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#59#242"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#59#242"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#59#242"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#59#242"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Base.Missing, Int64}, Vararg{Tuple{Int64, Int64, Base.Missing, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#60#243")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#60#243"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#60#243"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#60#243"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#60#243"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#60#243"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#61#244")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#61#244"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#61#244"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#61#244"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#61#244"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#61#244"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#62#245")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#62#245"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#62#245"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#62#245"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#62#245"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#62#245"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#63#246")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#63#246"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#63#246"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#63#246"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#63#246"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#63#246"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#64#247")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#64#247"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#64#247"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#64#247"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#64#247"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#64#247"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#65#248")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#65#248"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#65#248"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#65#248"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#65#248"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#65#248"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Base.Missing, Int64, Int64}, Vararg{Tuple{Int64, Base.Missing, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#66#249")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#66#249"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#66#249"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#66#249"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#66#249"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#66#249"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#67#250")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#67#250"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#67#250"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#67#250"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#67#250"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#67#250"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#68#251")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#68#251"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#68#251"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#68#251"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#68#251"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#68#251"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#69#252")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#69#252"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#69#252"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#69#252"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#69#252"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#69#252"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#70#253")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#70#253"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#70#253"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#70#253"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#70#253"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#70#253"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#71#254")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#71#254"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#71#254"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#71#254"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#71#254"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#71#254"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Int64, Int64, Int64}, Vararg{Tuple{Base.Missing, Int64, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#72#255")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#72#255"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#72#255"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#72#255"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#72#255"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#72#255"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#73#256")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#73#256"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#73#256"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#73#256"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#73#256"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#73#256"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#74#257")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#74#257"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#74#257"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#74#257"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#74#257"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#74#257"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#75#258")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#75#258"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#75#258"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#75#258"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#75#258"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#75#258"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#76#259")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#76#259"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#76#259"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#76#259"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#76#259"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#76#259"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#77#260")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#77#260"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#77#260"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#77#260"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#77#260"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#77#260"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Vararg{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#78#261")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#78#261"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#78#261"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#78#261"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#78#261"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#78#261"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#79#262")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#79#262"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#79#262"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#79#262"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#79#262"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#79#262"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#80#263")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#80#263"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#80#263"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#80#263"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#80#263"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#80#263"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#81#264")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#81#264"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#81#264"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#81#264"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#81#264"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#81#264"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#82#265")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#82#265"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#82#265"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#82#265"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#82#265"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#82#265"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#83#266")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#83#266"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#83#266"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#83#266"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#83#266"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#83#266"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Vararg{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#84#267")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#84#267"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#84#267"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#84#267"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#84#267"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#84#267"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#85#268")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#85#268"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#85#268"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#85#268"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#85#268"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#85#268"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#86#269")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#86#269"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#86#269"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#86#269"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#86#269"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#86#269"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#87#270")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#87#270"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#87#270"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#87#270"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#87#270"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#87#270"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#88#271")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#88#271"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#88#271"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#88#271"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#88#271"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#88#271"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#89#272")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#89#272"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#89#272"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#89#272"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#89#272"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#89#272"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Vararg{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#90#273")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#90#273"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#90#273"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#90#273"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#90#273"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#90#273"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#91#274")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#91#274"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#91#274"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#91#274"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#91#274"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#91#274"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#92#275")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#92#275"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#92#275"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#92#275"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#92#275"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#92#275"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#93#276")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#93#276"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#93#276"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#93#276"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#93#276"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#93#276"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#94#277")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#94#277"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#94#277"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#94#277"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#94#277"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#94#277"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#95#278")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#95#278"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#95#278"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#95#278"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#95#278"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#95#278"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Vararg{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#96#279")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#96#279"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#96#279"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#96#279"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#96#279"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#96#279"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#97#280")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#97#280"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#97#280"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#97#280"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#97#280"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#97#280"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#98#281")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#98#281"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#98#281"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#98#281"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#98#281"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#98#281"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#99#282")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#99#282"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#99#282"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#99#282"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#99#282"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#99#282"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#100#283")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#100#283"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#100#283"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#100#283"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#100#283"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#100#283"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#101#284")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#101#284"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#101#284"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#101#284"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#101#284"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#101#284"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#102#285")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#102#285"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#102#285"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#102#285"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#102#285"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#102#285"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#103#286")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#103#286"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#103#286"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#103#286"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#103#286"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#103#286"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#104#287")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#104#287"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#104#287"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#104#287"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#104#287"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#104#287"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#105#288")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#105#288"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#105#288"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#105#288"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#105#288"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#105#288"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#106#289")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#106#289"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#106#289"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#106#289"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#106#289"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#106#289"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#107#290")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#107#290"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#107#290"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#107#290"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#107#290"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#107#290"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Vararg{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#108#291")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#108#291"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#108#291"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#108#291"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#108#291"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#108#291"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#109#292")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#109#292"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#109#292"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#109#292"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#109#292"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#109#292"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#110#293")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#110#293"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#110#293"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#110#293"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#110#293"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#110#293"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#111#294")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#111#294"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#111#294"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#111#294"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#111#294"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#111#294"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#112#295")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#112#295"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#112#295"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#112#295"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#112#295"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#112#295"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#113#296")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#113#296"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#113#296"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#113#296"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#113#296"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#113#296"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Vararg{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#114#297")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#114#297"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#114#297"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#114#297"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#114#297"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#114#297"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#115#298")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#115#298"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#115#298"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#115#298"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#115#298"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#115#298"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#116#299")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#116#299"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#116#299"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#116#299"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#116#299"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#116#299"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#117#300")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#117#300"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#117#300"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#117#300"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#117#300"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#117#300"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#118#301")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#118#301"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#118#301"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#118#301"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#118#301"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#118#301"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#119#302")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#119#302"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#119#302"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#119#302"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#119#302"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#119#302"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Vararg{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#120#303")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#120#303"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#120#303"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#120#303"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#120#303"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#120#303"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#121#304")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#121#304"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#121#304"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#121#304"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#121#304"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#121#304"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#122#305")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#122#305"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#122#305"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#122#305"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#122#305"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#122#305"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#123#306")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#123#306"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#123#306"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#123#306"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#123#306"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#123#306"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#124#307")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#124#307"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#124#307"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#124#307"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#124#307"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#124#307"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#125#308")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#125#308"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#125#308"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#125#308"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#125#308"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#125#308"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#126#309")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#126#309"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#126#309"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#126#309"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#126#309"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#126#309"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#127#310")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#127#310"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#127#310"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#127#310"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#127#310"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#127#310"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#128#311")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#128#311"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#128#311"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#128#311"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#128#311"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#128#311"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#129#312")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#129#312"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#129#312"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#129#312"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#129#312"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#129#312"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#130#313")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#130#313"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#130#313"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#130#313"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#130#313"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#130#313"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#131#314")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#131#314"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#131#314"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#131#314"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#131#314"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#131#314"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#132#315")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#132#315"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#132#315"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#132#315"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#132#315"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#132#315"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#133#316")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#133#316"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#133#316"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#133#316"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#133#316"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#133#316"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#134#317")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#134#317"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#134#317"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#134#317"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#134#317"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#134#317"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#135#318")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#135#318"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#135#318"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#135#318"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#135#318"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#135#318"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#136#319")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#136#319"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#136#319"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#136#319"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#136#319"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#136#319"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#137#320")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#137#320"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#137#320"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#137#320"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#137#320"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#137#320"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Vararg{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#138#321")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#138#321"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#138#321"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#138#321"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#138#321"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#138#321"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#139#322")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#139#322"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#139#322"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#139#322"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#139#322"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#139#322"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#140#323")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#140#323"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#140#323"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#140#323"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#140#323"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#140#323"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#141#324")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#141#324"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#141#324"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#141#324"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#141#324"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#141#324"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#142#325")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#142#325"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#142#325"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#142#325"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#142#325"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#142#325"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#143#326")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#143#326"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#143#326"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#143#326"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#143#326"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#143#326"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Vararg{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#144#327")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#144#327"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#144#327"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#144#327"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#144#327"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#144#327"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#145#328")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#145#328"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#145#328"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#145#328"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#145#328"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#145#328"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#146#329")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#146#329"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#146#329"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#146#329"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#146#329"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#146#329"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#147#330")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#147#330"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#147#330"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#147#330"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#147#330"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#147#330"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#148#331")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#148#331"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#148#331"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#148#331"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#148#331"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#148#331"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#149#332")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#149#332"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#149#332"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#149#332"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#149#332"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#149#332"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#150#333")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#150#333"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#150#333"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#150#333"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#150#333"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#150#333"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#151#334")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#151#334"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#151#334"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#151#334"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#151#334"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#151#334"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#152#335")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#152#335"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#152#335"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#152#335"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#152#335"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#152#335"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#153#336")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#153#336"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#153#336"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#153#336"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#153#336"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#153#336"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#154#337")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#154#337"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#154#337"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#154#337"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#154#337"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, 1}, Tuple{Int64, Base.Missing, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#154#337"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#155#338")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#155#338"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#155#338"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#155#338"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#155#338"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#155#338"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#156#339")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#156#339"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#156#339"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#156#339"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#156#339"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#156#339"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#157#340")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#157#340"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#157#340"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#157#340"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#157#340"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#157#340"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#158#341")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#158#341"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#158#341"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#158#341"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#158#341"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#158#341"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#159#342")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#159#342"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#159#342"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#159#342"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#159#342"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#159#342"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#160#343")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#160#343"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#160#343"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#160#343"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#160#343"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#160#343"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#161#344")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#161#344"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#161#344"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#161#344"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#161#344"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#161#344"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#162#345")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#162#345"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#162#345"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#162#345"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#162#345"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#162#345"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#163#346")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#163#346"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#163#346"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#163#346"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#163#346"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#163#346"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#164#347")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#164#347"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#164#347"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#164#347"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#164#347"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#164#347"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#165#348")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#165#348"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#165#348"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#165#348"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#165#348"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#165#348"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#166#349")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#166#349"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#166#349"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#166#349"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#166#349"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#166#349"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#167#350")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#167#350"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#167#350"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#167#350"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#167#350"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#167#350"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Vararg{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#168#351")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#168#351"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#168#351"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#168#351"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#168#351"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#168#351"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#169#352")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#169#352"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#169#352"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#169#352"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#169#352"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#169#352"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#170#353")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#170#353"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#170#353"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#170#353"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#170#353"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#170#353"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#171#354")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#171#354"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#171#354"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#171#354"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#171#354"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#171#354"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#172#355")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#172#355"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#172#355"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#172#355"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#172#355"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#172#355"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#173#356")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#173#356"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#173#356"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#173#356"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#173#356"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#173#356"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#174#357")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#174#357"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#174#357"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#174#357"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#174#357"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#174#357"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#175#358")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#175#358"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#175#358"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#175#358"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#175#358"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#175#358"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#176#359")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#176#359"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#176#359"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#176#359"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#176#359"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#176#359"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#177#360")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#177#360"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#177#360"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#177#360"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#177#360"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#177#360"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#178#361")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#178#361"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#178#361"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#178#361"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#178#361"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Base.Missing}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#178#361"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#179#362")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#179#362"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#179#362"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#179#362"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#179#362"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#179#362"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#180#363")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#180#363"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#180#363"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#180#363"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#180#363"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#180#363"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#181#364")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#181#364"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#181#364"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#181#364"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#181#364"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#181#364"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#182#365")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#182#365"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#182#365"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#182#365"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#182#365"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#182#365"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#183#366")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#183#366"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#183#366"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#183#366"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#183#366"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#183#366"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#184#367")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#184#367"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#184#367"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#184#367"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#184#367"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Base.Missing, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#184#367"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#185#368")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#185#368"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#185#368"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#185#368"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#185#368"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#185#368"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#186#369")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#186#369"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#186#369"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#186#369"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#186#369"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#186#369"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#187#370")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#187#370"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#187#370"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#187#370"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#187#370"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#187#370"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#188#371")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#188#371"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#188#371"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#188#371"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#188#371"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#188#371"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#189#372")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#189#372"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#189#372"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#189#372"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#189#372"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#189#372"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#190#373")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#190#373"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#190#373"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#190#373"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#190#373"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, 1}, Tuple{Base.Missing, Int64, Base.Missing, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#190#373"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#191#374")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#191#374"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#191#374"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#191#374"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#191#374"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#191#374"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#192#375")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#192#375"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#192#375"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#192#375"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#192#375"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#192#375"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#193#376")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#193#376"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#193#376"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#193#376"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#193#376"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#193#376"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#194#377")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#194#377"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#194#377"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#194#377"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#194#377"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#194#377"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#195#378")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#195#378"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#195#378"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#195#378"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#195#378"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#195#378"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#196#379")), CSV.File{false}})
precompile(Tuple{typeof(Base._collect), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#196#379"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), CSV.File{false}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#196#379"))}})
precompile(Tuple{typeof(Base._similar_for), CSV.File{false}, Type{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#196#379"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#196#379"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Int64, Int64, Int64}, Base.Generator{CSV.File{false}, getfield(Main, Symbol("#196#379"))}, Int64})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String, Expr, Vararg{Expr, N} where N})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Expr}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Expr}})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, String, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64})
precompile(Tuple{Type{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(Tables, Symbol("##s12#7")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.check), Base.CodeUnits{UInt8, String}, Int64, UInt8, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim,), Tuple{Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol}, NamedTuple{(:delim,), Tuple{Char}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim,), Tuple{String}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), String, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:delim,), Tuple{String}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, Tuple{UInt8, UInt8}, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, String, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, String, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, CSV.Options{Tuple{UInt8, UInt8}, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.check), Base.CodeUnits{UInt8, String}, Int64, Tuple{UInt8, UInt8}, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, String, CSV.Options{Tuple{UInt8, UInt8}, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, String, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{Tuple{UInt8, UInt8}, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, String, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}}, CSV.Options{Tuple{UInt8, UInt8}, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{Tuple{UInt8, UInt8}, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:header,), Tuple{Array{Symbol, 1}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:header,), Tuple{Array{Symbol, 1}}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:header,), Tuple{Array{Symbol, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{Symbol, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:header,), Tuple{Array{Symbol, 1}}}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:header,), Tuple{Array{String, 1}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:header,), Tuple{Array{String, 1}}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:header,), Tuple{Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:header,), Tuple{Array{String, 1}}}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Array{String, 1}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{Type{NamedTuple{(:writeheader,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:writeheader,), Tuple{Bool}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:writeheader,), Tuple{Bool}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:writeheader,), Tuple{Bool}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:writeheader,), Tuple{Bool}}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{Type{NamedTuple{(:writeheader, :bom), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:writeheader, :bom), Tuple{Bool, Bool}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:writeheader, :bom), Tuple{Bool, Bool}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(CSV.writebom), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(WeakRefStrings._setindex!), WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, String, Int64})
precompile(Tuple{typeof(Base.convert), Type{WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}}, Array{String, 1}})
precompile(Tuple{Type{WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 1}, Array{String, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}}, Array{String, 1}, Base.Dict{String, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, C, U, U} where U where U where C}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}, Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(Base.allunique), Array{String, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#11#12")){Array{String, 1}}, String})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.union!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{String, Nothing}, String})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{String}}, Array{String, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}, Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{String, UInt32}, Array{String, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt32}, Int64, String})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, C, U, U} where U where U where C}, Array{String, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, C, U, U} where U where U where C}, Array{String, 1}})
precompile(Tuple{typeof(Base.vect), Dates.Date, Vararg{Dates.Date, N} where N})
precompile(Tuple{Type{Dates.DateTime}, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Dates.DateTime, Vararg{Dates.DateTime, N} where N})
precompile(Tuple{typeof(Base.getindex), WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, Int64})
precompile(Tuple{typeof(Base.vect), WeakRefStrings.WeakRefString{UInt8}, Vararg{WeakRefStrings.WeakRefString{UInt8}, N} where N})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), T} where T<:Tuple}, Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Bool, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{WeakRefStrings.WeakRefString{UInt8}, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Bool, Float64, Float64, Dates.Date, Dates.DateTime, String, WeakRefStrings.WeakRefString{UInt8}, WeakRefStrings.WeakRefString{UInt8}, CategoricalArrays.CategoricalString{UInt32}}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Bool, Float64, Float64, Dates.Date, Dates.DateTime, String, WeakRefStrings.WeakRefString{UInt8}, WeakRefStrings.WeakRefString{UInt8}, CategoricalArrays.CategoricalString{UInt32}}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Date, Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.Date, Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}, Int64})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Date, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}, Int64})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.check), Base.CodeUnits{UInt8, WeakRefStrings.WeakRefString{UInt8}}, Int64, UInt8, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, WeakRefStrings.WeakRefString{UInt8}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Bool, Float64, Float64, Dates.Date, Dates.DateTime, String, WeakRefStrings.WeakRefString{UInt8}, WeakRefStrings.WeakRefString{UInt8}, CategoricalArrays.CategoricalString{UInt32}}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Bool, Float64, Float64, Dates.Date, Dates.DateTime, String, WeakRefStrings.WeakRefString{UInt8}, WeakRefStrings.WeakRefString{UInt8}, CategoricalArrays.CategoricalString{UInt32}}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3, :col4, :col5, :col6, :col7, :col8, :col9), Tuple{Array{Bool, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}, Array{String, 1}, Array{WeakRefStrings.WeakRefString{UInt8}, 1}, WeakRefStrings.StringArray{WeakRefStrings.WeakRefString{UInt8}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{Type{NamedTuple{(:col4, :col5), T} where T<:Tuple}, Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:dateformat,), Tuple{String}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col4, :col5), Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, String, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col4, :col5), Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col4, :col5), Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:dateformat,), Tuple{String}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, String, Bool, Tuple{}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col4, :col5), Tuple{Dates.Date, Dates.DateTime}}, Tables.RowIterator{NamedTuple{(:col4, :col5), Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, String, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col4, :col5), Tuple{Dates.Date, Dates.DateTime}}, Tables.RowIterator{NamedTuple{(:col4, :col5), Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, String, Tuple{}}})
precompile(Tuple{getfield(Dates, Symbol("##format#33")), Dates.DateLocale, typeof(Dates.format), Dates.Date, String})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Date, CSV.Options{UInt8, UInt8, String, Tuple{}}})
precompile(Tuple{getfield(Dates, Symbol("##format#33")), Dates.DateLocale, typeof(Dates.format), Dates.DateTime, String})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, CSV.Options{UInt8, UInt8, String, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col4, :col5), Tuple{Dates.Date, Dates.DateTime}}, Tables.RowIterator{NamedTuple{(:col4, :col5), Tuple{Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}, CSV.Options{UInt8, UInt8, String, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, String, CSV.Options{UInt8, UInt8, String, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, String, Tuple{}}})
precompile(Tuple{Type{Dates.DateFormat{Symbol("mm/dd/yyyy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}}, Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Date, Dates.DateFormat{Symbol("mm/dd/yyyy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.Date, Dates.DateFormat{Symbol("mm/dd/yyyy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}, Int64})
precompile(Tuple{typeof(Dates.format), Dates.Date, Dates.DateFormat{Symbol("mm/dd/yyyy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("mm/dd/yyyy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("mm/dd/yyyy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}, Int64})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("mm/dd/yyyy"), Tuple{Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Base.Missing, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:missingstring,), Tuple{String}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:missingstring,), Tuple{String}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{UInt8, UInt8}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Missing, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Union{Base.Missing, Int64}, Base.Missing, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{UInt8, UInt8}}})
precompile(Tuple{Type{NamedTuple{(:col1,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:escapechar,), Tuple{Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1,), Tuple{Array{String, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1,), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1,), Tuple{Array{String, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol}, NamedTuple{(:escapechar,), Tuple{Char}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1,), Tuple{String}}, Tables.RowIterator{NamedTuple{(:col1,), Tuple{Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1,), Tuple{String}}, Tables.RowIterator{NamedTuple{(:col1,), Tuple{Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1,), Tuple{String}}, Tables.RowIterator{NamedTuple{(:col1,), Tuple{Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{Type{NamedTuple{(:openquotechar, :closequotechar, :escapechar), T} where T<:Tuple}, Tuple{Char, Char, Char}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:openquotechar, :closequotechar, :escapechar), Tuple{Char, Char, Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Char, Char, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1,), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1,), Tuple{Array{String, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:openquotechar, :closequotechar, :escapechar), Tuple{Char, Char, Char}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:append,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:append,), Tuple{Bool}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:append,), Tuple{Bool}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:append,), Tuple{Bool}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:append,), Tuple{Bool}}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), String})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), String, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, String}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.IOStream, UInt8})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#62#63")){getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(CSV, Symbol("#62#63")){getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.IOStream, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#278#279")){Tuple{}}, String})
precompile(Tuple{typeof(Base.read), String})
precompile(Tuple{typeof(Base.Filesystem.rm), String})
precompile(Tuple{typeof(CSV.write), FilePathsBase.PosixPath})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), FilePathsBase.PosixPath, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, FilePathsBase.PosixPath}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, FilePathsBase.PosixPath, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, FilePathsBase.PosixPath, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.join), Tuple{String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.read), FilePathsBase.PosixPath})
precompile(Tuple{typeof(Base.Filesystem.rm), FilePathsBase.PosixPath})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.IOStream, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("#380#384")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#380#384")), String, Vararg{String, N} where N})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.IOStream, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.IOStream, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.IOStream})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{String, 1}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:append, :writeheader), Tuple{Bool, Bool}}}, typeof(CSV.write), Base.IOStream, NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(Main, Symbol("#381#385")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#381#385")), String, Vararg{String, N} where N})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:A, :B, :C), Tuple{Int64, Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{String, 1}}}}, Base.IOStream, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:append, :writeheader), Tuple{Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:A, :B, :C), Tuple{Int64, Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{String, 1}}}}, Base.IOStream, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Tables.Schema{(:A, :B, :C), Tuple{Int64, Int64, String}}, Tables.ColumnsRow{NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{String, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:A, :B, :C), Tuple{Int64, Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.IOStream})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Float64, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Float64, Base.Missing, String}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Float64, String}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, NamedTuple{(:a, :b, :c), Tuple{Float64, Base.Missing, String}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b, :c), Tuple{Float64, Base.Missing, String}}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}}, Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}})
precompile(Tuple{Type{Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, Tuple{NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, NamedTuple{(:a, :b, :c), Tuple{Float64, Base.Missing, String}}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}}})
precompile(Tuple{typeof(Base.setindex!), Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, NamedTuple{(:a, :b, :c), Tuple{Float64, Base.Missing, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}, Int64})
precompile(Tuple{getfield(CSV, Symbol("#58#60")){Bool, Array{String, 1}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#57")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Nothing, Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Nothing, Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.propertynames), NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol, Symbol}, Nothing})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c), nothing}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#8")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(CSV, Symbol("#59#61")){Bool, Bool, Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Int64, Array{UInt8, 1}, Tuple{Symbol, Symbol, Symbol}, Tables.Schema{(:a, :b, :c), nothing}, Int64}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:a, :b, :c), nothing}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:a, :b, :c), T} where T<:Tuple, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b, :c), Tuple{Float64, Base.Missing, String}}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b, :c), Tuple{Float64, Base.Missing, String}}, Int64}, Int64, Int64})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:a, :b, :c), nothing}, NamedTuple{(:a, :b, :c), Tuple{Float64, Base.Missing, String}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}, Int64}, Int64, Int64})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:a, :b, :c), nothing}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#57")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Nothing, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Nothing, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.propertynames), Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{Type{Tables.Schema{(:col1, :col2, :col3), nothing}}})
precompile(Tuple{getfield(CSV, Symbol("#59#61")){Bool, Bool, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Int64, Array{UInt8, 1}, Tuple{Symbol, Symbol, Symbol}, Tables.Schema{(:col1, :col2, :col3), nothing}, Int64}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), nothing}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Int64}})
precompile(Tuple{typeof(Base.getindex), Type{Float64}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#57")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Nothing, Tables.RowIterator{NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Nothing, Tables.RowIterator{NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:header,), Tuple{Array{String, 1}}}, typeof(CSV.write), Nothing, Tables.RowIterator{NamedTuple{(:col1, :col2), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.resize!), Array{UInt8, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Char, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:x,), Tuple{Array{Char, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:x,), Tuple{Array{Char, 1}}}})
precompile(Tuple{typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:x,), Tuple{Array{Char, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:x,), Tuple{Char}}, Tables.RowIterator{NamedTuple{(:x,), Tuple{Array{Char, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:x,), Tuple{Char}}, Tables.RowIterator{NamedTuple{(:x,), Tuple{Array{Char, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:x,), Tuple{Char}}, Tables.RowIterator{NamedTuple{(:x,), Tuple{Array{Char, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Char, 1}, Array{Char, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:x, :y), Tuple{Array{Char, 1}, Array{Char, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:x, :y), Tuple{Array{Char, 1}, Array{Char, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim,), Tuple{Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:x, :y), Tuple{Array{Char, 1}, Array{Char, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:x, :y), Tuple{Char, Char}}, Tables.RowIterator{NamedTuple{(:x, :y), Tuple{Array{Char, 1}, Array{Char, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:x, :y), Tuple{Char, Char}}, Tables.RowIterator{NamedTuple{(:x, :y), Tuple{Array{Char, 1}, Array{Char, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:x, :y), Tuple{Char, Char}}, Tables.ColumnsRow{NamedTuple{(:x, :y), Tuple{Array{Char, 1}, Array{Char, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:x, :y), Tuple{Char, Char}}, Tables.RowIterator{NamedTuple{(:x, :y), Tuple{Array{Char, 1}, Array{Char, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.vect), Array{Int64, 2}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:x, :y), Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:x, :y), Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim,), Tuple{Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:x, :y), Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:x, :y), Tuple{Array{Int64, 2}, Array{Int64, 2}}}, Tables.RowIterator{NamedTuple{(:x, :y), Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:x, :y), Tuple{Array{Int64, 2}, Array{Int64, 2}}}, Tables.RowIterator{NamedTuple{(:x, :y), Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base._show_nonempty), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 2}, String})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.print_to_string), Array{Int64, 2}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:x, :y), Tuple{Array{Int64, 2}, Array{Int64, 2}}}, Tables.ColumnsRow{NamedTuple{(:x, :y), Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:x, :y), Tuple{Array{Int64, 2}, Array{Int64, 2}}}, Tables.RowIterator{NamedTuple{(:x, :y), Tuple{Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.open), Function, Base.Cmd, String, Base.IOStream})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.Process, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Main, Symbol("#382#386")), Base.Process})
precompile(Tuple{getfield(Base, Symbol("##open#564")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#382#386")), Base.Cmd, String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.Cmd, Base.IOStream})
precompile(Tuple{typeof(Base.open), Base.Cmd, String, Base.IOStream})
precompile(Tuple{typeof(Base.setup_stdio), Base.IOStream, Bool})
precompile(Tuple{typeof(Base.seekstart), Base.Process})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.Process, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.Process, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.Process, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.Process, UInt8})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.Process, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.Process})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.Process, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.Process, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}}})
precompile(Tuple{typeof(Base.arg_gen), String, Base.SubString{String}})
precompile(Tuple{typeof(Base.run), Base.Cmd})
precompile(Tuple{Type{NamedTuple{(:ISBN, :Book_Title), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:delim, :quotechar, :escapechar), T} where T<:Tuple}, Tuple{Char, Char, Char}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:ISBN, :Book_Title), Tuple{Array{Int64, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), String, NamedTuple{(:ISBN, :Book_Title), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim, :quotechar, :escapechar), Tuple{Char, Char, Char}}, typeof(CSV.write), String, NamedTuple{(:ISBN, :Book_Title), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:ISBN, :Book_Title), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:ISBN, :Book_Title), Tuple{Array{Int64, 1}, Array{String, 1}}}}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#62#63")){getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:ISBN, :Book_Title), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:ISBN, :Book_Title), Tuple{Array{Int64, 1}, Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(CSV, Symbol("#62#63")){getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:ISBN, :Book_Title), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:ISBN, :Book_Title), Tuple{Array{Int64, 1}, Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{Type{Dates.DateTime}, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :dt, :dttm), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol}, NamedTuple{(:delim,), Tuple{Char}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:a, :dt, :dttm), Tuple{Int64, Dates.Date, Dates.DateTime}}, Tables.RowIterator{NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:a, :dt, :dttm), Tuple{Int64, Dates.Date, Dates.DateTime}}, Tables.RowIterator{NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:a, :dt, :dttm), Tuple{Int64, Dates.Date, Dates.DateTime}}, Tables.ColumnsRow{NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:a, :dt, :dttm), Tuple{Int64, Dates.Date, Dates.DateTime}}, Tables.RowIterator{NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :dt, :dttm), Tuple{Int64, Dates.Date, Dates.DateTime}}, CSV.File{false}})
precompile(Tuple{Type{NamedTuple{(:a, :dt, :dttm), T} where T<:Tuple}, Tuple{CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{typeof(Base.:(==)), CSV.Column{Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), CSV.Column{Dates.Date, Dates.Date}, Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.:(==)), CSV.Column{Dates.DateTime, Dates.DateTime}, Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :dt, :dttm), Tuple{CSV.Column{Int64, Int64}, CSV.Column{Dates.Date, Dates.Date}, CSV.Column{Dates.DateTime, Dates.DateTime}}}, NamedTuple{(:a, :dt, :dttm), Tuple{Array{Int64, 1}, Array{Dates.Date, 1}, Array{Dates.DateTime, 1}}}})
precompile(Tuple{Type{NamedTuple{(:newline,), T} where T<:Tuple}, Tuple{Char}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:newline,), Tuple{Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol}, NamedTuple{(:newline,), Tuple{Char}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:newline,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:newline,), Tuple{String}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, String, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:newline,), Tuple{String}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, Tuple{UInt8, UInt8}, UInt8, Nothing, Bool, Tuple{}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, CSV.Options{UInt8, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, Tuple{UInt8, UInt8}, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.check), Base.CodeUnits{UInt8, String}, Int64, UInt8, UInt8, UInt8, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, String, CSV.Options{UInt8, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{Type{NamedTuple{(:delim, :newline), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim, :newline), Tuple{String, String}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), String, Char, Nothing, Nothing, Char, String, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:delim, :newline), Tuple{String, String}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, Tuple{UInt8, UInt8}, UInt8, UInt8, UInt8, Tuple{UInt8, UInt8}, UInt8, Nothing, Bool, Tuple{}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.check), Base.CodeUnits{UInt8, String}, Int64, Tuple{UInt8, UInt8}, UInt8, UInt8, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, String, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, Tuple{UInt8, UInt8}, UInt8, UInt8, UInt8, Tuple{UInt8}, UInt8, Nothing, Bool, Tuple{}, Bool})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt8}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8}, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8}, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.check), Base.CodeUnits{UInt8, String}, Int64, Tuple{UInt8, UInt8}, UInt8, UInt8, Tuple{UInt8}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, String, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8}, Nothing, Tuple{}}})
precompile(Tuple{Type{NamedTuple{(:delim, :quotestrings), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Bool}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim, :quotestrings), Tuple{String, Bool}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:delim, :quotestrings), Tuple{String, Bool}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), String, Char, Nothing, Nothing, Char, String, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:delim, :newline), Tuple{String, String}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, String}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, String}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, String}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}}, Int64, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, String}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}}, CSV.Options{Tuple{UInt8, UInt8}, Tuple{UInt8, UInt8}, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:delim, :newline, :quotestrings), T} where T<:Tuple}, Tuple{String, String, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Bool}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim, :newline, :quotestrings), Tuple{String, String, Bool}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:delim, :newline, :quotestrings), Tuple{String, String, Bool}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol}, NamedTuple{(:escapechar,), Tuple{Char}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:col1, :col2, :col3), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim, :decimal), Tuple{Char, Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Symbol, Char, Tuple{Symbol, Symbol}, NamedTuple{(:delim, :decimal), Tuple{Char, Char}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Float64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.link_pipe!), Base.PipeEndpoint, Bool, Base.PipeEndpoint, Bool})
precompile(Tuple{typeof(Base._redirect_stdout), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.redirect_stdout)})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Base.PipeEndpoint}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Base.PipeEndpoint}, Int64, Int64})
precompile(Tuple{typeof(CSV.write), Base.PipeEndpoint})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.PipeEndpoint, NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.PipeEndpoint}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.PipeEndpoint, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Base.PipeEndpoint, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.PipeEndpoint, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.PipeEndpoint, UInt8})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.PipeEndpoint, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.ColumnsRow{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.with), getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:col1, :col2, :col3), Tuple{Int64, Int64, Int64}}, Tables.RowIterator{NamedTuple{(:col1, :col2, :col3), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.PipeEndpoint, Bool})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.PipeEndpoint, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.PipeEndpoint, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.redirect_stdout), Base.PipeEndpoint})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#100#103"))}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#99#102")), Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{String, 1}})
precompile(Tuple{typeof(Base.copy), Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{UInt8}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{UInt8, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Char}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Char}, Tuple{Base.Broadcast.Extruded{Array{UInt8, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Char}, Tuple{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.iterate), Array{Char, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.eltype)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Tables.schema), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.columntable), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), DataFrames.DataFrame})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:delim,), Tuple{Char}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tables.Schema{(:A, :B), Tuple{Int64, String}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:A, :B), Tuple{Int64, String}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:A, :B), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:A, :B), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:A, :B), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(==)), CSV.Column{String, String}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint, Type{String}})
precompile(Tuple{typeof(Base.:(|>)), NamedTuple{(:col1,), Tuple{Array{String, 1}}}, getfield(CSV, Symbol("#51#52")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.Filesystem.mktempdir), Function, Type{Union{FilePathsBase.PosixPath, FilePathsBase.WindowsPath}}})
precompile(Tuple{typeof(FilePathsBase.mktmpdir), Function})
precompile(Tuple{typeof(Base.Filesystem.mktempdir), getfield(Main, Symbol("#383#387")){DataFrames.DataFrame}, FilePathsBase.PosixPath})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), FilePathsBase.PosixPath, DataFrames.DataFrame})
precompile(Tuple{typeof(CSV.file), FilePathsBase.PosixPath, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Main, Symbol("#383#387")){DataFrames.DataFrame}, FilePathsBase.PosixPath})
precompile(Tuple{typeof(Base.getindex), Type{String}, String, String})
precompile(Tuple{typeof(FilePathsBase.Path), FilePathsBase.PosixPath, Tuple{String, String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(FilePathsBase, Symbol("#6#7")){FilePathsBase.PosixPath, Tuple{String, String, String}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Symbol, Symbol}, getfield(FilePathsBase, Symbol("#6#7")){FilePathsBase.PosixPath, Tuple{String, String, String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Symbol, Symbol}, getfield(FilePathsBase, Symbol("#6#7")){FilePathsBase.PosixPath, Tuple{String, String, String}}}, Int64})
precompile(Tuple{Type{FilePathsBase.PosixPath}, Tuple{String, String, String}, String})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:A, :B), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, FilePathsBase.PosixPath, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:A, :B), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, FilePathsBase.PosixPath, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String, String}, Vararg{Any, N} where N})
precompile(Tuple{getfield(CSV, Symbol("#62#63")){getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:A, :B), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(CSV, Symbol("#62#63")){getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:A, :B), Tuple{Int64, String}}, Tables.RowIterator{NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##rm")), NamedTuple{(:recursive,), Tuple{Bool}}, typeof(Base.Filesystem.rm), FilePathsBase.PosixPath})
precompile(Tuple{typeof(Base.join), Tuple{String, String}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{Type{NamedTuple{(Symbol("col1,col2"),), Tuple{Array{String, 1}}}}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(Symbol("col1,col2"),), Tuple{Array{String, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(Symbol("col1,col2"),), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(Symbol("col1,col2"),), Tuple{Array{String, 1}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(Symbol("col1,col2"),), Tuple{String}}, Tables.RowIterator{NamedTuple{(Symbol("col1,col2"),), Tuple{Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(Symbol("col1,col2"),), Tuple{String}}, Tables.RowIterator{NamedTuple{(Symbol("col1,col2"),), Tuple{Array{String, 1}}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(Symbol("col1,col2"),), Tuple{String}}, Tables.RowIterator{NamedTuple{(Symbol("col1,col2"),), Tuple{Array{String, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.BufferStream}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.BufferStream, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(CSV.write), Base.BufferStream, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.seekstart), Base.BufferStream})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:a, :b), Tuple{Int64, Float64}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.BufferStream, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:a, :b), Tuple{Int64, Float64}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.BufferStream, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, UInt8})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, Float64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:a, :b), Tuple{Int64, Float64}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.BufferStream})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, Tuple{Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(Base.close), Base.BufferStream})
precompile(Tuple{typeof(Base.read), Base.BufferStream, Type{String}})
precompile(Tuple{typeof(Base.big), Int64})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Base.GMP.BigInt}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a,), Tuple{Base.GMP.BigInt}}})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Nothing, Bool, String, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{NamedTuple{(:a,), Tuple{Base.GMP.BigInt}}, 1}})
precompile(Tuple{typeof(CSV.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{NamedTuple{(:a,), Tuple{Base.GMP.BigInt}}, 1}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:a,), Tuple{Base.GMP.BigInt}}, Array{NamedTuple{(:a,), Tuple{Base.GMP.BigInt}}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.write), Tables.Schema{(:a,), Tuple{Base.GMP.BigInt}}, Array{NamedTuple{(:a,), Tuple{Base.GMP.BigInt}}, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GMP.BigInt, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Bool, Tables.Schema{(:a,), Tuple{Base.GMP.BigInt}}, Array{NamedTuple{(:a,), Tuple{Base.GMP.BigInt}}, 1}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}}, Tuple{Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.vect), Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(CSV.typecode), Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(CategoricalArrays.buildindex), Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt32, 1}, Base.IndexLinear, Base.UnitRange{Int64}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{T, R, V} where V where R<:Integer where T}, Base.Dict{String, UInt32}, Bool})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{T, R, V} where V where R<:Integer where T}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.sort), Array{String, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{String, 1, R, V, C, U} where U where C where V where R<:Integer}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalString{UInt32}, String})
precompile(Tuple{typeof(Base.getproperty), CategoricalArrays.CategoricalString{UInt32}, Symbol})
precompile(Tuple{typeof(DataAPI.levels), CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:categorical, :copycols), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:categorical, :copycols), Tuple{Bool, Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, R, V, C, U} where U where C where V where R<:Integer}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{Type{NamedTuple{(:pool, :copycols), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:pool, :copycols), Tuple{Bool, Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.:(==)), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.getproperty), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:pool, :copycols), T} where T<:Tuple}, Tuple{Float64, Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:pool, :copycols), Tuple{Float64, Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt32}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt32}, UInt32, String})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.isequal), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt32, 1, Array{UInt32, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Base, Symbol("##s627#427")), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Bool, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Bool})
precompile(Tuple{typeof(Base.show), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.show), Base.PipeEndpoint, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{Type{Tables.Schema{(:X,), Tuple{Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#3#4")){Tuple{Union{Base.Missing, String}}}}})
precompile(Tuple{typeof(Base.show), Base.PipeEndpoint, Tables.Schema{(:X,), Tuple{Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#3#4")){Tuple{Union{Base.Missing, String}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Union, 1}, Type{T} where T, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#3#4")){Tuple{Union{Base.Missing, String}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Union, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._typed_hcat), Type{Any}, Tuple{Array{Symbol, 1}, Array{Union, 1}}})
precompile(Tuple{typeof(Base.hcat), Array{Symbol, 1}, Array{Union, 1}})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Array{Any, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix_row), Base.PipeEndpoint, Array{Any, 2}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.UnitRange{Int64}, String})
precompile(Tuple{typeof(Base.print_matrix_row), Base.PipeEndpoint, Array{Any, 2}, Array{Tuple{Int64, Int64}, 1}, Int64, Array{Int64, 1}, String})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Array{Any, 2}, Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Int64, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Array{Any, 2}, Array{Int64, 1}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Array{Any, 2}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Array{Any, 2}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Array{Any, 2}, Array{Int64, 1}, Base.StepRange{Int64, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix_vdots), Base.PipeEndpoint, String, Array{Tuple{Int64, Int64}, 1}, String, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String})
precompile(Tuple{typeof(Base.print_matrix), Base.PipeEndpoint, Array{Any, 2}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix), Base.PipeEndpoint, Array{Any, 2}})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Symbol})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.PipeEndpoint, Int64, typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.alignment), Base.PipeEndpoint, Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.PipeEndpoint, Int64, typeof(Base.sprint), Function, Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("#kw##sprint")), NamedTuple{(:context, :sizehint), Tuple{Base.PipeEndpoint, Int64}}, typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##sprint")), NamedTuple{(:context, :sizehint), Tuple{Base.PipeEndpoint, Int64}}, typeof(Base.sprint), Function, Type{T} where T})
precompile(Tuple{typeof(Base.first), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.getindex), CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Int64})
precompile(Tuple{typeof(Base.getproperty), CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:limit,), Tuple{Int64}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.length), Array{CSV.Row2{O} where O, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CSV.Row2{O} where O, 1}, Int64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:transpose,), Tuple{Bool}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), CSV.Rows{true, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ignorerepeated, :delim), Tuple{Bool, Char}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), CSV.Rows{false, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.length), CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.iterate), CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Any, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Any, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{typeof(Parsers.parse), Type{Int64}, CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Int64})
precompile(Tuple{typeof(Parsers.parse), Type{Int64}, CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Symbol})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, UInt64, UInt64, UInt8, Int16, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, UInt64, UInt64, UInt8, Int16, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt8, 1}, UInt64, UInt64, Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}})
precompile(Tuple{typeof(Base.getindex), CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Int64})
precompile(Tuple{typeof(CSV.detect), CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Int64})
precompile(Tuple{typeof(CSV.detect), CSV.Row2{Parsers.Options{true, true, false, Base.Missing, UInt8, Nothing}}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ignorerepeated,), Tuple{Bool}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ignoreemptylines,), Tuple{Bool}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Base.Missing})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isequal), Tuple{Array{Any, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.isequal), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isequal), Tuple{Array{Any, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.isequal), String, String})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.isequal), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.isequal), Base.Missing, Base.Missing})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:reusebuffer,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:reusebuffer,), Tuple{Bool}}, Type{CSV.Rows{transpose, O} where O where transpose}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, CSV.Row2{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{CSV.Rows{false, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}}, Tuple{Int64, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Base.CodeUnits{UInt8, String}, Int64, Int64, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}})
precompile(Tuple{getfield(CSV, Symbol("##detect#6")), Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, typeof(CSV.detect), String})
precompile(Tuple{typeof(CSV.detect), String})
precompile(Tuple{typeof(Base.something), Int64, String})
precompile(Tuple{typeof(Base.something), Float64, String})
precompile(Tuple{typeof(Base.something), Dates.Date, String})
precompile(Tuple{typeof(Base.something), Dates.DateTime, String})
precompile(Tuple{typeof(Base.something), Bool, String})
precompile(Tuple{typeof(Base.length), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Base.CodeUnits{UInt8, String}, Int64, Int64, Nothing, Bool})
precompile(Tuple{typeof(CSV.findrowstarts!), Base.CodeUnits{UInt8, String}, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Nothing, Bool, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
