precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(StatsFuns.xlogx), Int64})
precompile(Tuple{typeof(Base.iszero), Float64})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.xlogy), Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(StatsFuns.logistic), Int64})
precompile(Tuple{typeof(StatsFuns.logit), Float64})
precompile(Tuple{typeof(Base.log1p), Float64})
precompile(Tuple{typeof(StatsFuns.log1psq), Float64})
precompile(Tuple{typeof(StatsFuns.log1pexp), Float64})
precompile(Tuple{typeof(StatsFuns.log1pexp), Int64})
precompile(Tuple{typeof(Base.exp), Float32})
precompile(Tuple{typeof(Base.Math.throw_complex_domainerror), Symbol, Float32})
precompile(Tuple{typeof(Base.log1p), Float32})
precompile(Tuple{typeof(StatsFuns.log1pexp), Float32})
precompile(Tuple{typeof(Base.log), Float32})
precompile(Tuple{typeof(Base.isapprox), Float32, Float32})
precompile(Tuple{typeof(Base.MPFR.setprecision), getfield(Base, Symbol("#626#627")){Float64, Base.Irrational{:loghalf}, Base.Rounding.RoundingMode{:Down}}, Type{Base.MPFR.BigFloat}, Int64})
precompile(Tuple{Type{Float64}, Base.Irrational{:loghalf}, Base.Rounding.RoundingMode{:Down}})
precompile(Tuple{typeof(Base.MPFR.setprecision), getfield(StatsFuns, Symbol("#53#54")), Type{Base.MPFR.BigFloat}, Int64})
precompile(Tuple{typeof(Base.cmp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.log), Base.MPFR.BigFloat})
precompile(Tuple{typeof(StatsFuns.log1mexp), Float64})
precompile(Tuple{typeof(StatsFuns.log2mexp), Float64})
precompile(Tuple{typeof(StatsFuns.logexpm1), Float64})
precompile(Tuple{typeof(StatsFuns.logexpm1), Float32})
precompile(Tuple{typeof(StatsFuns.log1pmx), Float64})
precompile(Tuple{typeof(StatsFuns.logmxp1), Float64})
precompile(Tuple{typeof(StatsFuns.logaddexp), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.logaddexp), Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Colon, Float64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(StatsFuns, Symbol("#68#69")){Float64}, typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(StatsFuns, Symbol("#68#69")){Float64}, typeof(Base.add_sum), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(StatsFuns.logsumexp), Array{Float64, 1}})
precompile(Tuple{typeof(StatsFuns.logsumexp), Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(Base, Symbol("#73#74")){Float64, Tuple{Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Float64}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.check_reducedims), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.log), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(StatsFuns, Symbol("##logsumexp#67")), Int64, typeof(StatsFuns.logsumexp), Array{Float64, 2}})
precompile(Tuple{getfield(StatsFuns, Symbol("#kw##logsumexp")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(StatsFuns.logsumexp), Array{Float64, 2}})
precompile(Tuple{typeof(Base.hcat), Float64, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.norm2), Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.norm1), Array{Float64, 2}})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{typeof(LinearAlgebra.generic_normp), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base._all), getfield(LinearAlgebra, Symbol("#27#28")){Int64, Float64, Bool}, Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#26")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.isapprox), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.hcat), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Float64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Float64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.norm2), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.norm1), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.generic_normp), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._all), getfield(LinearAlgebra, Symbol("#27#28")){Int64, Float64, Bool}, Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#26")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.isapprox), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:dims,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Float64}}})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{getfield(StatsFuns, Symbol("##logsumexp#67")), Array{Int64, 1}, typeof(StatsFuns.logsumexp), Array{Float64, 2}})
precompile(Tuple{getfield(StatsFuns, Symbol("#kw##logsumexp")), NamedTuple{(:dims,), Tuple{Array{Int64, 1}}}, typeof(StatsFuns.logsumexp), Array{Float64, 2}})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Float32})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Float32}})
precompile(Tuple{typeof(Base.vect), Float32, Vararg{Float32, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{Array{Float64, 1}, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float64, 1}, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float32, 1}, Float32}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Array{Float32, 1}, Float32}, Tuple{Array{Float64, 1}, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Int64, 1}, Float64}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Array{Float64, 1}, Float64}}, Type{Tuple{Array{T, 1} where T, Float64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Array{Float32, 1}, Float32}}, Type{Tuple{Array{T, 1} where T, Float64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Array{Float64, 1}, Float64}}, Type{Tuple{Array{T, 1} where T, AbstractFloat}}})
precompile(Tuple{Type{Array{Tuple{Array{T, 1} where T, AbstractFloat}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Array{T, 1} where T, AbstractFloat}, 1}, Tuple{Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float32, 1}, Float32}, Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Float64, 1}, Float64}, Tuple{Array{Int64, 1}, Float64}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{T, 1} where T, AbstractFloat}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{T, 1} where T, AbstractFloat}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float32, 1}, Float32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float32, 1}, Float32}, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.logaddexp), Float32, Float32})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Colon, Float32}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Float32}}, Array{Float32, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(StatsFuns, Symbol("#68#69")){Float32}, typeof(Base.add_sum), Array{Float32, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(StatsFuns, Symbol("#68#69")){Float32}, typeof(Base.add_sum), Base.IndexLinear, Array{Float32, 1}})
precompile(Tuple{typeof(StatsFuns.logsumexp), Array{Float32, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Int64, 1}, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Int64, 1}, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Float64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(StatsFuns, Symbol("#68#69")){Float64}, typeof(Base.add_sum), Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(StatsFuns, Symbol("#68#69")){Float64}, typeof(Base.add_sum), Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(StatsFuns.logsumexp), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.exp), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.exp), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Array{Float64, 1}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Array{Float64, 1}}}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Array{Float64, 1}}}, Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(StatsFuns.softmax!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(StatsFuns.softmax), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._all), getfield(LinearAlgebra, Symbol("#27#28")){Int64, Float64, Bool}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#26")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.isapprox), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(StatsFuns.softmax!), Array{Float64, 1}})
precompile(Tuple{typeof(Test.test_expr!), String, Expr, Expr, Vararg{Expr, N} where N})
precompile(Tuple{getfield(Test, Symbol("#@test_broken")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.rat), Float64})
precompile(Tuple{typeof(Base.lcm_unchecked), Int64, Int64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}, Tuple{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}})
precompile(Tuple{typeof(Base.MainInclude.eval), Symbol})
precompile(Tuple{typeof(Main.get_rmathfun), String})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.MainInclude.eval), Expr})
precompile(Tuple{typeof(Base.println), Test.Error})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Error})
precompile(Tuple{typeof(Base.print), Test.Error})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Error})
precompile(Tuple{typeof(Test.do_test), Test.Threw, Expr})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Float64, Float64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betapdf), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:rtol, :nans), T} where T<:Tuple}, Tuple{Float64, Bool}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:rtol, :nans), Tuple{Float64, Bool}}})
precompile(Tuple{getfield(Base, Symbol("#kw##isapprox")), NamedTuple{(:rtol, :nans), Tuple{Float64, Bool}}, typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Test, Symbol("#12#15")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(Test, Symbol("#12#15"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Test, Symbol("#12#15"))}})
precompile(Tuple{getfield(Test, Symbol("#12#15")), Base.Pair{Symbol, Float64}})
precompile(Tuple{getfield(Test, Symbol("#12#15")), Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(StatsFuns.RFunctions.betalogpdf), Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:atol, :rtol, :nans), T} where T<:Tuple}, Tuple{Float64, Float64, Bool}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:atol, :rtol, :nans), Tuple{Float64, Float64, Bool}}})
precompile(Tuple{getfield(Base, Symbol("#kw##isapprox")), NamedTuple{(:atol, :rtol, :nans), Tuple{Float64, Float64, Bool}}, typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betacdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betaccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betalogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betalogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvlogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvlogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betarand), Float64, Float64})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64, Int64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betapdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betalogpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betacdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betaccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betalogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betalogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betainvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betarand), Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Int64, Float64}, Base.AbstractRange{T} where T}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Int64, Float64}, Base.AbstractRange{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Int64, Float64}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Int64, Float64}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64, Float64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binompdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogpdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binominvcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binominvccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binominvlogcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binominvlogccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomrand), Int64, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Float64}, Base.UnitRange{Int64}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64, Float64}, String, Int64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binompdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogpdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomcdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomccdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogcdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogccdf), Int64, Float64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Int64}, Base.AbstractRange{T} where T}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Int64}, Base.AbstractRange{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Int64}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Int64}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqpdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqlogpdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqlogcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqlogccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqinvcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqinvccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqinvlogcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqinvlogccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqrand), Int64})
precompile(Tuple{typeof(Random.randexp_unlikely), Random.MersenneTwister, UInt64, Float64})
precompile(Tuple{typeof(Random.randexp), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randn_unlikely), Random.MersenneTwister, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64}, Base.UnitRange{Int64}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64}, String, Int64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqpdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqlogpdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqcdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqccdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqlogcdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqlogccdf), Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Int64, Int64}, Base.AbstractRange{T} where T}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Int64, Int64}, Base.AbstractRange{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Int64, Int64}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Int64, Int64}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistlogpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistinvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistinvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistinvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistinvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistrand), Int64, Int64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64}, Base.UnitRange{Int64}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64, Int64}, String, Int64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistlogpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistlogcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistlogccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Real, Real}, Base.AbstractRange{T} where T}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Real, Real}, Base.AbstractRange{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Real, Real}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Real, Real}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammapdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammalogpdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammacdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammaccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammalogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammalogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvlogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvlogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammarand), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammapdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammalogpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammacdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammaccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammalogcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammalogccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammainvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammarand), Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Int64, Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64, Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64, Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Int64, Int64, Int64}, Base.AbstractRange{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Int64, Int64, Int64}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Int64, Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64, Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Int64, Int64, Int64}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64, Int64, Int64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperpdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperlogpdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hypercdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperlogcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperlogccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperinvcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperinvccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperinvlogcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperinvlogccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperrand), Int64, Int64, Int64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64, Int64}, Base.UnitRange{Int64}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Int64, Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Int64, Int64, Int64}, String, Int64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperpdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperlogpdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hypercdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperccdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperlogcdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.hyperlogccdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Real, Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Real, Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Real, Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}, Tuple{Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Real, Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Float64, Float64, Float64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetapdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetalogpdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetacdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetaccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetalogcdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetalogccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvcdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvlogcdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvlogccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetapdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetalogpdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetacdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetaccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetalogcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetalogccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvlogcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbetainvlogccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Int64, Float64}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Float64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinompdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomlogpdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomlogcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomlogccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinominvcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinominvccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinominvlogcdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinominvlogccdf), Int64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomrand), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinompdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomlogpdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomcdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomccdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomlogcdf), Int64, Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nbinomlogccdf), Int64, Float64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Int64, Int64}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqlogpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqinvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqinvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqinvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqinvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqrand), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqlogpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqlogcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nchisqlogccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64, Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Real, Real, Real}, Base.AbstractRange{T} where T}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Real, Real, Real}, Base.AbstractRange{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Real, Real, Real}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64, Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Real, Real, Real}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistpdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistlogpdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistcdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistlogcdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistlogccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvcdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvlogcdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvlogccdf), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistpdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistlogpdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistcdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistccdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistlogcdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistlogccdf), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvlogcdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.nfdistinvlogccdf), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Real, Real}, Base.AbstractRange{T} where T}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Real, Real}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.UnitRange{Int64}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(StatsFuns.normpdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normpdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.normlogpdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogpdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.normcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.normccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.normlogcdf), Float64})
precompile(Tuple{typeof(StatsFuns.normlogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.normlogccdf), Float64})
precompile(Tuple{typeof(StatsFuns.normlogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(SpecialFunctions.erfinv), Float64})
precompile(Tuple{typeof(SpecialFunctions.erfcinv), Float64})
precompile(Tuple{typeof(StatsFuns.norminvcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.norminvccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns._qnorm_ker2), Float64})
precompile(Tuple{typeof(StatsFuns._norminvlogcdf_impl), Float64})
precompile(Tuple{typeof(StatsFuns.norminvlogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvlogcdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.norminvlogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvlogccdf), Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normrand), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.normpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.normlogpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.normcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.normccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.normlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.normlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.norminvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.norminvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.norminvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.norminvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.norminvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normrand), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.normpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.normlogpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.normcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.normccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.normlogcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.normlogccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.normlogccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistlogpdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistinvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistinvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistinvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistinvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistlogpdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistlogcdf), Int64, Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.ntdistlogccdf), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{Tuple{Tuple{Real}, Base.AbstractRange{T} where T}}})
precompile(Tuple{Type{Array{Tuple{Tuple{Real}, Base.AbstractRange{T} where T}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Real}, Base.AbstractRange{T} where T}, 1}, Tuple{Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Real}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.rmathcomp), String, Tuple{Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Function, Tuple{Float64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poispdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogpdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poiscdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisccdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogcdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogccdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvcdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvccdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvlogcdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvlogccdf), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisrand), Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poispdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogpdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poiscdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisccdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogcdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogccdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvlogcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisinvlogccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poisrand), Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistpdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistlogpdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistlogcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistlogccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistinvcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistinvccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistinvlogcdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistinvlogccdf), Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistrand), Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistpdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistlogpdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistcdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistccdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistlogcdf), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistlogccdf), Int64, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, N} where N})
precompile(Tuple{typeof(Main.rmathcomp_tests), String, Array{Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistinvcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistinvccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistinvlogcdf), Int64, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.srdistinvlogccdf), Int64, Int64, Float64})
precompile(Tuple{typeof(Base.eps), Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Test, Symbol("#11#14")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Any, 1}, getfield(Test, Symbol("#11#14"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Test, Symbol("#11#14"))}})
precompile(Tuple{getfield(Test, Symbol("#11#14")), Base.Pair{Symbol, Float64}})
precompile(Tuple{getfield(Test, Symbol("#11#14")), Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{getfield(Test, Symbol("#13#16")), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr})
precompile(Tuple{typeof(Base.is_quoted), Float64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Int64, Int64})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Broken})
precompile(Tuple{typeof(Test.do_broken_test), Test.Returned, Expr})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, N} where N})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.genericcomp_tests), String, Array{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Tuple{Float64, Float64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(SpecialFunctions.loggammadiv), Float64, Float64})
precompile(Tuple{typeof(SpecialFunctions.beta), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betapdf), Float64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Base.getproperty), ForwardDiff.Dual{Nothing, Float64, 0}, Symbol})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(SpecialFunctions.logbeta), Float64, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.betalogpdf), Float64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Main.genericcomp_tests), String, Array{Tuple{Tuple{Int64, Float64}, Base.AbstractRange{T} where T}, 1}})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Int64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Tuple{Int64, Float64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(Base.Math.tan_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
precompile(Tuple{typeof(Base.tan), Float64})
precompile(Tuple{typeof(SpecialFunctions.digamma), Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogpdf), Int64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.binompdf), Int64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Int64, Float64}, Base.UnitRange{Int64}, Float64})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Int64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Tuple{Int64, Float64}, String, Int64, Bool, Float64})
precompile(Tuple{typeof(SpecialFunctions.logbeta), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.binomlogpdf), Int64, Float64, ForwardDiff.Dual{Nothing, Int64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.binompdf), Int64, Float64, ForwardDiff.Dual{Nothing, Int64, 0}})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Vararg{Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, N} where N})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.genericcomp_tests), String, Array{Tuple{Tuple{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Tuple{Int64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqpdf), Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.chisqlogpdf), Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Main.genericcomp_tests), String, Array{Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Tuple{Int64, Int64}, String, Float64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistpdf), Int64, Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Base.string), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.throw_domerr_powbysq), Int64, Int64})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.fdistlogpdf), Int64, Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammapdf), Float64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.gammalogpdf), Float64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Tuple{Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}, Tuple{Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Tuple{Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Main.genericcomp_tests), String, Array{Tuple{Tuple{Real, Real}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, 1}})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Float64, Float64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(StatsFuns.normpdf), Float64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.normlogpdf), Float64, Float64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Int64, Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(StatsFuns.normpdf), Int64, Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.normlogpdf), Int64, Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Base.vect), Tuple{Tuple{Float64}, Base.UnitRange{Int64}}, Vararg{Tuple{Tuple{Float64}, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(Main.genericcomp), String, Tuple{Float64}, Base.UnitRange{Int64}, Float64})
precompile(Tuple{typeof(Main.genericcomp_tests), String, Array{Tuple{Tuple{Float64}, Base.UnitRange{Int64}}, 1}})
precompile(Tuple{typeof(Main.check_rmath), String, Function, Tuple{Float64}, String, Int64, Bool, Float64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poispdf), Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogpdf), ForwardDiff.Dual{Nothing, Float64, 0}, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.poispdf), Float64, ForwardDiff.Dual{Nothing, Int64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogpdf), Float64, Int64})
precompile(Tuple{typeof(StatsFuns.RFunctions.poislogpdf), Float64, ForwardDiff.Dual{Nothing, Int64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistpdf), Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(StatsFuns.RFunctions.tdistlogpdf), Int64, ForwardDiff.Dual{Nothing, Float64, 0}})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Expr}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Expr, 1}, typeof(Base.esc)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Expr, 1}, typeof(Base.esc)}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Expr, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Test.testset_forloop), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Base.push!), Array{Expr, 1}, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.rand), Type{Float32}})
precompile(Tuple{typeof(Base.:(+)), Float32, Int64})
precompile(Tuple{typeof(StatsFuns.logmvgamma), Int64, Float32})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Base.rand), Type{Float64}})
precompile(Tuple{typeof(StatsFuns.logmvgamma), Int64, Float64})
precompile(Tuple{typeof(SpecialFunctions.loggamma), Float32})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:logπ}})
precompile(Tuple{typeof(Base.:(+)), Float32, Float32, Float32})
precompile(Tuple{typeof(Base.:(+)), Float32, Float32, Float32, Float32})
precompile(Tuple{typeof(SpecialFunctions.loggamma), Float64})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base.:(+)), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsFuns.logmvbeta), Int64, Float32, Float32})
precompile(Tuple{typeof(StatsFuns.logmvbeta), Int64, Float32, Float64})
precompile(Tuple{typeof(StatsFuns.logmvbeta), Int64, Float64, Float32})
precompile(Tuple{typeof(StatsFuns.logmvbeta), Int64, Float64, Float64})
precompile(Tuple{typeof(SpecialFunctions.logbeta), Float32, Float32})
precompile(Tuple{typeof(SpecialFunctions.logbeta), Float32, Float64})
precompile(Tuple{typeof(SpecialFunctions.logbeta), Float64, Float32})
precompile(Tuple{typeof(Base.promote_eltype), Type{T} where T})
precompile(Tuple{typeof(Base.promote_eltype), Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Base.eltype), Type{Float32}})
precompile(Tuple{typeof(Base.promote_type), Type{Float32}, Type{Float32}})
