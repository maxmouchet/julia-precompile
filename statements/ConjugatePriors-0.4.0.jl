precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Compat.Sys.__init__)})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(OpenBLAS_jll.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Arpack_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Random._rand_max383!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.CloseOpen01{Float64}})
precompile(Tuple{typeof(Random.DSFMT.dsfmt_fill_array_close_open!), Random.DSFMT.DSFMT_state, Ptr{Float64}, Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.SamplerTrivial{Random.CloseOpen01{Float64}, Float64}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{Type{Distributions.Beta{T} where T<:Real}, Float64, Float64})
precompile(Tuple{Type{Distributions.Bernoulli{T} where T<:Real}, Float64})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Bernoulli{Float64}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Bernoulli{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Distributions.Bernoulli{Float64}, Int64})
precompile(Tuple{typeof(Distributions.suffstats), Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Base.getproperty), Distributions.Beta{Float64}, Symbol})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}})
precompile(Tuple{typeof(Distributions.succprob), Distributions.Bernoulli{Float64}})
precompile(Tuple{typeof(StatsBase.mode), Distributions.Beta{Float64}})
precompile(Tuple{typeof(Distributions.suffstats), Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sum), Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(Random.randexp_unlikely), Random._GLOBAL_RNG, UInt64, Float64})
precompile(Tuple{typeof(Random.randexp), Random._GLOBAL_RNG})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.GammaIPSampler{Distributions.Gamma{Float64}, Float64}})
precompile(Tuple{Type{Distributions.GammaGDSampler{T} where T<:Real}, Distributions.Gamma{Float64}})
precompile(Tuple{typeof(Base.log1p), Float64})
precompile(Tuple{typeof(Distributions.calc_q), Distributions.GammaGDSampler{Float64}, Float64})
precompile(Tuple{typeof(Base.randn), Random._GLOBAL_RNG})
precompile(Tuple{typeof(Random.randn_unlikely), Random._GLOBAL_RNG, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.GammaGDSampler{Float64}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Gamma{Float64}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Beta{Float64}})
precompile(Tuple{typeof(ConjugatePriors.posterior_rand), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(ConjugatePriors.posterior_rand), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_randmodel), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_randmodel), Distributions.Beta{Float64}, Type{Distributions.Bernoulli{T} where T<:Real}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{Type{Distributions.Binomial{T} where T<:Real}, Int64, Float64})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.BinomialGeomSampler})
precompile(Tuple{Type{Distributions.BinomialTPESampler}, Int64, Float64})
precompile(Tuple{typeof(StatsFuns.lstirling_asym), Float64})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.BinomialTPESampler})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Binomial{Float64}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Binomial{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Distributions.Binomial{Float64}, Int64})
precompile(Tuple{typeof(Distributions.suffstats), Type{Distributions.Binomial{T} where T<:Real}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Beta{Float64}, Type{Distributions.Binomial{T} where T<:Real}, Tuple{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Beta{Float64}, Distributions.BinomialStats})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Beta{Float64}, Type{Distributions.Binomial{T} where T<:Real}, Tuple{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Distributions.ntrials), Distributions.Binomial{Float64}})
precompile(Tuple{typeof(Distributions.succprob), Distributions.Binomial{Float64}})
precompile(Tuple{typeof(Distributions.suffstats), Type{Distributions.Binomial{T} where T<:Real}, Int64, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Beta{Float64}, Type{Distributions.Binomial{T} where T<:Real}, Tuple{Int64, Array{Int64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Beta{Float64}, Type{Distributions.Binomial{T} where T<:Real}, Tuple{Int64, Array{Int64, 1}}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.Dirichlet{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.Dirichlet{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.isprobvec), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Distributions, Symbol("#_#23#24")), Bool, Type{Distributions.DiscreteNonParametric{Int64, Float64, Base.OneTo{Int64}, Array{Float64, 1}}}, Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.DiscreteNonParametric{Int64, P, Base.OneTo{Int64}, Ps} where Ps where P}, Array{Float64, 1}})
precompile(Tuple{typeof(StatsBase.make_alias_table!), Array{Float64, 1}, Float64, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Distributions.AliasTable{S} where S}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Random.LessThan{UInt64, Random.Masked{UInt64, Random.UInt52Raw{UInt64}}}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Random.SamplerType{UInt64}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.AliasTable{Random.SamplerRangeFast{UInt64, Int64}}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.DiscreteNonParametric{Int64, Float64, Base.OneTo{Int64}, Array{Float64, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Distributions.DiscreteNonParametric{Int64, Float64, Base.OneTo{Int64}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Dirichlet{Float64}, Type{Distributions.DiscreteNonParametric{Int64, P, Base.OneTo{Int64}, Ps} where Ps where P}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getproperty), Distributions.Dirichlet{Float64}, Symbol})
precompile(Tuple{typeof(Main.ccount), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.norm2), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.norm1), Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.generic_normp), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._all), getfield(LinearAlgebra, Symbol("#27#28")){Int64, Float64, Bool}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.Colon})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#26")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.isapprox), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.dirichlet_mode), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(StatsBase.mode), Distributions.DirichletCanon})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Distributions.Dirichlet{Float64}, Type{Distributions.DiscreteNonParametric{Int64, P, Base.OneTo{Int64}, Ps} where Ps where P}, Array{Int64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Dirichlet{Float64}, Type{Distributions.DiscreteNonParametric{Int64, P, Base.OneTo{Int64}, Ps} where Ps where P}, Array{Int64, 1}})
precompile(Tuple{typeof(Distributions.probs), Distributions.DiscreteNonParametric{Int64, Float64, Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(StatsBase.mode), Distributions.Dirichlet{Float64}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Distributions.Dirichlet{Float64}, Type{Distributions.DiscreteNonParametric{Int64, P, Base.OneTo{Int64}, Ps} where Ps where P}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Dirichlet{Float64}, Type{Distributions.DiscreteNonParametric{Int64, P, Base.OneTo{Int64}, Ps} where Ps where P}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Main.ccount), Int64, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Dirichlet{Float64}, Type{Distributions.DiscreteNonParametric{Int64, P, Base.OneTo{Int64}, Ps} where Ps where P}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.Multinomial{T, TV} where TV<:AbstractArray{T, 1} where T<:Real}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Distributions.multinom_rand!), Random._GLOBAL_RNG, Int64, Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Distributions._rand!), Random._GLOBAL_RNG, Distributions.MultinomialSampler{Float64}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Distributions._rand!), Random._GLOBAL_RNG, Distributions.Multinomial{Float64, Array{Float64, 1}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.rand), Distributions.Multinomial{Float64, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.check_reducedims), Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Int64, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast!), typeof(Base.:(+)), Array{Int64, 2}, Array{Int64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Distributions.Dirichlet{Float64}, Type{Distributions.Multinomial{T, TV} where TV<:AbstractArray{T, 1} where T<:Real}, Array{Int64, 2}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Dirichlet{Float64}, Type{Distributions.Multinomial{T, TV} where TV<:AbstractArray{T, 1} where T<:Real}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.norm2), Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.norm1), Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.generic_normp), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base._all), getfield(LinearAlgebra, Symbol("#27#28")){Int64, Float64, Bool}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#26")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.isapprox), Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Distributions.Dirichlet{Float64}, Type{Distributions.Multinomial{T, TV} where TV<:AbstractArray{T, 1} where T<:Real}, Array{Int64, 2}})
precompile(Tuple{getfield(Base, Symbol("#kw##sum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.sum), Array{Int64, 2}})
precompile(Tuple{typeof(Base.vec), Array{Int64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 2}, Float64, Base.Generator{Array{Int64, 2}, Type{Float64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 2}, Base.Generator{Array{Int64, 2}, Type{Float64}}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.gemv!), Char, Float64, Array{Float64, 2}, Array{Float64, 1}, Float64, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Dirichlet{Float64}, Type{Distributions.Multinomial{T, TV} where TV<:AbstractArray{T, 1} where T<:Real}, Array{Int64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.generic_matvecmul!), Array{Float64, 1}, Char, Array{Int64, 2}, Array{Float64, 1}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.vec), Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Distributions.Dirichlet{Float64}, Type{Distributions.Multinomial{T, TV} where TV<:AbstractArray{T, 1} where T<:Real}, Array{Int64, 2}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.Gamma{T} where T<:Real}, Float64, Float64})
precompile(Tuple{Type{Distributions.Exponential{T} where T<:Real}, Float64})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Exponential{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Distributions.Exponential{Float64}, Int64})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Distributions.Gamma{Float64}, Type{Distributions.Exponential{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Gamma{Float64}, Type{Distributions.Exponential{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.shape), Distributions.Gamma{Float64}})
precompile(Tuple{typeof(Distributions.rate), Distributions.Gamma{Float64}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Gamma{Float64}, Type{Distributions.Exponential{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.rate), Distributions.Exponential{Float64}})
precompile(Tuple{typeof(StatsBase.mode), Distributions.Gamma{Float64}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.dot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.suffstats), Type{Distributions.Exponential{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Distributions.Gamma{Float64}, Type{Distributions.Exponential{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Distributions.Gamma{Float64}, Type{Distributions.Exponential{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Distributions.Gamma{Float64}, Type{Distributions.Exponential{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.Normal{T} where T<:Real}, Float64, Float64})
precompile(Tuple{typeof(Base.randn), Random._GLOBAL_RNG, Type{Float64}})
precompile(Tuple{typeof(Base.rand), Random._GLOBAL_RNG, Distributions.Normal{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Distributions.Normal{Float64}, Int64})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Distributions.Normal{Float64}, Distributions.NormalKnownSigmaStats})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Tuple{Distributions.Normal{Float64}, Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Tuple{Distributions.Normal{Float64}, Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.mean), Distributions.Normal{Float64}})
precompile(Tuple{typeof(Statistics.var), Distributions.Normal{Float64}})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Tuple{Distributions.Normal{Float64}, Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(StatsBase.mode), Distributions.Normal{Float64}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Tuple{Distributions.Normal{Float64}, Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getproperty), Distributions.Normal{Float64}, Symbol})
precompile(Tuple{typeof(Distributions.suffstats), Distributions.NormalKnownSigma, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Tuple{Distributions.Normal{Float64}, Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.dot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Tuple{Distributions.Normal{Float64}, Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Tuple{Distributions.Normal{Float64}, Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.InverseGamma{T} where T<:Real}, Float64, Float64})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Distributions.InverseGamma{Float64}, Distributions.NormalKnownMuStats})
precompile(Tuple{typeof(ConjugatePriors.posterior), Tuple{Float64, Distributions.InverseGamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.shape), Distributions.InverseGamma{Float64}})
precompile(Tuple{typeof(Distributions.scale), Distributions.InverseGamma{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.abs2), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.abs2), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs2), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}}}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Tuple{Float64, Distributions.InverseGamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(StatsBase.mode), Distributions.InverseGamma{Float64}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Tuple{Float64, Distributions.InverseGamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.abs2), Float64})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Tuple{Float64, Distributions.InverseGamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Tuple{Float64, Distributions.InverseGamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Tuple{Float64, Distributions.InverseGamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Tuple{Float64, Distributions.InverseGamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.scale), Distributions.Gamma{Float64}})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_mode), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.fit_map), Tuple{Float64, Distributions.Gamma{Float64}}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{ConjugatePriors.NormalInverseGamma{T} where T<:Real}, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Distributions.suffstats), Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), ConjugatePriors.NormalInverseGamma{Float64}, Distributions.NormalStats})
precompile(Tuple{typeof(ConjugatePriors.posterior), ConjugatePriors.NormalInverseGamma{Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getproperty), ConjugatePriors.NormalInverseGamma{Float64}, Symbol})
precompile(Tuple{typeof(Statistics._mean), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Statistics.mean), Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.var), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Float64, Int64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Float64}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Float64}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Float64}}, Float64}}})
precompile(Tuple{Type{Ref{T} where T}, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Float64, Base.Val{2}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Float64, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Float64, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.rand), ConjugatePriors.NormalInverseGamma{Float64}})
precompile(Tuple{typeof(ConjugatePriors.posterior_randmodel), ConjugatePriors.NormalInverseGamma{Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.insupport), Distributions.Normal{Float64}, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(StatsBase.mode), ConjugatePriors.NormalInverseGamma{Float64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Distributions.pdf), ConjugatePriors.NormalInverseGamma{Float64}, Float64, Float64})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{Type{ConjugatePriors.NormalInverseChisq{T} where T<:Real}, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.convert), Type{ConjugatePriors.NormalInverseGamma{T} where T<:Real}, ConjugatePriors.NormalInverseChisq{Float64}})
precompile(Tuple{typeof(Base.convert), Type{ConjugatePriors.NormalInverseChisq{T} where T<:Real}, ConjugatePriors.NormalInverseGamma{Float64}})
precompile(Tuple{typeof(Base.:(==)), ConjugatePriors.NormalInverseChisq{Float64}, ConjugatePriors.NormalInverseChisq{Float64}})
precompile(Tuple{typeof(StatsBase.mode), ConjugatePriors.NormalInverseChisq{Float64}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Statistics.mean), ConjugatePriors.NormalInverseGamma{Float64}})
precompile(Tuple{typeof(Statistics.mean), ConjugatePriors.NormalInverseChisq{Float64}})
precompile(Tuple{typeof(Distributions.pdf), ConjugatePriors.NormalInverseChisq{Float64}, Float64, Float64})
precompile(Tuple{typeof(Random.make_seed), Int64})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{typeof(Base.rand), ConjugatePriors.NormalInverseChisq{Float64}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), ConjugatePriors.NormalInverseChisq{Float64}, Distributions.NormalStats})
precompile(Tuple{typeof(ConjugatePriors.posterior), ConjugatePriors.NormalInverseChisq{Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(SpecialFunctions.lgamma), Float64})
precompile(Tuple{typeof(Distributions.logpdf), ConjugatePriors.NormalInverseChisq{Float64}, Float64, Float64})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{typeof(Base.length), Array{Ptr{Nothing}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Ptr{Nothing}, 1}, Int64})
precompile(Tuple{typeof(Base.deleteat!), Array{Ptr{Nothing}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.hash), Tuple{Ptr{Nothing}, Symbol}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Any, Int64}, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Int64, Base.Iterators.Pairs{Symbol, Base.StackTraces.StackFrame, Tuple{Symbol}, NamedTuple{(:caller,), Tuple{Base.StackTraces.StackFrame}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.debug_color)})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{typeof(Distributions.logpdf), ConjugatePriors.NormalInverseGamma{Float64}, Float64, Float64})
precompile(Tuple{Type{ConjugatePriors.NormalGamma{T} where T<:Real}, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(ConjugatePriors.posterior), ConjugatePriors.NormalGamma{Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getproperty), ConjugatePriors.NormalGamma{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.rand), ConjugatePriors.NormalGamma{Float64}})
precompile(Tuple{typeof(ConjugatePriors.posterior_rand), ConjugatePriors.NormalGamma{Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_randmodel), ConjugatePriors.NormalGamma{Float64}, Type{Distributions.Normal{T} where T<:Real}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.UnitRange{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Float64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.reshape), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{Type{LinearAlgebra.Diagonal{T, V} where V<:AbstractArray{T, 1} where T}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(LinearAlgebra.rmul!), Array{Float64, 2}, LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float64, 2}, Int64, Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 2}, LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.:(*)), Float64, LinearAlgebra.UniformScaling{Bool}})
precompile(Tuple{typeof(Base.fill), Float64, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, LinearAlgebra.UniformScaling{Float64}})
precompile(Tuple{typeof(Base.:(+)), LinearAlgebra.UniformScaling{Float64}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{typeof(LinearAlgebra.ishermitian), Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.checkpositivedefinite), Int64})
precompile(Tuple{typeof(Base.getproperty), Int64, Symbol})
precompile(Tuple{Type{LinearAlgebra.PosDefException}, LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}})
precompile(Tuple{Type{LinearAlgebra.PosDefException}, LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##cholesky!#124")), Bool, typeof(LinearAlgebra.cholesky!), LinearAlgebra.Hermitian{Float64, Array{Float64, 2}}, Base.Val{false}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##cholesky!#125")), Bool, typeof(LinearAlgebra.cholesky!), Array{Float64, 2}, Base.Val{false}})
precompile(Tuple{Type{Distributions.MvNormalKnownCov{Cov} where Cov<:(PDMats.AbstractPDMat{T} where T<:Real)}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.potri!), Char, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.inv!), LinearAlgebra.Cholesky{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.inv), PDMats.PDMat{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.check_reducedims), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Distributions.suffstats), Distributions.MvNormalKnownCov{PDMats.PDMat{Float64, Array{Float64, 2}}}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.gemv!), Char, Bool, Array{Float64, 2}, Array{Float64, 1}, Bool, Array{Float64, 1}})
precompile(Tuple{Type{LinearAlgebra.MulAddMul{ais1, bis0, TA, TB} where TB where TA where bis0 where ais1}, Bool, Bool})
precompile(Tuple{typeof(LinearAlgebra.gemv!), Array{Float64, 1}, Char, Array{Float64, 2}, Array{Float64, 1}, Bool, Bool})
precompile(Tuple{typeof(Distributions.suffstats), Distributions.MvNormalKnownCov{PDMats.PDMat{Float64, Array{Float64, 2}}}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##sum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.sum), Array{Float64, 2}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.getproperty), Distributions.MvNormalKnownCovStats{PDMats.PDMat{Float64, Array{Float64, 2}}}, Symbol})
precompile(Tuple{typeof(Base.isapprox), Float64, Int64})
precompile(Tuple{Type{Array{Float64, 2}}, LinearAlgebra.UniformScaling{Float64}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{T, 2} where T}, LinearAlgebra.UniformScaling{Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Float64, Int64, Int64})
precompile(Tuple{Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.transposeblock!), typeof(Base.adjoint), Array{Float64, 2}, Array{Float64, 2}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(LinearAlgebra.transpose_f!), typeof(Base.adjoint), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.getproperty), LinearAlgebra.Cholesky{Float64, Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(LinearAlgebra.BLAS.trmm!), Char, Char, Char, Char, Float64, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast!), typeof(Base.:(+)), Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions._rand!), Random._GLOBAL_RNG, Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.rand), Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Float64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 2}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(PDMats.pdadd), PDMats.PDMat{Float64, Array{Float64, 2}}, PDMats.PDMat{Float64, Array{Float64, 2}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcast!), typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.potrs!), Char, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{Type{Distributions.MvNormalCanon{T, P, V} where V<:(AbstractArray{T, 1} where T) where P<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 1}, PDMats.PDMat{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Distributions.MvNormalKnownCovStats{PDMats.PDMat{Float64, Array{Float64, 2}}}})
precompile(Tuple{typeof(ConjugatePriors.posterior), Tuple{Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.getproperty), Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Symbol})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{typeof(LinearAlgebra.istriu), Array{Float64, 2}, Int64})
precompile(Tuple{Type{Array{Float64, 2}}, LinearAlgebra.UniformScaling{Bool}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.triu!), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(LinearAlgebra.istril), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(LinearAlgebra.tril!), Array{Float64, 2}, Int64})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##lu!#131")), Bool, typeof(LinearAlgebra.lu!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.getri!), Array{Float64, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.inv), Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 2}})
precompile(Tuple{typeof(Base.divgcd), Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Rational{Int64}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Statistics.mean!), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##mean")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Statistics.mean), Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.matmul2x2!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.matmul3x3!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.gemm!), Char, Char, Float64, Array{Float64, 2}, Array{Float64, 2}, Float64, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(LinearAlgebra.copy_transpose!), Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra._generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.gemm_wrapper!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.getproperty), PDMats.PDMat{Float64, Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._all), getfield(LinearAlgebra, Symbol("#27#28")){Int64, Float64, Bool}, Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, Base.Colon})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##isapprox#26")), Int64, Float64, Bool, typeof(LinearAlgebra.norm), typeof(Base.isapprox), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.isapprox), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), Tuple{Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.trmv!), Char, Char, Char, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions._rand!), Random._GLOBAL_RNG, Distributions.MvNormalCanon{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_randmodel), Tuple{Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(Distributions.insupport), Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.isposdef), Array{Float64, 2}})
precompile(Tuple{typeof(Distributions.insupport), Type{Distributions.InverseWishart{T, ST} where ST<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{Type{ConjugatePriors.NormalInverseWishart{T, V, M} where M<:AbstractArray{T, 2} where V<:AbstractArray{T, 1} where T<:Real}, Array{Float64, 1}, Float64, Array{Float64, 2}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(LinearAlgebra.matmul2x2!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(LinearAlgebra.matmul3x3!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.syrk!), Char, Char, Bool, Array{Float64, 2}, Bool, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(LinearAlgebra._generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(LinearAlgebra.generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(LinearAlgebra.syrk_wrapper!), Array{Float64, 2}, Char, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.gemm!), Char, Char, Bool, Array{Float64, 2}, Array{Float64, 2}, Bool, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.gemm_wrapper!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(Distributions.suffstats), Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unaliascopy), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.unaliascopy), LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}})
precompile(Tuple{Type{AbstractArray{T, 2} where T}, LinearAlgebra.Cholesky{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(*)), Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), ConjugatePriors.NormalInverseWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Distributions.MvNormalStats})
precompile(Tuple{typeof(ConjugatePriors.posterior), ConjugatePriors.NormalInverseWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.getproperty), ConjugatePriors.NormalInverseWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Float64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Float64}}})
precompile(Tuple{Type{Array{T, 2} where T}, LinearAlgebra.Cholesky{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.transpose), Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 2}, LinearAlgebra.Transpose{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.adjoint), Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 2}, LinearAlgebra.Adjoint{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(StatsFuns.logmvgamma), Int64, Float64})
precompile(Tuple{typeof(Distributions._invwishart_c0), Float64, PDMats.PDMat{Float64, Array{Float64, 2}}})
precompile(Tuple{Type{Distributions.InverseWishart{T, ST} where ST<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Float64, LinearAlgebra.Cholesky{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Distributions._wishart_c0), Float64, PDMats.PDMat{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Distributions._wishart_genA!), Random._GLOBAL_RNG, Int64, Float64, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Distributions._rand!), Random._GLOBAL_RNG, Distributions.Wishart{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}}, Array{Float64, 2}})
precompile(Tuple{typeof(Distributions._rand!), Random._GLOBAL_RNG, Distributions.InverseWishart{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}}, Array{Float64, 2}})
precompile(Tuple{typeof(Distributions._rand!), Random._GLOBAL_RNG, Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(ConjugatePriors.posterior_rand), ConjugatePriors.NormalInverseWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(ConjugatePriors.posterior_randmodel), ConjugatePriors.NormalInverseWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{Type{ConjugatePriors.NormalInverseWishart{T, V, M} where M<:AbstractArray{T, 2} where V<:AbstractArray{T, 1} where T<:Real}, ConjugatePriors.NormalInverseChisq{Float64}})
precompile(Tuple{Type{Distributions.Normal{T} where T<:Real}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Array{Float64, 1}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Array{Float64, 1}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Array{Float64, 1}, Int64, Base.Colon})
precompile(Tuple{typeof(ConjugatePriors.posterior), ConjugatePriors.NormalInverseChisq{Float64}, Distributions.NormalStats})
precompile(Tuple{typeof(ConjugatePriors.posterior), ConjugatePriors.NormalInverseWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Distributions.MvNormalStats})
precompile(Tuple{typeof(Base.getproperty), ConjugatePriors.NormalInverseChisq{Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isapprox), Tuple{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.isapprox), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isapprox), Tuple{Float64, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Float64, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isapprox), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.isapprox), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.all), Bool})
precompile(Tuple{typeof(Distributions.isApproxSymmmetric), Array{Float64, 2}})
precompile(Tuple{typeof(Distributions.trycholesky), Array{Float64, 2}})
precompile(Tuple{typeof(ConjugatePriors.insupport), Type{ConjugatePriors.NormalInverseWishart{T, V, M} where M<:AbstractArray{T, 2} where V<:AbstractArray{T, 1} where T<:Real}, Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.logabsdet), LinearAlgebra.LU{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(LinearAlgebra.diag), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{Float64}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.getrs!), Char, Array{Float64, 2}, Array{Int64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.LU{Float64, Array{Float64, 2}}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.geqp3!), Array{Float64, 2}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.qr!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(LinearAlgebra.qr), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.laic1!), Int64, Array{Float64, 1}, Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Int64}, true}, Float64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormqr!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), LinearAlgebra.QRPackedQ{Float64, Array{Float64, 2}}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.QRPackedQ{Float64, Array{Float64, 2}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getproperty), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormqr!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormrz!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.invperm), Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexCartesian, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 2}, Float64})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(\)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.abs2), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.abs2), typeof(Base.add_sum), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(PDMats.invquad), PDMats.PDMat{Float64, Array{Float64, 2}}, Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.logpdf), ConjugatePriors.NormalInverseWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{Type{ConjugatePriors.NormalWishart{T, V, M} where M<:AbstractArray{T, 2} where V<:AbstractArray{T, 1} where T<:Real}, Array{Float64, 1}, Float64, Array{Float64, 2}, Float64})
precompile(Tuple{typeof(ConjugatePriors.posterior_canon), ConjugatePriors.NormalWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Distributions.MvNormalStats})
precompile(Tuple{typeof(ConjugatePriors.posterior), ConjugatePriors.NormalWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.getproperty), ConjugatePriors.NormalWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Symbol})
precompile(Tuple{Type{Distributions.Wishart{T, ST} where ST<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Float64, LinearAlgebra.Cholesky{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(LinearAlgebra.throw_uplo)})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.Symmetric{Float64, Array{Float64, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{T, 2} where T}, LinearAlgebra.Symmetric{Float64, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.rand), ConjugatePriors.NormalWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(ConjugatePriors.posterior_randmodel), ConjugatePriors.NormalWishart{Float64, Array{Float64, 1}, Array{Float64, 2}}, Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
