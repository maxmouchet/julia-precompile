precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.PipeEndpoint, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.PipeEndpoint}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(JpegTurbo_jll.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Zstd_jll.__init__)})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Libtiff_jll.__init__)})
precompile(Tuple{typeof(libpng_jll.__init__)})
precompile(Tuple{typeof(ImageMagick_jll.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(ImageCore.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Function, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(ImageMagick.__init__)})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(FFTW_jll.__init__)})
precompile(Tuple{typeof(FFTW.__init__)})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Function, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{getfield(ImageCore, Symbol("#39#42"))})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(ImageCore, Symbol("#40#43"))})
precompile(Tuple{getfield(ImageCore, Symbol("#41#44"))})
precompile(Tuple{typeof(ImageCore.include), String})
precompile(Tuple{typeof(ImageFiltering.__init__)})
precompile(Tuple{typeof(VisualRegressionTests.__init__)})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{getfield(Base, Symbol("##run#565")), Bool, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_tarball_contents#84")), Bool, typeof(Pkg.PlatformEngines.get_tarball_contents), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##cptree")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(PlotUtils.__init__)})
precompile(Tuple{typeof(PlotThemes.add_theme), Symbol, PlotThemes.PlotTheme})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, PlotUtils.ColorLibrary}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(ColorTypes.basetype), Type{T} where T})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(LibVPX_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.check_js)})
precompile(Tuple{typeof(GR.js.jsterm_send), String, String})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.js.initjs)})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Plots._plots_defaults)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Plots.replaceAlias!), Base.Dict{Symbol, Any}, Symbol, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.replaceAliases!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.preprocessArgs!), Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Plots, Symbol("##default#123")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("##_theme#132")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots._theme), Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{getfield(Plots, Symbol("#333#366"))})
precompile(Tuple{getfield(Plots, Symbol("#334#367"))})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(Plots, Symbol("#335#368"))})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Base.success), Base.Process})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Xorg_libXau_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#14")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#15")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#82")), Bool, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Libgpg_error_jll.__init__)})
precompile(Tuple{typeof(Libgcrypt_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXdmcp_jll.__init__)})
precompile(Tuple{typeof(Xorg_xtrans_jll.__init__)})
precompile(Tuple{typeof(Libiconv_jll.__init__)})
precompile(Tuple{typeof(XML2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(XML2_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(XML2_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(XSLT_jll.__init__)})
precompile(Tuple{typeof(Xorg_libpthread_stubs_jll.__init__)})
precompile(Tuple{typeof(Xorg_libxcb_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libxcb_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libxcb_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libX11_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libX11_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libX11_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libXrender_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXrender_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXrender_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libXfixes_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXfixes_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXfixes_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libXcursor_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXcursor_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXcursor_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Expat_jll.__init__)})
precompile(Tuple{typeof(Dbus_jll.__init__)})
precompile(Tuple{typeof(Graphite2_jll.__init__)})
precompile(Tuple{typeof(PCRE_jll.__init__)})
precompile(Tuple{typeof(Libffi_jll.__init__)})
precompile(Tuple{typeof(Gettext_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Gettext_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Gettext_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Glib_jll.__init__)})
precompile(Tuple{typeof(LZO_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXext_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXext_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXext_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Libuuid_jll.__init__)})
precompile(Tuple{typeof(Fontconfig_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Fontconfig_jll, Symbol("#34#36")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Fontconfig_jll, Symbol("#35#37")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Pixman_jll.__init__)})
precompile(Tuple{typeof(Cairo_jll.__init__)})
precompile(Tuple{typeof(HarfBuzz_jll.__init__)})
precompile(Tuple{typeof(Pango_jll.__init__)})
precompile(Tuple{typeof(Cairo.__init__)})
precompile(Tuple{typeof(Xorg_libxkbfile_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libxkbfile_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libxkbfile_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Xorg_xkbcomp_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_xkbcomp_jll, Symbol("#10#12")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_xkbcomp_jll, Symbol("#11#13")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Libglvnd_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Libglvnd_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Libglvnd_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Wayland_jll.__init__)})
precompile(Tuple{typeof(Wayland_protocols_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXinerama_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXinerama_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXinerama_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Libepoxy_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Libepoxy_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Libepoxy_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(hicolor_icon_theme_jll.__init__)})
precompile(Tuple{typeof(adwaita_icon_theme_jll.__init__)})
precompile(Tuple{typeof(ATK_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXi_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXi_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXi_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Xorg_xkeyboard_config_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_xkeyboard_config_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_xkeyboard_config_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(xkbcommon_jll.__init__)})
precompile(Tuple{typeof(Xorg_libXtst_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXtst_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXtst_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(at_spi2_core_jll.__init__)})
precompile(Tuple{typeof(gdk_pixbuf_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(gdk_pixbuf_jll, Symbol("#10#12")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(gdk_pixbuf_jll, Symbol("#11#13")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libXrandr_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXrandr_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXrandr_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libXcomposite_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXcomposite_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXcomposite_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Xorg_libXdamage_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXdamage_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Xorg_libXdamage_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(iso_codes_jll.__init__)})
precompile(Tuple{typeof(at_spi2_atk_jll.__init__)})
precompile(Tuple{typeof(GTK3_jll.__init__)})
precompile(Tuple{typeof(Gtk.GLib.GClosureMarshal), Ptr{Nothing}, Ptr{Gtk.GLib.GValue}, UInt32, Ptr{Gtk.GLib.GValue}, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Gtk.GLib.__init__gtype__)})
precompile(Tuple{typeof(Gtk.GLib.uv_dispatch), Ptr{Nothing}, Ptr{Nothing}, Int64})
precompile(Tuple{typeof(Gtk.GLib.finalize_gc_unref), Any})
precompile(Tuple{typeof(Gtk.GLib.run_delayed_finalizers)})
precompile(Tuple{typeof(Gtk.GLib.g_yield), UInt64})
precompile(Tuple{typeof(Gtk.GLib.__init__gmainloop__)})
precompile(Tuple{typeof(Gtk.GLib.__init__)})
precompile(Tuple{typeof(Core.Compiler._typename), DataType})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_hash), String, String})
precompile(Tuple{getfield(gdk_pixbuf_jll, Symbol("##gdk_pixbuf_query_loaders#7")), Bool, Bool, typeof(gdk_pixbuf_jll.gdk_pixbuf_query_loaders), getfield(Gtk, Symbol("#300#306"))})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##bind_artifact!#24")), Nothing, Nothing, Bool, Bool, typeof(Pkg.Artifacts.bind_artifact!), String, String, Base.SHA1})
precompile(Tuple{Type{Gtk.GLib.GError}, getfield(Gtk, Symbol("#304#310"))})
precompile(Tuple{typeof(Gtk.__init__)})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Union{Nothing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Tuple{String, String, String, Nothing}})
precompile(Tuple{typeof(Base.filter), getfield(Gtk, Symbol("#299#305")), Array{Union{Nothing, String}, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Array{Union{Nothing, String}, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Union{Nothing, String}, 1}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_hash#23")), Pkg.BinaryPlatforms.Platform, Nothing, typeof(Pkg.Artifacts.artifact_hash), String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, String})
precompile(Tuple{getfield(gdk_pixbuf_jll, Symbol("#8#9")){getfield(Gtk, Symbol("#300#306"))}})
precompile(Tuple{typeof(Base.withenv), getfield(gdk_pixbuf_jll, Symbol("#8#9")){getfield(Gtk, Symbol("#300#306"))}, Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{getfield(Gtk, Symbol("#300#306")), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}}})
precompile(Tuple{typeof(Base.read), Base.Cmd})
precompile(Tuple{getfield(Gtk, Symbol("#301#307")){String}})
precompile(Tuple{typeof(Base.withenv), getfield(Gtk, Symbol("#301#307")){String}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##cptree")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Gtk, Symbol("#302#308")){String}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Gtk, Symbol("#303#309")){String}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##tree_hash#12")), Type{T} where T, typeof(Pkg.GitTools.tree_hash), String})
precompile(Tuple{typeof(Pkg.GitTools.blob_hash), String, Type{T} where T})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#28#32")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Pkg.Artifacts, Symbol("#28#32")), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##print")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.print), Base.IOStream, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{Any, Any}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##_print")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#8#11"))})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#9#12"))})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#10#13"))})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(VisualRegressionTests.include), String})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Plots._initialize_backend), Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Plots.backend), Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Plots.pgfplotsx)})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Gtk.gtk_main)})
precompile(Tuple{typeof(Gtk.GLib.g_sigatom), Any})
precompile(Tuple{getfield(Gtk, Symbol("#237#238"))})
precompile(Tuple{typeof(Gtk.GLib.uv_prepare), Ptr{Nothing}, Ptr{Int32}})
precompile(Tuple{typeof(Base.getproperty), Gtk.GLib._GPollFD, Symbol})
precompile(Tuple{typeof(Base.:(!=)), UInt16, Int64})
precompile(Tuple{typeof(Gtk.GLib.g_siginterruptible), typeof(Base.yield), Function})
precompile(Tuple{typeof(Gtk.GLib.uv_check), Ptr{Nothing}})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(PGFPlotsX.__init__)})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#78#97"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#79#98"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#80#99"))})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#87#106"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#88#107"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#89#108"))})
precompile(Tuple{getfield(Plots, Symbol("#318#351"))})
precompile(Tuple{getfield(Plots, Symbol("#319#352"))})
precompile(Tuple{getfield(Plots, Symbol("#320#353"))})
precompile(Tuple{getfield(Requires, Symbol("#@require")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Requires.parsepkg), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Plots.include), String})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Base.string), String, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#84#103"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#85#104"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#86#105"))})
precompile(Tuple{getfield(Base, Symbol("#@kwdef")), LineNumberNode, Module, Any})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{getfield(Printf, Symbol("#@sprintf")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Expr, Expr, Expr}}})
precompile(Tuple{typeof(Base.getindex), Tuple{String, Expr, Expr, Expr}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Printf.gen), String})
precompile(Tuple{typeof(Base.Printf._printf), String, Expr, String, Tuple{Expr, Expr, Expr}})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Test, Symbol("#@test_nowarn")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Test, Symbol("#@test_warn")), LineNumberNode, Module, Any, Any})
precompile(Tuple{getfield(Colors, Symbol("#@colorant_str")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB24}})
precompile(Tuple{typeof(Base.parameter_upper_bound), UnionAll, Any})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.HSL{T}, T, 4} where T<:AbstractFloat}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.HSLA{T} where T<:AbstractFloat}})
precompile(Tuple{getfield(Base, Symbol("##parse#347")), Int64, typeof(Base.parse), Type{UInt32}, Base.SubString{String}})
precompile(Tuple{typeof(Colors.chop1), Base.SubString{String}})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Nearest}, Int64, Int64})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(FixedPointNumbers.throw_converterror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Colors.parse_rgb), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_hsl_sl), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_alpha_num), Base.SubString{String}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror_), Type{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror), Type{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32})
precompile(Tuple{Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, String})
precompile(Tuple{getfield(Base.Unicode, Symbol("##titlecase#2")), getfield(Base, Symbol("#58#59")){typeof(Base.Unicode.iscased)}, Bool, typeof(Base.Unicode.titlecase), String})
precompile(Tuple{typeof(Colors._parse_colorant), String})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(1,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#2")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("#3#4")), Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Plots._backend_instance), Symbol})
precompile(Tuple{typeof(Plots.backend)})
precompile(Tuple{typeof(Plots.backend), Symbol})
precompile(Tuple{typeof(Plots.backend), Plots.GRBackend})
precompile(Tuple{typeof(Plots._pick_default_backend)})
precompile(Tuple{Type{Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.PGFPlotsXBackend, Int64, Plots.Attr, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.eltype), Type})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{T, 3} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(ColorTypes.issupported), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}, Type{Float64}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Lab{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.XYZ{Float64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(ColorTypes.issupported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{Float64}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.Lab{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Lab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipe), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._process_plotrecipe), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Plots.fg_color), Plots.Attr})
precompile(Tuple{typeof(Plots.color_or_nothing!), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.layout_args), Plots.Attr})
precompile(Tuple{typeof(Plots.build_layout), Plots.Attr})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot_setup), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots.series_idx), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.link_subplots), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Plots.link_axes!), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Axis, Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Plots.is_axis_attr), Symbol})
precompile(Tuple{typeof(Plots._subplot_setup), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Plots.Attr, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_colors), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.IndexLinear, Array{Plots.Subplot{Plots.PGFPlotsXBackend}, 1}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("##Axis#97")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.Axis}, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_axis), Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis_colors), Plots.Axis})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Plots._update_axis_links), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Attr, Int64, Bool})
precompile(Tuple{typeof(Plots.is3d), Symbol})
precompile(Tuple{typeof(Plots._override_seriestype_check), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._prepare_subplot), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._prepare_annotations), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Float64})
precompile(Tuple{typeof(Plots.isvertical), Plots.Attr})
precompile(Tuple{getfield(Plots, Symbol("#113#116")), Plots.Series})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, getfield(Plots, Symbol("#113#116"))}, Base.Colon})
precompile(Tuple{typeof(Plots.all3D), Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._expand_subplot_extrema), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Attr, Symbol})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Bool})
precompile(Tuple{typeof(Plots._series_index), Plots.Attr, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.autopick_ignore_none_auto), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots.aliasesAndAutopick), Plots.Attr, Symbol, Base.Dict{Symbol, Symbol}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.union!), Base.Set{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Any}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.autopick_ignore_none_auto), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Plots.aliasesAndAutopick), Plots.Attr, Symbol, Base.Dict{Symbol, Symbol}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Plots.like_histogram), Symbol})
precompile(Tuple{typeof(Plots.ensure_gradient!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Plots._replace_linewidth), Plots.Attr})
precompile(Tuple{typeof(Plots._update_series_attributes!), Plots.Attr, Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Set{Symbol}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Plots.Attr, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Plots.parse_axis_kw), Symbol})
precompile(Tuple{typeof(Plots.default), Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_args), Plots.PGFPlotsXBackend, Plots.Attr})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.PGFPlotsXBackend, Symbol})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.PGFPlotsXBackend, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Plots.warnOnUnsupported), Plots.PGFPlotsXBackend, Plots.Attr})
precompile(Tuple{typeof(Plots._series_added), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Series})
precompile(Tuple{typeof(Plots._add_the_series), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._process_seriesrecipe), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.recompute_lengths), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout})
precompile(Tuple{typeof(Plots.update_inset_bboxes!), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots._update_plot_object), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.isijulia)})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.titlefont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{Type{Measures.Length{U, T} where T where U}, Symbol, Float64})
precompile(Tuple{typeof(Plots.is3d), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.rat), Float64})
precompile(Tuple{typeof(Base.lcm_unchecked), Int64, Int64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Base.StepRange{Int64, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.Millisecond, 1}, Tuple{Dates.Day, Dates.Hour, Dates.Minute, Dates.Second, Dates.Millisecond, Dates.Millisecond, Dates.Millisecond}})
precompile(Tuple{typeof(Dates.yearmonthday), Int64})
precompile(Tuple{typeof(Base.:(+)), Dates.Date, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Year})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Int64})
precompile(Tuple{typeof(Base.hidigit), Float64, Int64})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Int64, Int64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{Type{Dates.DateTime}, Float64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#37#38"))}, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##optimize_ticks#45")), Bool, Nothing, Nothing, Symbol, Nothing, Nothing, Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{getfield(PlotUtils, Symbol("##optimize_ticks#45")), Bool, Int64, Int64, Symbol, Nothing, Nothing, Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.tickfont), Plots.Axis})
precompile(Tuple{typeof(Plots.guidefont), Plots.Axis})
precompile(Tuple{typeof(Plots.gr_set_xticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_yticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots._display), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.inline), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Symbol, Any}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(Base.copyto!), Array{RecipesBase.RecipeData, 1}, Int64, Array{RecipesBase.RecipeData, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.println), String, Array{Any, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#146#147")), Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Nothing, Nothing, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Base.UnitRange{Int64}, Nothing})
precompile(Tuple{typeof(Plots.process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.compute_xyz), Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Plots._add_markershape), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.make_fillrange_from_ribbon), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._preprocess_userrecipe), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.is_scale_supported), Plots.PGFPlotsXBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_scales), Plots.PGFPlotsXBackend, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_errorbar_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_smooth_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, String, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PGFPlotsXBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PGFPlotsXBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{Type{Plots.PGFPlotsXPlot}, Bool, Bool, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.compute_gridsize), Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#187")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##chop#326")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Float64, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.PGFPlotsXBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{T}, T, 4} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.LCHab{Float64}}, ColorTypes.Lab{Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.Lab{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.RGB{Float64}}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(PlotUtils.adjust_lch), ColorTypes.RGBA{Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{ColorTypes.RGBA{Float64}, 1}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base._linspace1), Type{Float64}, Float64, Float64, Int64})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.splitprec), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.:(/)), Base.TwicePrecision{Float64}, Int128})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int128, Int128}, Tuple{Int128, Int128}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 1}, Int64, Array{ColorTypes.RGB{Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.Math.sind), Float64})
precompile(Tuple{typeof(Base.Math.cosd), Float64})
precompile(Tuple{typeof(Colors._colordiff), ColorTypes.Lab{Float64}, ColorTypes.Lab{Float64}, Colors.DE_2000})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#11")), Bool, typeof(Base.identity), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Float64, 1}, Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Float64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Base, Symbol("##diff#413")), Int64, typeof(Base.diff), Array{Float64, 1}})
precompile(Tuple{typeof(Base.error)})
precompile(Tuple{typeof(PlotUtils.getpctrange), Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(PlotUtils.get_zvalues), Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(ColorTypes._ccolor), Type{ColorTypes.RGBA{Float64}}, Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}, 1}, Int64, Array{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGB{Float64}, 1}, Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(PlotUtils.gradient_from_list), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("##generate_colorgradient#1")), Array{ColorTypes.RGBA{Float64}, 1}, Float64, Int64, Int64, typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorGradient, Float64})
precompile(Tuple{typeof(PlotUtils.cgrad_reverse), Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("#9#11")), Base.Pair{Symbol, PlotUtils.ColorLibrary}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorLibrary, Symbol})
precompile(Tuple{typeof(PlotUtils.getgradient), Symbol, PlotUtils.ColorLibrary})
precompile(Tuple{typeof(Base.reverse), Array{ColorTypes.RGBA{Float64}, 1}, Int64, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad_colors#17")), Symbol, typeof(PlotUtils.cgrad_colors), Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log10), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log2), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._linspace), Float64, Float64, Int64})
precompile(Tuple{typeof(Base._range), Float64, Nothing, Float64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.exp10), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp10), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#21")), Nothing, Symbol, typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.Lab{Float64}}, ColorTypes.XYZ{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(Base.Math.cbrt), Float64})
precompile(Tuple{typeof(Base.atan), Float64})
precompile(Tuple{typeof(Base.atan), Float64, Float64})
precompile(Tuple{typeof(Base.Math.cos_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
precompile(Tuple{typeof(Base.cos), Float64})
precompile(Tuple{typeof(Base.Math.sin_domain_error), Float64})
precompile(Tuple{typeof(Base.sin), Float64})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{T}, T, 4} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}, Tuple{Bool}, ColorTypes.RGBA{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float64})
precompile(Tuple{typeof(Base.cat_indices), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64})
precompile(Tuple{Type{Symbol}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Symbol})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Float64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, String})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{}})
precompile(Tuple{typeof(Plots.annotations), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.eltype), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Base.eltype), Nothing})
precompile(Tuple{typeof(Plots.like_surface), Symbol})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Plots.autopick), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.setproperty!), Plots.PGFPlotsXPlot, Symbol, Bool})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 1}, Int64})
precompile(Tuple{typeof(Base.hash), ColorTypes.RGBA{Float64}, UInt64})
precompile(Tuple{typeof(Base.hash), Base.Pair{Int64, ColorTypes.RGBA{Float64}}, UInt64})
precompile(Tuple{typeof(Base.hash), Array{ColorTypes.RGBA{Float64}, 1}, UInt64})
precompile(Tuple{typeof(Base.hash), Base.Pair{Int64, Float64}, UInt64})
precompile(Tuple{typeof(Base.hash), Array{Float64, 1}, UInt64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Any, Any}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Any, Any}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, Nothing, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Nothing, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, String, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, String, String})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Any, Any}, String, Bool})
precompile(Tuple{getfield(Plots, Symbol("#541#542")), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(Plots, Symbol("#541#542"))}, Int64})
precompile(Tuple{typeof(Base._collect), Array{ColorTypes.RGBA{Float64}, 1}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(Plots, Symbol("#541#542"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, PGFPlotsX.Options, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, PGFPlotsX.Options, String})
precompile(Tuple{typeof(UUIDs.uuid4)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.UUID, Symbol})
precompile(Tuple{typeof(Plots.iscontour), Plots.Series})
precompile(Tuple{typeof(Plots.pgfx_thickness_scaling), Plots.Attr})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Attr, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.get_clims), Plots.Series})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Plots.Attr, Int64})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Any, Any}, Int64})
precompile(Tuple{typeof(Base.merge!), OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.merge), OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_markeralpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Attr, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_markeralpha), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_markerstrokecolor), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_markerstrokealpha), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.pgfx_marker), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Attr, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.get_fillalpha), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.pgfx_fillstyle), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.should_add_to_legend), Plots.Series})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.Options})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##print_options#8")), Bool, typeof(PGFPlotsX.print_options), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.Options})
precompile(Tuple{typeof(Base.rstrip), Base.Fix2{typeof(Base.in), Array{Char, 1}}, String})
precompile(Tuple{typeof(Base.lstrip), Base.Fix2{typeof(Base.in), Array{Char, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Plots.pgfx_filllegend!), PGFPlotsX.Options, Plots.Attr})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{String, Nothing}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{String, Nothing}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Nothing}, Nothing, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Nothing}, Nothing, String})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Nothing}}, Tuple{Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(Base.convert), Type{OrderedCollections.OrderedDict{Any, Any}}, OrderedCollections.OrderedDict{String, Nothing}})
precompile(Tuple{typeof(Base.iterate), Plots.EachAnn, Int64})
precompile(Tuple{typeof(Plots.pgfx_thickness_scaling), Plots.Series})
precompile(Tuple{typeof(Plots.has_attribute_segments), Plots.Series})
precompile(Tuple{typeof(Plots.iter_segments), Plots.Series})
precompile(Tuple{Plots.PGFPlotsXPlot, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(ColorTypes.alpha), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{Type{PGFPlotsX.Options}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}}})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{String, Any}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{String, Any}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, ColorTypes.RGBA{Float64}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, ColorTypes.RGBA{Float64}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Float64, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Float64, String})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{String, Any}, Int64})
precompile(Tuple{typeof(Base.convert), Type{OrderedCollections.OrderedDict{Any, Any}}, OrderedCollections.OrderedDict{String, Any}})
precompile(Tuple{Type{PGFPlotsX.Options}, OrderedCollections.OrderedDict{String, Any}, Bool})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, ColorTypes.RGBA{Float64}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, ColorTypes.RGBA{Float64}, String})
precompile(Tuple{typeof(OrderedCollections.hashindex), String, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, Float64, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Float64, String})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing}})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Plots.pgfx_thickness_scaling), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.pgfx_thickness_scaling), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.pgfx_font), Int64, Int64})
precompile(Tuple{typeof(Base.Grisu._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, String, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Any}, String})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, String})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Int64}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Int64}, Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Int64, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Int64, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Nothing, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Nothing, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, Int64, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Int64, String})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{PGFPlotsX.Options, Nothing}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Any, Any}}, Tuple{Base.Pair{PGFPlotsX.Options, Nothing}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, String}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{PGFPlotsX.Options, Nothing}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Any, Any}, PGFPlotsX.Options})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, Nothing, PGFPlotsX.Options, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Nothing, PGFPlotsX.Options})
precompile(Tuple{typeof(OrderedCollections.hashindex), PGFPlotsX.Options, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.print_to_string), Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.string), Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}})
precompile(Tuple{Type{PGFPlotsX.Options}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, PGFPlotsX.Options}, Base.Pair{String, PGFPlotsX.Options}, Base.Pair{String, PGFPlotsX.Options}, Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, PGFPlotsX.Options}, Base.Pair{String, PGFPlotsX.Options}, Base.Pair{String, PGFPlotsX.Options}, Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, PGFPlotsX.Options, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, PGFPlotsX.Options, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, PGFPlotsX.Options})
precompile(Tuple{typeof(Base.:(>)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, String})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, String}})
precompile(Tuple{typeof(Plots.pgfx_framestyle), Symbol})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.default_should_widen), Plots.Axis})
precompile(Tuple{typeof(Plots.ispolar), Plots.Series})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Axis})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, PGFPlotsX.Options})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, PGFPlotsX.Options, PGFPlotsX.Options})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, PGFPlotsX.Options}}})
precompile(Tuple{typeof(Plots.pgfx_axis!), PGFPlotsX.Options, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, String}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Bool})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, Nothing}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, Nothing}, Base.Pair{String, String}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.is_2tuple), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#105#106")){Symbol}, Float64})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{getfield(Plots, Symbol("#107#108")){Symbol}, Float64})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, Float64}, Base.Pair{String, Float64}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Nothing, Bool, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Float64})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{getfield(PlotUtils, Symbol("#kw##optimize_ticks")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Down}, Int64, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#39#41"))}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Int64})
precompile(Tuple{typeof(Base.reduce_first), Function, Int64})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#39#41"))}, Int64})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{getfield(PlotUtils, Symbol("#40#43")){Float64}, Float64})
precompile(Tuple{typeof(Base.filter), getfield(PlotUtils, Symbol("#40#43")){Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#107#108")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Showoff.concrete_minimum), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.concrete_maximum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Base.oftype), UInt32, Int64})
precompile(Tuple{typeof(Base.Grisu.normalizedbound), Float32})
precompile(Tuple{typeof(Base.Grisu.fastshortest), Float32, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.init3!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init1!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init2!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.initialscaledstartvalues!), UInt32, Int32, Bool, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.bignumdtoa), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float32, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.fastprecision), Float32, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64})
precompile(Tuple{typeof(Showoff.plain_precision_heuristic), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64})
precompile(Tuple{typeof(Showoff.format_fixed), Float64, Int64})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{getfield(Showoff, Symbol("#1#2")), Float64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}})
precompile(Tuple{typeof(Showoff.format_fixed_scientific), Float64, Int64, Bool})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{String, 1}, typeof(Base.string)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.join), Array{Float64, 1}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Float64, 1}, String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Plots.convert_sci_unicode), String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Char}, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, String}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Char, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Char, String}, Type{Any}, Type{String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, String}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, Char})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, String}, Base.Dict{Char, String}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, Char})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, Base.RefValue{Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.replace), Tuple{Array{String, 1}, Base.RefValue{Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.replace), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Pair{String, String}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.replace), Tuple{Array{String, 1}, Base.RefValue{Base.Pair{String, String}}}}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, Symbol})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.is3d), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, Float64})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, Float64}, Base.Pair{String, Float64}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Float64}, Base.Pair{String, Float64}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{}, 1}, Int64})
precompile(Tuple{Type{PGFPlotsX.Axis}, PGFPlotsX.Options})
precompile(Tuple{typeof(Plots.single_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, String}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Plots.is3d), Plots.Attr})
precompile(Tuple{typeof(Plots.trueOrAllTrue), typeof(Plots.is3d), Symbol})
precompile(Tuple{typeof(Base.vcat), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.in), Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Float64, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#54#56")){Plots.Series}, Symbol})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#54#56")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Plots, Symbol("#55#57")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.iter_segments), Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Base.OneTo{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Nothing, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Nothing, Symbol})
precompile(Tuple{typeof(Plots.pgfx_arrow), Plots.Arrow})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Nothing, Nothing})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, Nothing})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(Plots.straightline_data), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.shape_data), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Series, PGFPlotsX.Options, Plots.Attr, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{Type{Base.Val{:path}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, Plots.Attr, Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Tuple{Int64}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Coordinates#26")), Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Type{PGFPlotsX.Coordinates{N} where N}, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.setindex!), Array{PGFPlotsX.Coordinate{2}, 1}, PGFPlotsX.Coordinate{2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PGFPlotsX.Coordinate{2}, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Base.IndexLinear, Array{PGFPlotsX.Coordinate{2}, 1}})
precompile(Tuple{Type{PGFPlotsX.Coordinates{2}}, Array{PGFPlotsX.Coordinate{2}, 1}})
precompile(Tuple{Type{PGFPlotsX.Plot}, Bool, Bool, PGFPlotsX.Options, PGFPlotsX.Coordinates{2}, Tuple{}})
precompile(Tuple{Type{PGFPlotsX.Plot}, PGFPlotsX.Options, PGFPlotsX.Coordinates{2}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Axis, PGFPlotsX.Plot})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{PGFPlotsX.LegendEntry}, PGFPlotsX.Options, String, Bool})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Axis, PGFPlotsX.LegendEntry})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.TikzPicture, PGFPlotsX.Axis})
precompile(Tuple{typeof(Base.getproperty), Plots.PGFPlotsXPlot, Symbol})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.TikzDocument, Symbol})
precompile(Tuple{typeof(Base.push!), Plots.PGFPlotsXPlot, PGFPlotsX.TikzPicture})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Series, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), Plots.Series, Symbol})
precompile(Tuple{typeof(Base.getindex), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots.pgfx_axes), Plots.PGFPlotsXPlot})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.TikzPicture, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Union{String, PGFPlotsX.TikzElement}, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.Axis, Symbol})
precompile(Tuple{typeof(Base.count), getfield(Main, Symbol("#5#17")), Array{Any, 1}})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.Plot, Symbol})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.Options, Symbol})
precompile(Tuple{typeof(Base.haskey), OrderedCollections.OrderedDict{Any, Any}, String})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{Type{NamedTuple{(:stop, :length), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :length), Tuple{Float64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(Base.map), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.cos), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.cos)}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.cos)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.cos)}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sin), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.sin)}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.sin)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.sin)}})
precompile(Tuple{typeof(Base.reverse), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.stroke), Int64, Vararg{Int64, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#61#62")), Int64})
precompile(Tuple{getfield(Plots, Symbol("##stroke#93")), Nothing, typeof(Plots.stroke), Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Int64})
precompile(Tuple{Type{NamedTuple{(:zcolor, :m, :leg, :cbar, :w), T} where T<:Tuple}, Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:zcolor, :m, :leg, :cbar, :w), Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :leg, :cbar, :w), Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :leg, :cbar, :w), Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Float64, Symbol, Plots.Stroke}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#61#62")), Float64})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Float64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Float64})
precompile(Tuple{getfield(Plots, Symbol("#61#62")), Symbol})
precompile(Tuple{typeof(Plots.handleColors!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.PGFPlotsXBackend, Symbol})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(PlotUtils.iscgrad_symbol), Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorGradient, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#61#62")), Plots.Stroke})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Plots.Stroke})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Plots.Stroke})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.Stroke})
precompile(Tuple{typeof(Colors._parse_colorant), Type{ColorTypes.RGBA{Float64}}, Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}, String})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.convertLegendValue), Bool})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.size), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorGradient, Symbol})
precompile(Tuple{typeof(Plots.get_series_color), PlotUtils.ColorGradient, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), PlotUtils.ColorGradient})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, PlotUtils.ColorGradient, Symbol})
precompile(Tuple{typeof(Plots.get_series_color), ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRange{Int64, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, PlotUtils.ColorGradient})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{Type{NamedTuple{(:w,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:w,), Tuple{Int64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Float64, String})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Float64, ColorTypes.RGBA{Float64}, Float64, Symbol})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(Base.string), String, Int64, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Int64}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Any, Any}, Tuple{Int64, Int64}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Tuple{Int64, Int64}, String})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.firstindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#7#9")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#7#9"))}})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Attr, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Attr, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{typeof(Base.Math.clamp), Float64, Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(Base.string), Float64, String})
precompile(Tuple{typeof(Base.print_to_string), Float64, Vararg{Any, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Int64}, Base.Pair{String, Int64}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Int64}, Base.Pair{String, Int64}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, PGFPlotsX.Options}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, PGFPlotsX.Options}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Val{:path3d}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path3d}, PGFPlotsX.Options, Plots.Attr, Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Tuple{Int64}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Coordinates#27")), Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Type{PGFPlotsX.Coordinates{N} where N}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{3}}})
precompile(Tuple{typeof(Base.setindex!), Array{PGFPlotsX.Coordinate{3}, 1}, PGFPlotsX.Coordinate{3}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{PGFPlotsX.Coordinate{3}, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{3}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{3}}, 1}, Array{PGFPlotsX.Coordinate{3}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{3}, 1}, Array{PGFPlotsX.Coordinate{3}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{3}}, 1}, Array{PGFPlotsX.Coordinate{3}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{3}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{3}, 1}, Array{PGFPlotsX.Coordinate{3}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{3}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{3}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Nothing, PGFPlotsX.Coordinate{3}}, 1}, Base.IndexLinear, Array{PGFPlotsX.Coordinate{3}, 1}})
precompile(Tuple{Type{PGFPlotsX.Coordinates{3}}, Array{PGFPlotsX.Coordinate{3}, 1}})
precompile(Tuple{Type{PGFPlotsX.Plot}, Bool, Bool, PGFPlotsX.Options, PGFPlotsX.Coordinates{3}, Tuple{}})
precompile(Tuple{typeof(PGFPlotsX.Plot3), PGFPlotsX.Options, PGFPlotsX.Coordinates{3}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Plots.SegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{getfield(Main, Symbol("#7#19"))})
precompile(Tuple{typeof(Base.redirect_stderr), getfield(Main, Symbol("#7#19")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#6#18")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base._redirect_stderr), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.redirect_stderr), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{typeof(Test.contains_warn), String, Base.Regex})
precompile(Tuple{Type{NamedTuple{(:force,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##rm")), NamedTuple{(:force,), Tuple{Bool}}, typeof(Base.Filesystem.rm), String})
precompile(Tuple{typeof(Base.getindex), PGFPlotsX.Axis, String})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{typeof(Random._rand_max383!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.CloseOpen01{Float64}})
precompile(Tuple{typeof(Random.DSFMT.dsfmt_fill_array_close_open!), Random.DSFMT.DSFMT_state, Ptr{Float64}, Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.SamplerTrivial{Random.CloseOpen01{Float64}, Float64}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.rand), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:lab, :w, :palette, :fill, :α), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Int64, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Int64, Symbol, Int64, Float64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:lab, :w, :palette, :fill, :α), Tuple{String, Int64, Symbol, Int64, Float64}}, typeof(RecipesBase.plot), Base.StepRange{Int64, Int64}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:lab, :w, :palette, :fill, :α), Tuple{String, Int64, Symbol, Int64, Float64}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:lab, :w, :palette, :fill, :α), Tuple{String, Int64, Symbol, Int64, Float64}}}, typeof(RecipesBase.plot), Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.wraptuple), Int64})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRange{Int64, Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._collect), Base.StepRange{Int64, Int64}, Base.Generator{Base.StepRange{Int64, Int64}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.all3D), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Float64, 2}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Float64, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.StepRange{Int64, Int64}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Plots.trueOrAllTrue), getfield(Plots, Symbol("#158#159")), Symbol})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Plots.process_fillrange), Int64, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Int64})
precompile(Tuple{typeof(Plots.stroke), Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##stroke#93")), Nothing, typeof(Plots.stroke), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.allStyles), Int64})
precompile(Tuple{typeof(Plots.allAlphas), Int64})
precompile(Tuple{typeof(Plots.allStyles), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.abs), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.abs), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{Type{NamedTuple{(:zcolor, :m, :ms, :lab), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:zcolor, :m, :ms, :lab), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter!")), NamedTuple{(:zcolor, :m, :ms, :lab), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}}, typeof(Plots.scatter!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Float64, Plots.Stroke}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Float64, Plots.Stroke}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Array{Float64, 1}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{Type{Plots.SegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Float64, Symbol})
precompile(Tuple{typeof(Plots._cycle), Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{String, String}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{String, String}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, String}, String, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, String}, String, String})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.convert), Type{OrderedCollections.OrderedDict{Any, Any}}, OrderedCollections.OrderedDict{String, String}})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_fillalpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.pgfx_fillstyle), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_markerstrokecolor), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_markerstrokealpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.pgfx_marker), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.pgfx_fillrange_series!), PGFPlotsX.Axis, Plots.Series, Type{T} where T, Int64, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.StepRange{Int64, Int64}, getfield(Plots, Symbol("#14#15")){Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.StepRange{Int64, Int64}, Base.Generator{Base.StepRange{Int64, Int64}, getfield(Plots, Symbol("#14#15")){Array{Int64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Tuple{Int64}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Coordinates#26")), Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Type{PGFPlotsX.Coordinates{N} where N}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.pgfx_fillrange_args), Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Int64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(PGFPlotsX.PlotInc), PGFPlotsX.Options, PGFPlotsX.Coordinates{2}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#replace_underline#9")), String})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.:(!=)), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.:(!=)), Float64, Nothing})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, Plots.Attr, Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#6#8")), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{Base.OneTo{Int64}, getfield(Plots, Symbol("#6#8"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, getfield(Plots, Symbol("#6#8"))}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{Int64, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Series, PGFPlotsX.Options, Plots.Attr, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#535#536")){Array{Int64, 1}}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Val{:scatter}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:scatter}, PGFPlotsX.Options, Plots.Attr, Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("#535#536")){Array{Int64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Tuple{Int64}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Coordinates#26")), Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Type{PGFPlotsX.Coordinates{N} where N}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, PGFPlotsX.Coordinate{2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{Int64, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.count), getfield(Main, Symbol("#8#20")), Array{Any, 1}})
precompile(Tuple{typeof(Base.count), getfield(Main, Symbol("#9#21")), Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PGFPlotsX.Options, String})
precompile(Tuple{Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{NamedTuple{(:reg, :fill), T} where T<:Tuple}, Tuple{Bool, Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Tuple{Int64, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.length), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.ones), Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.OneTo{Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Base.OneTo{Int64}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._typed_hcat), Type{Float64}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.hcat), Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.size), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{typeof(LinearAlgebra.istril), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(LinearAlgebra.istriu), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(LinearAlgebra.diag), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(\)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##lu!#131")), Bool, typeof(LinearAlgebra.lu!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.getrs!), Char, Array{Float64, 2}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.geqp3!), Array{Float64, 2}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.qr!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float64, 2}, Int64, Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(LinearAlgebra.qr), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.laic1!), Int64, Array{Float64, 1}, Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Int64}, true}, Float64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(LinearAlgebra.triu!), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormqr!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.dot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), LinearAlgebra.QRPackedQ{Float64, Array{Float64, 2}}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.QRPackedQ{Float64, Array{Float64, 2}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getproperty), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormqr!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormrz!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.invperm), Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexCartesian, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 2}, Float64})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra._cut_B), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(\)), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Plots.ignorenan_minimum), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.ignorenan_maximum), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:path}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:markersize, :c), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:markersize, :c), Tuple{Int64, Symbol}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter!")), NamedTuple{(:markersize, :c), Tuple{Int64, Symbol}}, typeof(Plots.scatter!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.supported_markers)})
precompile(Tuple{getfield(Main, Symbol("#10#22")), Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#10#22")), Array{Symbol, 1}})
precompile(Tuple{typeof(Plots.supported_markers), Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Base.reshape), Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Symbol, 2}})
precompile(Tuple{Type{NamedTuple{(:stop, :length), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :length), Tuple{Int64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(Base.lastindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(*)), Base.TwicePrecision{Float64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.reverse), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.repeat), Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Symbol, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{Symbol, 2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 2}, String, Base.Generator{Array{Symbol, 2}, typeof(Base.string)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Symbol, 2}, Base.Generator{Array{Symbol, 2}, typeof(Base.string)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{Symbol, 2}, Base.Generator{Array{Symbol, 2}, typeof(Base.string)}})
precompile(Tuple{Type{NamedTuple{(:m, :lab, :bg, :xlim, :ylim), T} where T<:Tuple}, Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter")), NamedTuple{(:m, :lab, :bg, :xlim, :ylim), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, typeof(Plots.scatter), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#401")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:m, :lab, :bg, :xlim, :ylim), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, typeof(Plots.scatter), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Symbol}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:m, :lab, :bg, :xlim, :ylim, :seriestype), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:m, :lab, :bg, :xlim, :ylim, :seriestype), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Symbol}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:m, :lab, :bg, :xlim, :ylim, :seriestype), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 2}, Symbol})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Int64, Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:lims,), Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:lims,), Tuple{Tuple{Int64, Int64}}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:lims,), Tuple{Tuple{Int64, Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.isempty), Array{String, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{String, 2}, Int64})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Type{T} where T})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Nothing}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Type{Plots.Shape}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Any, Nothing}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, Type{T} where T})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Any, Nothing}, Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, Type{T} where T})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randn_unlikely), Random.MersenneTwister, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}, Int64})
precompile(Tuple{typeof(Plots.fakedata), Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.zeros), Int64, Int64})
precompile(Tuple{typeof(Base.to_indices), Array{Float64, 2}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, Array{Float64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.vec), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.hcat), Symbol, Symbol, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{Type{NamedTuple{(:layout, :palette, :bg_inside), T} where T<:Tuple}, Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:layout, :palette, :bg_inside), Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:layout, :palette, :bg_inside), Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:layout, :palette, :bg_inside), Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Symbol, 2}, Symbol})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.wrap_surfaces), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.randn), Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(+)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.big), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.abs), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.abs), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:proj, :m), T} where T<:Tuple}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Int64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:proj, :m), Tuple{Symbol, Int64}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:proj, :m), Tuple{Symbol, Int64}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:proj, :m), Tuple{Symbol, Int64}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.vect), Tuple{Float64, Float64}, Vararg{Tuple{Float64, Float64}, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{Type{Plots.Shape}, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Int64, Int64, Int64, Float64})
precompile(Tuple{Type{NamedTuple{(:line, :marker, :bg, :fg, :xlim, :ylim, :leg), T} where T<:Tuple}, Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:line, :marker, :bg, :fg, :xlim, :ylim, :leg), Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:line, :marker, :bg, :fg, :xlim, :ylim, :leg), Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:line, :marker, :bg, :fg, :xlim, :ylim, :leg), Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#59#60")), Int64})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#59#60")), Symbol})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Shape, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#61#62")), Plots.Shape})
precompile(Tuple{typeof(Plots.handleColors!), Base.Dict{Symbol, Any}, Plots.Shape, Symbol})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Plots.Shape})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Plots.Shape})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.Shape})
precompile(Tuple{getfield(Plots, Symbol("#63#65")), ColorTypes.RGBA{Float64}})
precompile(Tuple{getfield(Plots, Symbol("#61#62")), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.handleColors!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots._replace_markershape), Plots.Shape})
precompile(Tuple{typeof(Base.:(==)), Plots.Shape, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Plots.Shape})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Shape})
precompile(Tuple{Type{NamedTuple{(:nbins,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#kw##histogram2d")), NamedTuple{(:nbins,), Tuple{Int64}}, typeof(Plots.histogram2d), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##histogram2d#415")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:nbins,), Tuple{Int64}}}, typeof(Plots.histogram2d), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:nbins, :seriestype), Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:nbins, :seriestype), Tuple{Int64, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:nbins, :seriestype), Tuple{Int64, Symbol}}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram2d}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Int64, 0}}})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#114")), Any, Any, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#115")), Any, Any, Any})
precompile(Tuple{typeof(Base.map), typeof(Base.eltype), Core.SimpleVector})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:histogram2d}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{getfield(Plots, Symbol("#kw##_make_hist")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Plots._hist_edges), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{getfield(Plots, Symbol("##_make_hist#234")), Bool, Nothing, typeof(Plots._make_hist), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#77#78")){getfield(Base, Symbol("#58#59")){typeof(Base.isfinite)}}, Base.Iterators.Pairs{Int64, Float64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Float64, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#77#78")){getfield(Base, Symbol("#58#59")){typeof(Base.isfinite)}}, Base.Iterators.Pairs{Int64, Float64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Float64, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Plots, Symbol("#230#233")){Base.Set{Int64}}, Base.Iterators.Enumerate{Array{Float64, 1}}}, getfield(Plots, Symbol("#229#232"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Plots, Symbol("#230#233")){Base.Set{Int64}}, Base.Iterators.Enumerate{Array{Float64, 1}}}, getfield(Plots, Symbol("#229#232"))}})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.nbitslen), Float64, Int64})
precompile(Tuple{typeof(Base.floatrange), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(StatsBase.histrange), Float64, Float64, Int64, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#227#228")){Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.fill!), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.searchsortedlast), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.push!), StatsBase.Histogram{Int64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Float64, Float64}, Int64})
precompile(Tuple{getfield(StatsBase, Symbol("##fit#131")), Symbol, typeof(StatsBase.fit), Type{StatsBase.Histogram{Int64, N, E} where E where N}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(StatsBase, Symbol("#kw##fit")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 2}, Base.IndexLinear, Array{Int64, 2}})
precompile(Tuple{typeof(Base.float), StatsBase.Histogram{Int64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(StatsBase, Symbol("##s188#139")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nref")), LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#137")), Any, Any, Any, Any})
precompile(Tuple{typeof(LinearAlgebra.norm), StatsBase.Histogram{Float64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Float64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Float64, 2}})
precompile(Tuple{getfield(StatsBase, Symbol("##normalize!#138")), Symbol, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("#kw##normalize!")), NamedTuple{(:mode,), Tuple{Symbol}}, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{Type{Plots.Surface{M} where M<:(AbstractArray{T, 2} where T)}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Plots.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots.replaceAlias!), Plots.Attr, Symbol, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.replaceAliases!), Plots.Attr, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.preprocessArgs!), Plots.Attr})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Symbol}, Base.KeySet{Symbol, Plots.Attr}, Base.HasLength})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Plots.Attr}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.wraptuple), Nothing})
precompile(Tuple{typeof(Plots.series_annotations), Nothing})
precompile(Tuple{typeof(Base.:(==)), Nothing, Bool})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Base.deepcopy), Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(+)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(/)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:bins2d}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.size), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.eltype), Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol, Bool})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base._collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Plots, Symbol("#105#106")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Float64}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Plots, Symbol("#105#106")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Plots, Symbol("#105#106")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Plots, Symbol("#105#106")){Symbol}}, Int64})
precompile(Tuple{typeof(Plots._heatmap_edges), Array{Float64, 1}, Bool})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#11#23")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#11#23"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#11#23"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#12#24")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#12#24"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#12#24"))}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Base.UnitRange{Int64}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.UnitRange{Int64}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.UnitRange{Int64}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(LinearAlgebra.matmul2x2!), Array{Int64, 2}, Char, Char, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(LinearAlgebra.matmul3x3!), Array{Int64, 2}, Char, Char, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(LinearAlgebra.copy_transpose!), Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 2}, Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Int64, 2, Array{Int64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra._generic_matmatmul!), Array{Int64, 2}, Char, Char, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(LinearAlgebra.generic_matmatmul!), Array{Int64, 2}, Char, Char, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, LinearAlgebra.MulAddMul{true, true, Bool, Bool}})
precompile(Tuple{typeof(Base.:(*)), Base.UnitRange{Int64}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}})
precompile(Tuple{typeof(Base.float), Array{Int64, 2}})
precompile(Tuple{Type{NamedTuple{(:aspect_ratio,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#kw##heatmap")), NamedTuple{(:aspect_ratio,), Tuple{Int64}}, typeof(Plots.heatmap), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##heatmap#419")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:aspect_ratio,), Tuple{Int64}}}, typeof(Plots.heatmap), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:aspect_ratio, :seriestype), Tuple{Int64, Symbol}}, typeof(RecipesBase.plot), Array{String, 1}, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:aspect_ratio, :seriestype), Tuple{Int64, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:aspect_ratio, :seriestype), Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{String, 1}, Array{String, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#148#149")), Array{String, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{String, 1}, Array{String, 1}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 2}, Float64, Base.Generator{Array{Float64, 2}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#146#147")), Array{Float64, 2}, Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Array{String, 1}, Array{String, 1}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:heatmap}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.size), Array{String, 1}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, String})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{String, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Plots.heatmap_edges), Array{Float64, 1}, Symbol, Bool})
precompile(Tuple{typeof(Plots.heatmap_edges), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{Type{Base.IteratorSize}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Any, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.getproperty), Plots.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{Tuple}, Tuple{Base.Broadcast.Extruded{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.unalias), Array{Base.IteratorsMD.CartesianIndex{2}, 2}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.IteratorsMD.CartesianIndex{2}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.IteratorsMD.CartesianIndex{2}, 2}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.copymutable), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.copy), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._unaliascopy), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Array{Base.IteratorsMD.CartesianIndex{2}, 2}})
precompile(Tuple{typeof(Base.unaliascopy), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Plots.surface_to_vecs), Array{Float64, 1}, Array{Float64, 1}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Plots.SegmentsIterator}, Tuple{Int64}})
precompile(Tuple{Type{Base.Val{:heatmap}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:heatmap}, PGFPlotsX.Options, Plots.Attr, Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#535#536")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, Nothing}, Base.Pair{String, Int64}, Base.Pair{String, Int64}})
precompile(Tuple{Type{PGFPlotsX.Table}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Table#45")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{PGFPlotsX.Table}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{PGFPlotsX.Table}, PGFPlotsX.Options, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Table#44")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{PGFPlotsX.Table}, PGFPlotsX.Options, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{PGFPlotsX.TableData}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##TableData#33")), Bool, Type{PGFPlotsX.TableData}, Array{Array{Float64, 1}, 1}, Nothing, Int64})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##TableData#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{PGFPlotsX.TableData}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(Base, Symbol("#73#74")){Float64, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{PGFPlotsX.TableData}, Array{Float64, 2}, Nothing, Int64, Bool})
precompile(Tuple{Type{PGFPlotsX.Plot}, Bool, Bool, PGFPlotsX.Options, PGFPlotsX.Table, Tuple{}})
precompile(Tuple{typeof(PGFPlotsX.Plot3), PGFPlotsX.Options, PGFPlotsX.Table})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Plots.SegmentsIterator}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Main, Symbol("#14#26"))})
precompile(Tuple{typeof(Base.redirect_stderr), getfield(Main, Symbol("#14#26")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#13#25")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:aspect_ratio,), Tuple{Int64}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##wireframe")), NamedTuple{(:aspect_ratio,), Tuple{Int64}}, typeof(Plots.wireframe), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##wireframe#445")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:aspect_ratio,), Tuple{Int64}}}, typeof(Plots.wireframe), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:wireframe}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Base.Colon, Int64, Float64, Int64})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.repeat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#f#27"))}, Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 2}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#f#27"))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#f#27"))}}})
precompile(Tuple{typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##contour#437")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:contour}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Type{NamedTuple{(:fill,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Plots, Symbol("#kw##contour")), NamedTuple{(:fill,), Tuple{Bool}}, typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##contour#437")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:fill,), Tuple{Bool}}}, typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Symbol}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:fill, :seriestype), Tuple{Bool, Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:fill, :seriestype), Tuple{Bool, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:fill, :seriestype), Tuple{Bool, Symbol}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.wraptuple), Bool})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Bool})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#f#27"))}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#f#27"))}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#f#27"))}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#f#27"))}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#f#27"))}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Function})
precompile(Tuple{Type{Plots.Surface{M} where M<:(AbstractArray{T, 2} where T)}, getfield(Main, Symbol("#f#27")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.layout_args), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64, Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.merge!), Plots.Attr, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}, getfield(Plots, Symbol("#140#141"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.layout_args), Int64, Int64})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Attr})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol, Plots.PGFPlotsXPlot})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.PGFPlotsXPlot})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.in), Plots.Subplot{Plots.PGFPlotsXBackend}, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Plots._slice_series_args!), Plots.Attr, Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, PlotUtils.ColorGradient})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.PGFPlotsXBackend}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{Type{NamedTuple{(:line_z, :linewidth, :legend), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:line_z, :linewidth, :legend), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line_z, :linewidth, :legend), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line_z, :linewidth, :legend), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{NamedTuple{(:alpha,), T} where T<:Tuple}, Tuple{Nothing}})
precompile(Tuple{getfield(PlotUtils, Symbol("#kw##cgrad")), NamedTuple{(:alpha,), Tuple{Nothing}}, typeof(PlotUtils.cgrad)})
precompile(Tuple{Type{NamedTuple{(:marker_z, :color, :legend), T} where T<:Tuple}, Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:marker_z, :color, :legend), Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter")), NamedTuple{(:marker_z, :color, :legend), Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#401")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend), Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool}}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{getfield(Main, Symbol("#15#28")), Symbol, Bool, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#15#28"))}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#15#28"))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#15#28"))}}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.fill!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.fill), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.hcat), String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.permutedims), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks), T} where T<:Tuple}, Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter")), NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}}}, typeof(Plots.scatter), Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#401")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}}}}, typeof(Plots.scatter), Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks, :seriestype), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}, Symbol}}}, typeof(RecipesBase.plot), Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks, :seriestype), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}, Symbol}}, typeof(RecipesBase.plot), Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks, :seriestype), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}, Symbol}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.hash), Tuple{Int64, Int64}, UInt64})
precompile(Tuple{Type{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}, Int64})
precompile(Tuple{typeof(Base.hash), Base.IteratorsMD.CartesianIndex{2}, UInt64})
precompile(Tuple{typeof(Base.hash), Base.Pair{Base.IteratorsMD.CartesianIndex{2}, Symbol}, UInt64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Base.IteratorsMD.CartesianIndex{2}, 1, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64}})
precompile(Tuple{typeof(Base.hash), Array{Symbol, 2}, UInt64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Array{Symbol, 2}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Union{Base.Missing, Number}, 1}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Array{Float64, 1}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(Plots, Symbol("#152#155")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(Plots, Symbol("#152#155")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Vararg{Array{Any, 1}, N} where N})
precompile(Tuple{typeof(Plots.slice_arg), Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:ticks,), Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol}, NamedTuple{(:ticks,), Tuple{Base.UnitRange{Int64}}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:ticks,), Tuple{Base.UnitRange{Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.isempty), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}})
precompile(Tuple{typeof(Plots.slice_arg), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64})
precompile(Tuple{typeof(Plots.get_series_color), Int64, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:quiver, :arrow), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:quiver, :arrow), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:quiver, :arrow), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:quiver, :arrow), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Arrow, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Arrow, Bool})
precompile(Tuple{typeof(Base.in), Plots.Arrow, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Arrow})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("##font#91")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), Symbol})
precompile(Tuple{typeof(Plots.text), String, Symbol})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:annotations, :leg), T} where T<:Tuple}, Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:annotations, :leg), Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:annotations, :leg), Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:annotations, :leg), Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64, Plots.PlotText}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Tuple{Int64, Float64, Plots.PlotText}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Float64, Plots.PlotText}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Tuple{Int64, Float64, Plots.PlotText}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Any, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex_shape_check), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Float64, Plots.PlotText, Plots.Font})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{typeof(Base.methods), Any, Any})
precompile(Tuple{typeof(Plots.text), String, Int64, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##text#92")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.text), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.font), Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#91")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots.text), String, Symbol, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##text#92")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.text), String, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.font), Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#91")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Float64, Plots.PlotText}, Vararg{Tuple{Int64, Float64, Plots.PlotText}, N} where N})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.annotate!), Array{Tuple{Int64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Tuple{Symbol}, NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}}, typeof(RecipesBase.plot)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Tuple{Symbol}, NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Tuple{Symbol}, NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Any, 1}, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Base.promote_typeof), String, Plots.PlotText})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, String, String, String, String, Plots.PlotText}})
precompile(Tuple{Type{NamedTuple{(:marker, :series_annotations), T} where T<:Tuple}, Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:marker, :series_annotations), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter!")), NamedTuple{(:marker, :series_annotations), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}, typeof(Plots.scatter!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter!#402")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:marker, :series_annotations), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}}, typeof(Plots.scatter!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}, typeof(RecipesBase.plot!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}}, typeof(RecipesBase.plot!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Float64, Symbol}})
precompile(Tuple{typeof(Plots.wraptuple), Array{Any, 1}})
precompile(Tuple{typeof(Plots.series_annotations), Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.SeriesAnnotations, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Plots.SeriesAnnotations})
precompile(Tuple{typeof(Plots.series_annotations), Plots.SeriesAnnotations})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.SeriesAnnotations})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(Base, Symbol("#73#74")){Float64, Tuple{Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill), Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Function, Int64})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:ribbon,), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, typeof(RecipesBase.plot), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Symbol}, NamedTuple{(:ribbon,), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}}, typeof(RecipesBase.plot), Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Int64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Int64, 1}, Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Int64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Any}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Any}, Type{Tuple{Any}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any}, 1}, Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.process_ribbon), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Any, Any}, 1}, Int64})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.first), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.make_fillrange_side), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.isequal), String, PGFPlotsX.Options})
precompile(Tuple{typeof(Plots.pgfx_add_ribbons!), PGFPlotsX.Axis, Plots.Series, PGFPlotsX.Plot, Type{T} where T, Int64})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.repeat), Array{Float64, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Array{Float64, 1}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Base.Pair{String, Float64}, Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{PGFPlotsX.Plot}, Bool, Bool, PGFPlotsX.Options, String, Tuple{}})
precompile(Tuple{Type{PGFPlotsX.Plot}, PGFPlotsX.Options, String})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#16#29")), Array{Any, 1}})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Main.reference_dir)})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base, Symbol("##shell_parse#350")), String, typeof(Base.shell_parse), String, Bool})
precompile(Tuple{typeof(Base.shell_split), String})
precompile(Tuple{typeof(Base.parse), Type{LibGit2.GitCredentialHelper}, String})
precompile(Tuple{typeof(LibGit2.credential_helpers), LibGit2.GitConfig, LibGit2.GitCredential})
precompile(Tuple{typeof(Base.read!), Base.Process, LibGit2.GitCredential})
precompile(Tuple{typeof(LibGit2.run!), LibGit2.GitCredentialHelper, String, LibGit2.GitCredential})
precompile(Tuple{typeof(LibGit2.approve), LibGit2.GitConfig, LibGit2.UserPasswordCredential, String})
precompile(Tuple{getfield(LibGit2, Symbol("##approve#33")), Bool, typeof(LibGit2.approve), LibGit2.CredentialPayload})
precompile(Tuple{typeof(LibGit2.reject), LibGit2.GitConfig, LibGit2.UserPasswordCredential, String})
precompile(Tuple{getfield(LibGit2, Symbol("##reject#34")), Bool, typeof(LibGit2.reject), LibGit2.CredentialPayload})
precompile(Tuple{getfield(LibGit2, Symbol("##clone#131")), String, Bool, Ptr{Nothing}, Nothing, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, typeof(LibGit2.clone), String, String})
precompile(Tuple{typeof(LibGit2.clone), String, String})
precompile(Tuple{Type{NamedTuple{(:credentials,), T} where T<:Tuple}, Tuple{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:payload,), Tuple{Base.Dict{Symbol, Any}}}}, Type{NamedTuple{(:credentials,), Tuple{Ptr{Nothing}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:payload,), Tuple{Base.Dict{Symbol, Any}}}, NamedTuple{(:credentials,), Tuple{Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:version, :payload), Tuple{UInt32, Ptr{Nothing}}}}, Type{NamedTuple{(:credentials,), Tuple{Ptr{Nothing}}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:payload, :credentials), Tuple{Base.Dict{Symbol, Any}, Ptr{Nothing}}}, Type{LibGit2.RemoteCallbacks}})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Random.make_seed), Int64})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{Type{NamedTuple{(:show, :reuse), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(Plots, Symbol("##default#123")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:show, :reuse), Tuple{Bool, Bool}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("#kw##default")), NamedTuple{(:show, :reuse), Tuple{Bool, Bool}}, typeof(Plots.default)})
precompile(Tuple{typeof(Base.error), String, Symbol})
precompile(Tuple{typeof(Plots.default), Symbol, Bool})
precompile(Tuple{typeof(Main.is_ci)})
precompile(Tuple{typeof(Plots.gr)})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Base.:(==)), Plots.GRBackend, Plots.GRBackend})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:tol, :skip), T} where T<:Tuple}, Tuple{Float64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.VersionNumber}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Float64, String}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:popup,), Tuple{Bool}}}, Type{NamedTuple{(:sigma, :tol, :newfn), Tuple{Array{Int64, 1}, Float64, String}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Float64}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{3}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#61")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 3}}})
precompile(Tuple{getfield(Base, Symbol("##s66#129")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{9}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#63")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3}}})
precompile(Tuple{Type{StaticArrays.Size{(3,)}}})
precompile(Tuple{getfield(Plots, Symbol("##default#123")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:size,), Tuple{Tuple{Int64, Int64}}}}, typeof(Plots.default)})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Base.VersionNumber}, Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.VersionNumber, 1}, Int64, Array{Base.VersionNumber, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Base.VersionNumber, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Base.sort!), Array{Base.VersionNumber, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Base.VersionNumber, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sort#8")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}, typeof(Base.sort), Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.print_to_string), Base.VersionNumber})
precompile(Tuple{typeof(Main.reference_file), Symbol, Int64, Base.VersionNumber})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("##test_images#6")), Bool, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:sigma, :tol, :newfn), Tuple{Array{Int64, 1}, Float64, String}}}, typeof(VisualRegressionTests.test_images), VisualRegressionTests.VisualTest})
precompile(Tuple{getfield(Main, Symbol("##image_comparison_tests#30")), Bool, Bool, Array{Int64, 1}, Float64, typeof(Main.image_comparison_tests), Symbol, Int64})
precompile(Tuple{typeof(Base.println), Test.Error})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Error})
precompile(Tuple{typeof(Base.print), Test.Error})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Error})
precompile(Tuple{typeof(Test.do_test), Test.Threw, Expr})
precompile(Tuple{getfield(Main, Symbol("##image_comparison_facts#33")), Array{Int64, 1}, Nothing, Bool, Array{Int64, 1}, Float64, typeof(Main.image_comparison_facts), Symbol})
precompile(Tuple{getfield(Main, Symbol("#kw##image_comparison_facts")), NamedTuple{(:tol, :skip), Tuple{Float64, Array{Int64, 1}}}, typeof(Main.image_comparison_facts), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#12#13"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#12#13"))}})
precompile(Tuple{typeof(PlotUtils.clibrary), Symbol})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.debug_color)})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{typeof(Plots.default), Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Main.reference_dir), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.MainInclude.eval), Expr})
precompile(Tuple{typeof(Plots.png), String})
precompile(Tuple{getfield(Main, Symbol("#31#32")){Plots.PlotExample}, String, Int64})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:w,), Tuple{Int64}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, Plots.Attr, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._process_userrecipe), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._process_plotrecipe), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots._subplot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots._update_subplot_colors), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Int64, Bool})
precompile(Tuple{typeof(Plots._prepare_subplot), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._expand_subplot_extrema), Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._series_index), Plots.Attr, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_series_attributes!), Plots.Attr, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.warnOnUnsupported_args), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots._add_the_series), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._process_seriesrecipe), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.update_inset_bboxes!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(Base.read), String})
precompile(Tuple{typeof(Plots._display), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.inline), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.is_scale_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_scales), Plots.GRBackend, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{getfield(Plots, Symbol("##Axis#97")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.Axis}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_axis), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_axis_links), Plots.Plot{Plots.GRBackend}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.IndexLinear, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._prepare_annotations), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.addExtension), String, String})
precompile(Tuple{typeof(Plots.png), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, Base.SubString{String}})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("image/png")}}})
precompile(Tuple{typeof(Plots._show), Base.IOStream, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOStream, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#91")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_set_font")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.Math.sind), Int64})
precompile(Tuple{typeof(Base.Math.cosd), Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#391")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Plots.gr_inqtext), Int64, Int64, String})
precompile(Tuple{typeof(Plots.gr_text_size), String, Int64})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(GR.latin1), String})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Measures.Length{:mm, Float64}, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Measures.Length{:mm, Float64}, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Measures.Length{:mm, Float64}, 1}, Int64, Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{RecipesBase.AbstractLayout, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.leftpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.toppad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.rightpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.bottompad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##maximum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}, Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}}, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reduce_first), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Measures.Length{:mm, Float64}}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}, Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.fill!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.check_reducedims), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Array{Measures.Length{:mm, Float64}, 2}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.Subplot{Plots.GRBackend}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.legendtitlefont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.legendfont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.colorbar_style), Plots.Series})
precompile(Tuple{typeof(Plots.gr_update_colorbar!), Plots.GRColorbar, Plots.Series})
precompile(Tuple{getfield(Plots, Symbol("#105#106")){Symbol}, Int64})
precompile(Tuple{typeof(Plots.axis_drawing_info_3d), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline3d#390")), Symbol, Symbol, typeof(Plots.gr_polyline3d), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, typeof(GR.polyline3d)})
precompile(Tuple{typeof(Plots.gr_text), Float64, Float64, String})
precompile(Tuple{typeof(Plots.gr_get_color), Plots.Series})
precompile(Tuple{typeof(Plots.gr_set_gradient), Plots.Series})
precompile(Tuple{typeof(Plots.gr_set_viewport_polar)})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.series_annotations_shapes!), Plots.Series, Symbol})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.hascolorbar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(GR.GR3._check_error)})
precompile(Tuple{typeof(GR.GR3.volume), Array{Float64, 3}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.pie_labels), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#389")), Symbol, Symbol, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, typeof(GR.polyline)})
precompile(Tuple{typeof(Base.map), getfield(DataStructures, Symbol("#82#83")){Int64}, Tuple{DataStructures.SparseIntSet, DataStructures.SparseIntSet}})
precompile(Tuple{typeof(Plots.axis_drawing_info), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, typeof(Plots.hascolorbar)}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#52#53")){Plots.Series}}, Base.Colon})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#391")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(GR.tick), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.gr_set_linecolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64, Int64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.gr_tick_label), Plots.Axis, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_fillcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Base.getindex), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#389")), Symbol, Symbol, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Array{Float64, 1}, typeof(GR.polyline)})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_polyline")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_legend_pos), Plots.Subplot{Plots.GRBackend}, Float64, Float64})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Union{Array{Symbol, 1}, Symbol}}, String})
precompile(Tuple{typeof(FileIO.hasmagic), Symbol})
precompile(Tuple{typeof(FileIO.hasfunction), Symbol})
precompile(Tuple{typeof(FileIO.query), Base.IOStream, String})
precompile(Tuple{typeof(FileIO.query), String})
precompile(Tuple{typeof(FileIO._findmod), Symbol})
precompile(Tuple{typeof(FileIO.topimport), Symbol})
precompile(Tuple{typeof(FileIO.checked_import), Symbol})
precompile(Tuple{typeof(FileIO.handle_exceptions), Array{Any, 1}, String})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.Formatted{F} where F<:(FileIO.DataFormat{sym} where sym)})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("##compare_images#4")), Array{Int64, 1}, Float64, typeof(VisualRegressionTests.compare_images), String, String})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{WeakRef, Gtk.GLib.GObject}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkBoxLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkBoxLeaf})
precompile(Tuple{typeof(Gtk.GLib.gobject_ref), Gtk.GtkBoxLeaf})
precompile(Tuple{typeof(Base.:(==)), Gtk.GtkImageLeaf, WeakRef})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{WeakRef, Gtk.GLib.GObject}, Bool}, Gtk.GtkImageLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkImageLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkImageLeaf})
precompile(Tuple{typeof(Gtk.GLib.gobject_ref), Gtk.GtkImageLeaf})
precompile(Tuple{typeof(Base.:(==)), Gtk.GtkLabelLeaf, WeakRef})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{WeakRef, Gtk.GLib.GObject}, Bool}, Gtk.GtkLabelLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkLabelLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkLabelLeaf})
precompile(Tuple{typeof(Gtk.GLib.gobject_ref), Gtk.GtkLabelLeaf})
precompile(Tuple{typeof(VisualRegressionTests.image_widget), String})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkWindowLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkWindowLeaf})
precompile(Tuple{typeof(Gtk.GLib.gobject_ref), Gtk.GtkWindowLeaf})
precompile(Tuple{Type{Gtk.GtkWindowLeaf}, String, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Gtk.GLib.gobject_ref), Gtk.GtkFrameLeaf})
precompile(Tuple{typeof(Base.:(==)), Gtk.GtkMessageDialogLeaf, WeakRef})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{WeakRef, Gtk.GLib.GObject}, Bool}, Gtk.GtkMessageDialogLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkMessageDialogLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkMessageDialogLeaf})
precompile(Tuple{typeof(Gtk.GLib.gobject_ref), Gtk.GtkMessageDialogLeaf})
precompile(Tuple{typeof(Base.setindex!), Gtk.GLib.MutableTypes.MutableX{Gtk.GLib.GValue}, String, Type{String}})
precompile(Tuple{typeof(Gtk.GLib.set_gtk_property!), Gtk.GtkMessageDialogLeaf, Symbol, String})
precompile(Tuple{getfield(Gtk, Symbol("##GtkMessageDialogLeaf#314")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Gtk.GtkMessageDialogLeaf}, String, Tuple{Tuple{String, Int64}, Tuple{String, Int64}}, Int32, Int32, Gtk.GtkNullContainer})
precompile(Tuple{typeof(Gtk.ask_dialog), String, String, String, Gtk.GtkNullContainer})
precompile(Tuple{typeof(VisualRegressionTests.replace_refimg), String, String})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("##replace_refimg_dialog#14")), String, typeof(VisualRegressionTests.replace_refimg_dialog), String, String})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("##test_images#5")), Bool, String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:sigma, :tol), Tuple{Array{Int64, 1}, Float64}}}, typeof(VisualRegressionTests.test_images), String, String})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#kw##test_images")), NamedTuple{(:popup, :sigma, :tol, :newfn), Tuple{Bool, Array{Int64, 1}, Float64, String}}, typeof(VisualRegressionTests.test_images), String, String})
precompile(Tuple{typeof(FileIO.hasmagic), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{Type{FileIO.Stream{FileIO.DataFormat{:PNG}, Base.IOStream}}, Base.IOStream, String})
precompile(Tuple{Type{FileIO.File{FileIO.DataFormat{:PNG}}}, Nothing})
precompile(Tuple{typeof(FileIO.file!), FileIO.Stream{FileIO.DataFormat{:PNG}, Base.IOStream}})
precompile(Tuple{typeof(FileIO.unknown), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{Symbol, 1}}, Symbol})
precompile(Tuple{typeof(FileIO.applicable_loaders), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{#s18} where #s18<:(FileIO.DataFormat{sym} where sym)})
precompile(Tuple{typeof(Base.error), ImageMagick.MagickWand})
precompile(Tuple{typeof(ImageMagick.getimagetype), ImageMagick.MagickWand})
precompile(Tuple{typeof(ImageMagick.getimagecolorspace), ImageMagick.MagickWand})
precompile(Tuple{typeof(ImageMagick._metadata), ImageMagick.MagickWand})
precompile(Tuple{typeof(ImageMagick.getimageproperties), ImageMagick.MagickWand, String})
precompile(Tuple{typeof(ImageMagick.getimageproperty), ImageMagick.MagickWand, String, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, String}, Function}, Nothing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, String}, Function}, String})
precompile(Tuple{getfield(ImageMagick, Symbol("##load_#36")), Type{T} where T, String, Nothing, Bool, typeof(ImageMagick.load_), String, Bool})
precompile(Tuple{Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(ImageCore.samesize), Type{FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.array_subpadding), Type{T} where T, Type{T} where T})
precompile(Tuple{Type{Base.CyclePadding{P} where P}, DataType})
precompile(Tuple{typeof(Base.padding), Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64, Int64}, Int64})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Type{FixedPointNumbers.Normed{UInt8, 8}}, Int64})
precompile(Tuple{typeof(ImageCore.reinterpretc), Type{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(ImageCore.channelview), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.first), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{typeof(ImageCore.rawview), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{getfield(ImageMagick, Symbol("##exportimagepixels!#27")), Int64, Int64, typeof(ImageMagick.exportimagepixels!), AbstractArray{#s14, N} where N where #s14<:Union{Bool, Unsigned}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(ImageMagick.exportimagepixels!), AbstractArray{#s17, N} where N where #s17<:Union{Bool, Unsigned}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(Base.eltype), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ImageMagick.getsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(ImageMagick.colorsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(Base.similar), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.pointer), Array{UInt8, 3}})
precompile(Tuple{typeof(ImageMagick.storagetype), Type{UInt8}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.:(*)), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{UInt8, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{UInt8, 3}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Array{UInt8, 3}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{UInt8, 3}, Tuple{Bool, Bool, Bool}, Tuple{Int64, Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{3}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.identity), Tuple{Array{UInt8, 3}}}})
precompile(Tuple{typeof(ImageMagick.default_orientation), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Bool})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.cat_indices), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.UnitRange{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{T, N, perm, iperm, AA} where AA<:(AbstractArray{T, N} where N where T) where iperm where perm where N where T}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Base.PermutedDimsArrays, Symbol("#1#2")){(2, 1), (2, 1)}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.copymutable), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.copy), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base._unaliascopy), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.unaliascopy), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.unalias), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.fill!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(ImageFiltering.KernelFactors, Symbol("##IIRGaussian#23")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ImageFiltering.KernelFactors.IIRGaussian), Array{Int64, 1}})
precompile(Tuple{typeof(VisualRegressionTests.maxabsfinite), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Int64, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Int64, Int64})
precompile(Tuple{typeof(VisualRegressionTests.blurdiff), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(ImageMagick.free), ImageMagick.MagickWand})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#5")), Any, Any, Any})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{2}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 3}}})
precompile(Tuple{Type{StaticArrays.Size{(3, 3)}}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(3, 3)}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}})
precompile(Tuple{Type{StaticArrays.Size{()}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#226")), Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#227#228")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#227#228"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("#227#228")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64, Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#227#228"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#227#228"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{Int64, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64, Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#227#228"))}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple{Vararg{Int64, N} where N}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Union{StaticArrays.Dynamic, Int64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Union{StaticArrays.Dynamic, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, StaticArrays.Dynamic, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#229")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.findfirst), getfield(StaticArrays, Symbol("#230#234")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#232#236")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#232#236"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("#232#236")), Type{T} where T})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#232#236"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#232#236"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#232#236"))}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64, Int64}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 2}, Expr, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(3, 3)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(3, 3)}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#254")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#255#257")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#255#257")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#255#257"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#255#257"))}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#256#258")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#256#258")){Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#256#258")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#256#258")){Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(/)), StaticArrays.SArray{Tuple{3, 3}, Float64, 2, 9}, Float64})
precompile(Tuple{Type{ImageFiltering.KernelFactors.TriggsSdika{T, k, l, L} where L where l where k where T}, StaticArrays.SArray{Tuple{3}, Float64, 1, 3}, Float64})
precompile(Tuple{getfield(ImageFiltering.KernelFactors, Symbol("##IIRGaussian#17")), Bool, typeof(ImageFiltering.KernelFactors.IIRGaussian), Type{Float64}, Int64})
precompile(Tuple{typeof(ImageFiltering.KernelFactors.IIRGaussian), Tuple{Int64, Int64}})
precompile(Tuple{typeof(ImageFiltering.filter_type), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#259")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#260#261")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#260#261")){Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#260#261")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#260#261")){Int64}}})
precompile(Tuple{getfield(Base, Symbol("##s627#418")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("##s162#418")), Any, Any, Any, Any, Any, Type{T} where T, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#419#423")){Tuple{Int64, Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#421#425")){Int64, Tuple{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#421#425")){Int64, Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#421#425")){Int64, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), getfield(StaticArrays, Symbol("#420#424")), Array{Expr, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), getfield(StaticArrays, Symbol("#420#424")), Base.IndexLinear, Array{Expr, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#419#423")){Tuple{Int64, Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#419#423")){Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(StaticArrays.length_val), StaticArrays.Size{(3,)}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(3,)}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(3,)}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#227#228"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#227#228"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64, Array{Tuple{Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#232#236"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#232#236"))}, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#233#237")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64}, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror_), Type{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Float64, Float64, Float64})
precompile(Tuple{typeof(ImageFiltering.convert_border_eltype), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(ImageFiltering._copy!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.BorderArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, ImageFiltering.Fill{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, ImageFiltering.Fill{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(ImageFiltering.padarray), Type{ColorTypes.RGB{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(Base.unalias), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.copyto!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}})
precompile(Tuple{typeof(Base.copymutable), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}})
precompile(Tuple{typeof(Base.copy), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}})
precompile(Tuple{typeof(Base.unaliascopy), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 2}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 2}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 2}, Tuple{OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}})
precompile(Tuple{typeof(ImageFiltering._leftborder!), Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{1}, Array{Int64, 1}, Base.IteratorsMD.CartesianIndex{0}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(ImageFiltering._rightborder!), Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{1}, Base.UnitRange{Int64}, Base.IteratorsMD.CartesianIndex{0}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(ImageFiltering._imfilter_dim!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Base.OneTo{Int64}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(ImageFiltering.imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(ImageFiltering.imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGB{Float64}}, Float64})
precompile(Tuple{typeof(Base.fill!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Float64})
precompile(Tuple{typeof(Base.copyto!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Take{Base.UnitRange{Int64}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(ImageFiltering._leftborder!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{1}, Array{Int64, 1}, Base.IteratorsMD.CartesianIndex{0}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(ImageFiltering.rightΔu), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ColorTypes.RGB{Float64}, Base.IteratorsMD.CartesianIndex{1}, Int64, Base.IteratorsMD.CartesianIndex{0}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}})
precompile(Tuple{typeof(ImageFiltering._rightborder!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{1}, Base.UnitRange{Int64}, Base.IteratorsMD.CartesianIndex{0}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(ImageFiltering._imfilter_dim!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(ImageFiltering.imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 2}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(ImageFiltering._imfilter_dim!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(ImageFiltering.imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(ImageFiltering._imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(ImageFiltering._leftborder!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{0}, Array{Int64, 1}, Base.IteratorsMD.CartesianIndex{1}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(ImageFiltering.rightΔu), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ColorTypes.RGB{Float64}, Base.IteratorsMD.CartesianIndex{0}, Int64, Base.IteratorsMD.CartesianIndex{1}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}})
precompile(Tuple{typeof(ImageFiltering._rightborder!), OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{0}, Base.UnitRange{Int64}, Base.IteratorsMD.CartesianIndex{1}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(ImageFiltering._imfilter_dim!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Base.UnitRange{Int64}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.UnitRange{Int64}}}, ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(ImageFiltering.imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(ImageFiltering._imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(ImageFiltering.imfilter!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, OffsetArrays.OffsetArray{ColorTypes.RGB{Float64}, 2, Array{ColorTypes.RGB{Float64}, 2}}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NoPad{ImageFiltering.Fill{ColorTypes.RGB{Float64}, 2}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(ImageFiltering._leftborder!), Array{Float64, 1}, Array{Float64, 1}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{0}, Array{Int64, 1}, Base.IteratorsMD.CartesianIndex{0}, Float64})
precompile(Tuple{typeof(ImageFiltering._rightborder!), Array{Float64, 1}, Array{Float64, 1}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndex{0}, Base.UnitRange{Int64}, Base.IteratorsMD.CartesianIndex{0}, Float64})
precompile(Tuple{typeof(ImageFiltering._imfilter_dim!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{Float64, 1}, Array{Float64, 1}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Base.OneTo{Int64}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, ImageFiltering.Fill{Float64, 0}})
precompile(Tuple{typeof(ImageFiltering.normalize_dims!), Array{ColorTypes.RGB{Float64}, 2}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(ImageFiltering.normalize_separable!), ComputationalResources.CPU1{ImageFiltering.Algorithm.IIR}, Array{ColorTypes.RGB{Float64}, 2}, Tuple{ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.Fill{Float64, 0}})
precompile(Tuple{typeof(ImageFiltering.imfilter!), Array{ColorTypes.RGB{Float64}, 2}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NA{0}, ImageFiltering.Algorithm.IIR})
precompile(Tuple{typeof(ImageFiltering.imfilter), Type{ColorTypes.RGB{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NA{0}})
precompile(Tuple{typeof(VisualRegressionTests.sumdiff), typeof(Base.abs), Array{ColorTypes.RGB{Float64}, 2}, Array{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(VisualRegressionTests.sad), Array{ColorTypes.RGB{Float64}, 2}, Array{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(Base.max), Float32, Float32})
precompile(Tuple{typeof(Base.:(/)), Float64, Float32})
precompile(Tuple{typeof(Base.setproperty!), VisualRegressionTests.VisualTestResult, Symbol, Float64})
precompile(Tuple{typeof(Plots.frame), Plots.Animation})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.sin), typeof(Base.cos)}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:leg,), Tuple{Bool}}}, typeof(RecipesBase.plot), Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Function, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Function, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{typeof(Base.sin)}, typeof(Base.sin)})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Function, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Float64, 1}, Array{Function, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Function, 1}, getfield(Plots, Symbol("#152#155")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Function, 1}, getfield(Plots, Symbol("#152#155")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Array{Float64, 1}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sin), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.sin)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.sin)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.sin)}})
precompile(Tuple{typeof(Plots.nobigs), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.cos), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.cos)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.cos)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.cos)}})
precompile(Tuple{typeof(Plots.getxy), Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Plot{Plots.GRBackend}, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.push!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.push!), Plots.Plot{Plots.GRBackend}, Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.tovec), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.extendSeriesData), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Plots.setxy!), Plots.Plot{Plots.GRBackend}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Plots.reset_extrema!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Plots.Axis, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.frame), Plots.Animation, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_polyline")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:line, :leg, :fill), T} where T<:Tuple}, Tuple{Int64, Bool, Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool, Tuple{Int64, Symbol}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:line, :leg, :fill), Tuple{Int64, Bool, Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Function, Function, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :leg, :fill), Tuple{Int64, Bool, Tuple{Int64, Symbol}}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :leg, :fill), Tuple{Int64, Bool, Tuple{Int64, Symbol}}}}, typeof(RecipesBase.plot), Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{typeof(Base.sin), getfield(Main, Symbol("#34#35")), Int64, Float64}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, typeof(Base.sin), getfield(Main, Symbol("#34#35")), Int64, Float64}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{typeof(Base.sin), getfield(Main, Symbol("#34#35")), Int64, Float64}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.sin), getfield(Main, Symbol("#34#35")), Int64, Float64}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.sin), getfield(Main, Symbol("#34#35")), Int64, Float64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.sin), getfield(Main, Symbol("#34#35")), Int64, Float64, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.sin), getfield(Main, Symbol("#34#35")), Int64, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#34#35"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#34#35"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.sin), getfield(Main, Symbol("#34#35")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.get_series_color), ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Plots.is_2tuple), Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots._cycle), Int64, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(GR.fillarea), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_series_color), PlotUtils.ColorGradient, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#391")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.:(/)), Bool, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#391")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Float64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(Plots.gr_set_gradient), PlotUtils.ColorGradient})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Int64, Float64, Float64, Plots.Shape})
precompile(Tuple{typeof(Plots.gr_draw_marker), Int64, Float64, Float64, Symbol})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.setborderwidth), Int64})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_markercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), Float64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(GR.polymarker), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.gr_set_viewport_cmap), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.contour_levels), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_contour_levels), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_colorbar_colors), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_set_linecolor), PlotUtils.ColorGradient})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, PlotUtils.ColorGradient})
precompile(Tuple{typeof(Base.map), getfield(DataStructures, Symbol("#82#83")){Int64}, Tuple{DataStructures.SparseIntSet, DataStructures.SparseIntSet, DataStructures.SparseIntSet}})
precompile(Tuple{typeof(Plots.gr_draw_colorbar), Plots.GRColorbar, Plots.Subplot{Plots.GRBackend}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), Tuple{Float64, Float64, Float64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_get_color), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.gr_get_color), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_get_color), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_get_color), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_get_color), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{PlotUtils.ColorGradient}})
precompile(Tuple{typeof(Base.setindex!), Array{PlotUtils.ColorGradient, 1}, PlotUtils.ColorGradient, Int64})
precompile(Tuple{typeof(Base.similar), Array{PlotUtils.ColorGradient, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PlotUtils.ColorGradient, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_get_color), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{PlotUtils.ColorGradient, 1}, String})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{PlotUtils.ColorGradient, 1}, getfield(Plots, Symbol("#392#393")){PlotUtils.ColorGradient}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_fillalpha), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.similar), Array{Nothing, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Nothing, 1}, String})
precompile(Tuple{typeof(Base.convert), Type{Array{Int32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.cellarray), Float64, Float64, Float64, Float64, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.axes), Int64, Float64, Float64, Float64, Int64, Int64, Float64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_set_fill), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, Function})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#389")), Symbol, Symbol, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, typeof(GR.fillarea)})
precompile(Tuple{typeof(Plots.gr_draw_marker), Float64, Float64, Int64, Plots.Shape})
precompile(Tuple{typeof(Plots.gr_draw_marker), Float64, Float64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64})
precompile(Tuple{Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:xaxis, :background_color, :leg), T} where T<:Tuple}, Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:xaxis, :background_color, :leg), Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:xaxis, :background_color, :leg), Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:xaxis, :background_color, :leg), Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{Float64}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, String, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, String})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.hash), Base.Pair{Int64, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Base.StepRange{Int64, Int64}, UInt64})
precompile(Tuple{typeof(Plots.showaxis), Symbol, Symbol})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGB{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Plots.slice_arg), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), String, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Bool, Int64})
precompile(Tuple{Type{NamedTuple{(:lims, :flip, :ticks, :guide), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Bool, Base.StepRange{Int64, Int64}, String}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:lims, :flip, :ticks, :guide), Tuple{Tuple{Int64, Int64}, Bool, Base.StepRange{Int64, Int64}, String}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:lims, :flip, :ticks, :guide), Tuple{Tuple{Int64, Int64}, Bool, Base.StepRange{Int64, Int64}, String}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:lims, :flip, :ticks, :guide), Tuple{Tuple{Int64, Int64}, Bool, Base.StepRange{Int64, Int64}, String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.check_reducedims), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.divgcd), Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Rational{Int64}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Statistics.mean!), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##mean")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Statistics.mean), Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:line,), T} where T<:Tuple}, Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:line,), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##hline!")), NamedTuple{(:line,), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}}}, typeof(Plots.hline!), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}})
precompile(Tuple{getfield(Plots, Symbol("#59#60")), Float64})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Float64})
precompile(Tuple{typeof(Plots.handleColors!), Base.Dict{Symbol, Any}, Array{Symbol, 2}, Symbol})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Array{Symbol, 2}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, PlotUtils.ColorGradient})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 2}, PlotUtils.ColorGradient, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{Symbol, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float64}, 2}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:hline}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.isempty), Array{ColorTypes.RGBA{Float64}, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{ColorTypes.RGBA{Float64}, 2}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:hline}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Float64, Float64})
precompile(Tuple{typeof(Plots.vline!), Array{Int64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot!), Array{Int64, 1}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:vline}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.slice_arg), Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:formatter,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:formatter,), Tuple{Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:formatter,), Tuple{Symbol}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:formatter,), Tuple{Symbol}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:vline}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:title,), Tuple{String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.title!), String})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:title,), Tuple{String}}}, typeof(RecipesBase.plot)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:title,), Tuple{String}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:title,), Tuple{String}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.yaxis!), String, Symbol})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{String, Symbol}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Tuple{String, Symbol}, Tuple{Symbol}, NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}}, typeof(RecipesBase.plot)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Tuple{String, Symbol}, Tuple{Symbol}, NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Tuple{String, Symbol}, Tuple{Symbol}, NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{String, Symbol}})
precompile(Tuple{Type{NamedTuple{(:scale, :guide), T} where T<:Tuple}, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:scale, :guide), Tuple{Symbol, String}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:scale, :guide), Tuple{Symbol, String}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:scale, :guide), Tuple{Symbol, String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.gr_text_size), String})
precompile(Tuple{typeof(Plots._transform_ticks), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.in), Base.StepRange{Int64, Int64}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots.is_2tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.StepRange{Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRange{Int64, Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#109#111")){Int64, Int64}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Int64, 1}, Type{Float64}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#105#106")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.log10), Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#99#102")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{String, 1}, getfield(Plots, Symbol("#99#102"))}, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(Plots, Symbol("#99#102"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(Plots, Symbol("#99#102"))}})
precompile(Tuple{typeof(GR.tick), Int64, Int64})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Float64}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.wctondc), Int64, Float64})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{typeof(Plots.gr_axis_height), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_axis_width), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.fill), Float64, Int64})
precompile(Tuple{typeof(Plots.straightline_data), Tuple{Int64, Int64}, Tuple{Float64, Float64}, Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Int64}}, Array{Int64, 1}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Int64}}, Array{Int64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Int64}}, Array{Int64, 1}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Float64, Int64}}, Array{Int64, 1}}}}}})
precompile(Tuple{typeof(Base.download_url), String})
precompile(Tuple{typeof(Base.Filesystem.abspath), Base.SubString{String}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Filesystem.abspath), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Sys.which), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{String}}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.download_curl), String, String, String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{String}}})
precompile(Tuple{typeof(Base.download), String, String})
precompile(Tuple{typeof(Base.download), String})
precompile(Tuple{typeof(Base.setup_stdio), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Base.setproperty!), Base.Process, Symbol, Base.DevNull})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{getfield(Base, Symbol("#558#559")){Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint}})
precompile(Tuple{typeof(FileIO.load), String})
precompile(Tuple{Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, 4}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ImageCore.samesize), Type{FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, Type{FixedPointNumbers.Normed{UInt8, 8}}, Int64})
precompile(Tuple{typeof(ImageCore.reinterpretc), Type{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(ImageCore.channelview), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.first), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{typeof(ImageCore.rawview), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{typeof(Base.eltype), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ImageMagick.getsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(ImageMagick.colorsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(Base.similar), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Array{UInt8, 3}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.identity), Tuple{Array{UInt8, 3}}}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{T, N, perm, iperm, AA} where AA<:(AbstractArray{T, N} where N where T) where iperm where perm where N where T}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(ImageMagick.default_orientation), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Bool})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.copymutable), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.copy), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base._unaliascopy), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.unaliascopy), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.unalias), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(RecipesBase.plot), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(PlotUtils.cgrad_colors), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#21")), Nothing, Symbol, typeof(PlotUtils.cgrad), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base._collect), Base.OneTo{Int64}, Base.Generator{Base.OneTo{Int64}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.OneTo{Int64}, Base.OneTo{Int64}, Plots.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Plots.compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Plots.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:image}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{NamedTuple{(:flip,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:flip,), Tuple{Bool}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:flip,), Tuple{Bool}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:flip,), Tuple{Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.Extrema, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.getproperty), Plots.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##s627#431")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.isperm), Array{Int64, 1}})
precompile(Tuple{typeof(Base.checkdims_perm), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permutedims!), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.transpose_z), Plots.Series, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Bool})
precompile(Tuple{typeof(Base.vec), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.adjoint), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.size), LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_color), Tuple{LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Plots.gr_color), Tuple{LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Plots.gr_color), ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Plots.gr_color), Tuple{Base.Broadcast.Extruded{LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Plots.gr_color), Tuple{LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(GR.drawimage), Float64, Float64, Float64, Float64, Int64, Int64, Array{UInt32, 2}})
precompile(Tuple{typeof(Base.getindex), Type{Array{T, 1} where T}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.hcat), Symbol, Symbol})
precompile(Tuple{Type{NamedTuple{(:color, :line, :marker), T} where T<:Tuple}, Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :line, :marker), Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :line, :marker), Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}}}, typeof(RecipesBase.plot), Array{Array{T, 1} where T, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:color, :line, :marker), Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}}, typeof(RecipesBase.plot), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Array{Symbol, 2}})
precompile(Tuple{typeof(Base._all), getfield(Plots, Symbol("#63#65")), Array{Symbol, 2}, Base.Colon})
precompile(Tuple{typeof(Plots._replace_markershape), Array{Symbol, 2}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 2}, Symbol})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(Base.io_has_tvar_name), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Any})
precompile(Tuple{getfield(Base, Symbol("#show_bound#378")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, TypeVar})
precompile(Tuple{getfield(Base, Symbol("#show_bound#378")), Base.GenericIOBuffer{Array{UInt8, 1}}, Any})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, TypeVar})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Array{T, 1} where T, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Array{T, 1} where T, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{T, 1} where T, 1}, getfield(Plots, Symbol("#152#155")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{getfield(Plots, Symbol("#152#155")){Base.Dict{Symbol, Any}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{T, 1} where T, 1}, getfield(Plots, Symbol("#152#155")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Int64, Float64, Int64, Plots.Shape})
precompile(Tuple{typeof(Plots.gr_draw_marker), Int64, Float64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:path}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._cycle), Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#14#15")){Base.OneTo{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#14#15")){Base.OneTo{Int64}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(GR.fillarea), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#389")), Symbol, Symbol, typeof(Plots.gr_polyline), Array{Int64, 1}, Array{Float64, 1}, typeof(GR.polyline)})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_polyline")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram2d}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.size), Plots.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.transpose_z), Plots.Series, Array{Float64, 2}, Bool})
precompile(Tuple{typeof(Base.vec), Array{Float64, 2}})
precompile(Tuple{typeof(GR.setspace), Float64, Float64, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#394#397")), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#394#397")), Float64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#394#397"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#394#397"))}})
precompile(Tuple{typeof(GR.jlgr.normalize_color), Float64, Float64, Float64})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#394#397"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#394#397"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#394#397"))}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##is_uniformly_spaced#45")), Float64, typeof(Plots.is_uniformly_spaced), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.is_uniformly_spaced), Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Statistics._mean), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{Float64, 1}, getfield(PlotUtils, Symbol("#15#16")){PlotUtils.ColorGradient}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(PlotUtils, Symbol("#15#16")){PlotUtils.ColorGradient}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorGradient, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{ColorTypes.RGBA{Float64}, 1}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(PlotUtils.plot_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}, Base.RefValue{Nothing}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(PlotUtils.plot_color), Tuple{Base.Broadcast.Extruded{Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(PlotUtils.plot_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}, Base.RefValue{Nothing}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isnan), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isnan), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.isnan), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.isnan), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, Base.LogicalIndex{Int64, Base.BitArray{1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copymutable), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base._unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("#409#410"))}, Int64, Tuple{Int64, UInt64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("#409#410"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), Array{ColorTypes.RGBA{Float64}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Array{Int64, 1}}, false}, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}}}})
precompile(Tuple{typeof(Plots.gr_color), ColorTypes.RGBA{Float64}, Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_color), Tuple{Base.Broadcast.Extruded{Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}}}})
precompile(Tuple{typeof(Base.first), Array{Float64, 1}})
precompile(Tuple{typeof(Base.last), Array{Float64, 1}})
precompile(Tuple{typeof(GR.drawimage), Float64, Float64, Float64, Float64, Int64, Int64, Array{UInt32, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{T, 1} where T}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:line, :lab, :ms), T} where T<:Tuple}, Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:line, :lab, :ms), Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}}, typeof(RecipesBase.plot), Array{Array{T, 1} where T, 1}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :lab, :ms), Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :lab, :ms), Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}}}, typeof(RecipesBase.plot), Array{Array{T, 1} where T, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Array{Symbol, 2}, Int64}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Array{Symbol, 2}, Int64}})
precompile(Tuple{typeof(Base.in), Array{Symbol, 2}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Array{T, 1} where T, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}, Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.size), Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Base.axes), Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Symbol, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.getindex), Array{Symbol, 2}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{T, 1} where T, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Array{T, 1} where T, 1}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Plots.trueOrAllTrue), Function, Array{Symbol, 2}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Symbol, 2}})
precompile(Tuple{typeof(Base._all), getfield(Plots, Symbol("#158#159")), Array{Symbol, 2}, Base.Colon})
precompile(Tuple{typeof(Plots.make_steps), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:steppre}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.make_steps), Nothing, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:steppost}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:sticks}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.supported_styles)})
precompile(Tuple{getfield(Main, Symbol("#36#37")), Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#36#37")), Array{Symbol, 1}})
precompile(Tuple{typeof(Plots.supported_styles), Plots.GRBackend})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.randn), Int64, Int64})
precompile(Tuple{typeof(Base._accumulate!), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}, Int64, Nothing})
precompile(Tuple{getfield(Base, Symbol("#kw##cumsum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cumsum), Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:line, :label, :legendtitle), T} where T<:Tuple}, Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :label, :legendtitle), Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :label, :legendtitle), Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:line, :label, :legendtitle), Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Array{Symbol, 2}}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Array{Symbol, 2}}})
precompile(Tuple{getfield(Main, Symbol("#38#39")), Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#38#39")), Array{Symbol, 1}})
precompile(Tuple{typeof(Plots.supported_markers), Plots.GRBackend})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Nothing}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Int64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(GR.wctondc), Float64, Int64})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.bar), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:bar}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._scale_adjusted_values), Type{Float64}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots._binbarlike_baseline), Float64, Symbol})
precompile(Tuple{typeof(Plots._preprocess_barlike), Plots.Attr, Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:bar}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, Type{Float64}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#213#216")){Plots.Axis}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, getfield(Plots, Symbol("#213#216")){Plots.Axis}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(Base, Symbol("##diff#413")), Int64, typeof(Base.diff), Array{Int64, 1}})
precompile(Tuple{typeof(Base.diff), Array{Int64, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#214#217")), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.ignorenan_minimum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Int64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.repeat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:bins, :weights), T} where T<:Tuple}, Tuple{Symbol, Array{Int64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:bins, :weights, :seriestype), Tuple{Symbol, Array{Int64, 1}, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#kw##histogram")), NamedTuple{(:bins, :weights), Tuple{Symbol, Array{Int64, 1}}}, typeof(Plots.histogram), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:bins, :weights, :seriestype), Tuple{Symbol, Array{Int64, 1}, Symbol}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:histogram}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:barhist}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._hist_edges), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##_make_hist#234")), Bool, Array{Int64, 1}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#kw##_make_hist")), NamedTuple{(:normed, :weights), Tuple{Bool, Array{Int64, 1}}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.filter!), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#_iqr#223")), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.wand_edges), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#_cl#222")){Int64}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##_auto_binning_nbins#221")), Symbol, typeof(Plots._auto_binning_nbins), Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Plots._hist_edge), Tuple{Array{Float64, 1}}, Int64, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#227#228")){Tuple{Array{Float64, 1}}, Symbol}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), StatsBase.Weights{Int64, Int64, Array{Int64, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.append!), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Array{Float64, 1}}, StatsBase.Weights{Int64, Int64, Array{Int64, 1}}})
precompile(Tuple{getfield(StatsBase, Symbol("#kw##fit")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}}, StatsBase.Weights{Int64, Int64, Array{Int64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.float), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{getfield(StatsBase, Symbol("##normalize!#138")), Symbol, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("#kw##normalize!")), NamedTuple{(:mode,), Tuple{Symbol}}, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Symbol})
precompile(Tuple{typeof(Plots._preprocess_binlike), Plots.Attr, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._bin_centers), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:barbins}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots._preprocess_barlike), Plots.Attr, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:bar}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#213#216")){Plots.Axis}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#213#216")){Plots.Axis}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#213#216")){Plots.Axis}}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#@layout")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(Plots.create_grid), Symbol})
precompile(Tuple{typeof(Plots.create_grid_vcat), Expr})
precompile(Tuple{typeof(Plots.add_layout_pct!), Base.Dict{Symbol, Any}, Expr, Int64, Int64})
precompile(Tuple{typeof(Plots.create_grid_curly), Expr})
precompile(Tuple{typeof(Plots.create_grid), Expr})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Plots.rowsize)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.rowsize), Expr})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Int64}, Base.Generator{Array{Any, 1}, typeof(Plots.rowsize)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, typeof(Plots.rowsize)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, typeof(Plots.rowsize)}, Int64})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(Plots, Symbol("#190#191"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(Plots, Symbol("#190#191"))}})
precompile(Tuple{getfield(Plots, Symbol("#190#191")), Tuple{Int64, Expr}})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:pct, Float64}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(Plots, Symbol("#188#189"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(Plots, Symbol("#188#189"))}})
precompile(Tuple{getfield(Plots, Symbol("#188#189")), Tuple{Int64, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#188#189")), Tuple{Int64, Expr}})
precompile(Tuple{typeof(Plots.rowsize), Symbol})
precompile(Tuple{getfield(Plots, Symbol("#190#191")), Tuple{Int64, Symbol}})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{NamedTuple{(:label, :width, :height), T} where T<:Tuple}, Tuple{Symbol, Symbol, Measures.Length{:pct, Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Symbol, Measures.Length{:pct, Float64}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:label, :width, :height), Tuple{Symbol, Symbol, Measures.Length{:pct, Float64}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:label, :width, :height), Tuple{Symbol, Symbol, Measures.Length{:pct, Float64}}}, Type{Plots.EmptyLayout}})
precompile(Tuple{typeof(Base.setindex!), Plots.GridLayout, Plots.EmptyLayout, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :blank), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Bool}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}, Type{Plots.EmptyLayout}})
precompile(Tuple{typeof(Base.setindex!), Plots.GridLayout, Plots.GridLayout, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:layout, :t, :leg, :ticks, :border), T} where T<:Tuple}, Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :t, :leg, :ticks, :border), Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :t, :leg, :ticks, :border), Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:layout, :t, :leg, :ticks, :border), Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Plots.calc_num_subplots), Plots.GridLayout})
precompile(Tuple{typeof(Plots.layout_args), Plots.GridLayout})
precompile(Tuple{typeof(Plots.calc_num_subplots), Plots.EmptyLayout})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:pct, Float64}, Symbol})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Measure, 1}, Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{Nothing}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:ticks,), Tuple{Nothing}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:ticks,), Tuple{Nothing}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:ticks,), Tuple{Nothing}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:line}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##_make_hist#234")), Bool, Nothing, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#kw##_make_hist")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Float64, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("##quantile!#52")), Bool, typeof(Statistics.quantile!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.append!), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(StatsBase, Symbol("#kw##fit")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Plots.make_steps), Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:steppre}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots._transform_ticks), Nothing})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.bottom), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.GridLayout, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox!), Plots.GridLayout, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Measures.Length{:pct, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Int64})
precompile(Tuple{typeof(Plots.right), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.iter_segments), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._array_for), Type{Plots.OHLC{T} where T<:Real}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Plots.OHLC{T} where T<:Real, 1}, Tuple{Float64, Float64, Float64, Float64}, Int64})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(Plots.ohlc), Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Plots.OHLC{T} where T<:Real, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Plots.OHLC{T} where T<:Real, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Plots.OHLC{T} where T<:Real, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Plots.OHLC{T} where T<:Real, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Plots.OHLC{T} where T<:Real, 1}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeName})
precompile(Tuple{typeof(Plots.nanappend!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_xy), Array{Plots.OHLC{T} where T<:Real, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}, true}}, Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("##diff#413")), Int64, typeof(Base.diff), Base.OneTo{Int64}})
precompile(Tuple{typeof(Statistics._mean), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.get_xy), Plots.OHLC{Float64}, Int64, Float64})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Int64, Float64, Int64, Int64, Float64, Int64, Float64}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.GRBackend}, Int64, Float64, Plots.PlotText, Plots.Font})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.GRBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Tuple{Symbol}, NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getproperty), Plots.SeriesAnnotations, Symbol})
precompile(Tuple{typeof(Plots._cycle), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Plots.locate_annotation), Plots.Subplot{Plots.GRBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{typeof(Base.:(!=)), Plots.Shape, Symbol})
precompile(Tuple{typeof(Plots._cycle), Plots.Shape, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Main.f)}, Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 2}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, getfield(Base, Symbol("#3#4")){typeof(Main.f)}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, getfield(Base, Symbol("#3#4")){typeof(Main.f)}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Main.f)}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Main.f)}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Main.f)}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Main.f)}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Main.f)}})
precompile(Tuple{Type{Plots.Surface{M} where M<:(AbstractArray{T, 2} where T)}, typeof(Main.f), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:contour}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.GRBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.in), Plots.Subplot{Plots.GRBackend}, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Plots._slice_series_args!), Plots.Attr, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._series_added), Plots.Plot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Bool})
precompile(Tuple{typeof(Base.checkdims_perm), Array{Float64, 2}, Array{Float64, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permutedims!), Array{Float64, 2}, Array{Float64, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Float64})
precompile(Tuple{typeof(Base.vect), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.in), PlotUtils.ColorGradient, Tuple{ColorTypes.RGBA{Float64}, Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :length), Tuple{Float64, Int64}}, typeof(Base.range), Float64})
precompile(Tuple{typeof(Base.:(!=)), PlotUtils.ColorGradient, PlotUtils.ColorGradient})
precompile(Tuple{typeof(GR.contourf), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.contour_levels), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.contour_levels), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.contour_levels), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.contour_levels), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.contour_levels), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, getfield(Plots, Symbol("#392#393")){Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Colon})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, String})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.last), Array{Any, 1}})
precompile(Tuple{typeof(NaNMath.extrema), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(-)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(/)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(+)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Type{Int64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(GR.contour), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linewidth), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linewidth), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linewidth), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linewidth), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linewidth), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.similar), Array{Int64, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linewidth), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Int64, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linestyle), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linestyle), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linestyle), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linestyle), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linestyle), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linestyle), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Symbol, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linecolor), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linecolor), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linecolor), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linecolor), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Type{PlotUtils.ColorGradient}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PlotUtils.ColorGradient, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linecolor), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linealpha), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linealpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linealpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linealpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linealpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linealpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:title, :l), T} where T<:Tuple}, Tuple{String, Float64}})
precompile(Tuple{getfield(Plots, Symbol("#kw##pie")), NamedTuple{(:title, :l), Tuple{String, Float64}}, typeof(Plots.pie), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##pie#459")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:title, :l), Tuple{String, Float64}}}, typeof(Plots.pie), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Float64, Symbol, Symbol, Bool, Nothing, Nothing}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :l, :seriestype, :aspect_ratio, :grid, :xticks, :yticks), Tuple{String, Float64, Symbol, Symbol, Bool, Nothing, Nothing}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :l, :seriestype, :aspect_ratio, :grid, :xticks, :yticks), Tuple{String, Float64, Symbol, Symbol, Bool, Nothing, Nothing}}}, typeof(RecipesBase.plot), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:title, :l, :seriestype, :aspect_ratio, :grid, :xticks, :yticks), Tuple{String, Float64, Symbol, Symbol, Bool, Nothing, Nothing}}, typeof(RecipesBase.plot), Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#61#62")), Bool})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Bool, Symbol})
precompile(Tuple{typeof(Base.in), Bool, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), String, Bool})
precompile(Tuple{typeof(Plots.wraptuple), Float64})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{String}, String})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{String, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{String, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.compute_xyz), Array{String, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:pie}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{NamedTuple{(:grid, :ticks), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:grid, :ticks), Tuple{Bool, Nothing}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:grid, :ticks), Tuple{Bool, Nothing}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:grid, :ticks), Tuple{Bool, Nothing}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{NamedTuple{(:grid,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:grid,), Tuple{Bool}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:grid,), Tuple{Bool}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:grid,), Tuple{Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.sum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.rem), Int64, Int64})
precompile(Tuple{typeof(GR.fillarc), Float64, Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot!), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:w,), Tuple{Int64}}}, typeof(RecipesBase.plot!), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:w,), Tuple{Int64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Type{Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64, Float64}}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(GR.wc3towc), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(GR.wc3towc), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(GR.wc3towc), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(GR.wc3towc), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Float64, Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Tuple{Float64, Float64, Float64}, 1}, getfield(Plots, Symbol("#26#29"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Tuple{Float64, Float64, Float64}, 1}, getfield(Plots, Symbol("#27#30"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Tuple{Float64, Float64, Float64}, 1}, getfield(Plots, Symbol("#28#31"))}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(GR.polyline3d), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_w3tondc), Float64, Float64, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(GR.wc3towc)}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Float64, Float64, Float64}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(GR.wc3towc)}}, Int64, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(GR.wc3towc)}}})
precompile(Tuple{typeof(Base.map), Function, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#40#41")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#40#41"))}, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#40#41"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#40#41"))}})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.rand), Array{String, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:layout, :group, :linetype, :linecolor), T} where T<:Tuple}, Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :group, :linetype, :linecolor), Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :group, :linetype, :linecolor), Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:layout, :group, :linetype, :linecolor), Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.extractGroupArgs), Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#125#126")){Array{String, 1}, String}, Base.OneTo{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##extractGroupArgs#124")), Function, typeof(Plots.extractGroupArgs), Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Plots.GroupBy, Array{Float64, 1}})
precompile(Tuple{typeof(Base.union), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Int64}}, typeof(Base.push!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.union!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.splittable_kw), Symbol, Array{String, 1}, Int64})
precompile(Tuple{typeof(Plots.splittable_kw), Symbol, Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Plots.splittable_kw), Symbol, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Plots.splittable_kw), Symbol, String, Int64})
precompile(Tuple{typeof(Plots.splittable_kw), Symbol, Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Plots.splittable_kw), Symbol, Plots.GridLayout, Int64})
precompile(Tuple{typeof(Plots.splittable_kw), Symbol, Symbol, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.filter_data!), Base.Dict{Symbol, Any}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.filter_data), Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.filter_data), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.filter_data), Nothing, Array{Int64, 1}})
precompile(Tuple{typeof(Plots._preprocess_barlike), Plots.Attr, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:bar}}, Array{Int64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#213#216")){Plots.Axis}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#213#216")){Plots.Axis}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#213#216")){Plots.Axis}}})
precompile(Tuple{typeof(Plots.make_steps), Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:steppre}}, Array{Int64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(GR.tick), Int64, Float64})
precompile(Tuple{typeof(GR.setwindow), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Math.sind), Tuple{Base.Broadcast.Extruded{Base.StepRange{Int64, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Math.cosd), Tuple{Base.Broadcast.Extruded{Base.StepRange{Int64, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.gr_polaraxes), Int64, Float64, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Plots.Axis}, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_tick_label), Tuple{Tuple{Plots.Axis}, Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.gr_tick_label), Tuple{Tuple{Plots.Axis}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_tick_label), Tuple{Tuple{Plots.Axis}, Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_tick_label), Tuple{Tuple{Plots.Axis}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(GR.drawarc), Float64, Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), Array{String, 1}, Int64})
precompile(Tuple{typeof(Plots.convert_to_polar), Array{Float64, 1}, Array{Float64, 1}, Tuple{Int64, Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#42#44")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#42#44"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#42#44"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#43#45")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#43#45"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#43#45"))}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:heatmap}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{Any, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int64, Symbol})
precompile(Tuple{typeof(Plots.heatmap_edges), Array{Float64, 1}, Symbol, Array{Float64, 1}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{Any, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Any, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.hcat), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{NamedTuple{(:layout, :title, :title_location, :left_margin, :bottom_margin, :xrotation), T} where T<:Tuple}, Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :title, :title_location, :left_margin, :bottom_margin, :xrotation), Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :title, :title_location, :left_margin, :bottom_margin, :xrotation), Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:layout, :title, :title_location, :left_margin, :bottom_margin, :xrotation), Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Measures.Length{:mm, Float64}, 2}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:rotation,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:rotation,), Tuple{Int64}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:rotation,), Tuple{Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:rotation,), Tuple{Int64}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:leg,), Tuple{Bool}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64}, Tuple{Int64, Int64}, Bool}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Int64}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Function, 1}, Int64}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Int64}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Int64}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Int64}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Int64, Array{Function, 1}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Int64, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Int64, Array{Function, 1}, Nothing})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.atan), typeof(Base.cos)}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:leg, :seriestype), Tuple{Bool, Symbol}}}, typeof(RecipesBase.plot), Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{typeof(Base.atan)}, typeof(Base.atan)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.atan), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.atan)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.atan)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.atan)}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:xlims, :ylims, :leg), Tuple{Tuple{Int64, Float64}, Tuple{Int64, Int64}, Bool}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:xlims, :ylims, :leg), Tuple{Tuple{Int64, Float64}, Tuple{Int64, Int64}, Bool}}}, typeof(RecipesBase.plot), Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64}, Symbol})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{typeof(Base.log), Int64}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, typeof(Base.log), Int64}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{typeof(Base.log), Int64}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.log), Int64}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.log), Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.log), Int64})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Function})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Int64, Function})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{typeof(Base.log)}, typeof(Base.log)})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Int64, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.log), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.log)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.log)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.log)}})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Int64, Float64}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims,), T} where T<:Tuple}, Tuple{Tuple{Int64, Float64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:lims,), Tuple{Tuple{Int64, Float64}}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Float64}, Tuple{Symbol}, NamedTuple{(:lims,), Tuple{Tuple{Int64, Float64}}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:lims,), Tuple{Tuple{Int64, Float64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{NamedTuple{(:layout,), T} where T<:Tuple}, Tuple{Plots.GridLayout}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:layout,), Tuple{Plots.GridLayout}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Symbol, Plots.GridLayout, Tuple{Symbol}, NamedTuple{(:layout,), Tuple{Plots.GridLayout}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}, Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.layout_args), Int64, Plots.GridLayout})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Float64}, Symbol})
precompile(Tuple{typeof(Plots.is_2tuple), Tuple{Int64, Float64}})
precompile(Tuple{typeof(GR.setwindow), Int64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(SparseArrays.spdiagm), Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Vararg{Base.Pair{Int64, Array{Float64, 1}}, N} where N})
precompile(Tuple{typeof(SparseArrays.dimlub), Array{Int64, 1}})
precompile(Tuple{typeof(SparseArrays._spdiagm), Nothing, Base.Pair{Int64, Array{Float64, 1}}, Vararg{Base.Pair{Int64, Array{Float64, 1}}, N} where N})
precompile(Tuple{typeof(SparseArrays.spdiagm_internal), Base.Pair{Int64, Array{Float64, 1}}, Vararg{Base.Pair{Int64, Array{Float64, 1}}, N} where N})
precompile(Tuple{typeof(Base.map), getfield(SparseArrays, Symbol("#34#35")), Tuple{Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T, Type{T} where T, Type{T} where T, Type{T} where T, Vararg{Type{T} where T, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T, Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(SparseArrays.sparse_check), Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{UInt64}, Int128})
precompile(Tuple{getfield(SparseArrays, Symbol("#throwTi#2")){DataType}, String, String, Int64})
precompile(Tuple{Type{SparseArrays.SparseMatrixCSC{Tv, Ti} where Ti<:Integer where Tv}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64, Function})
precompile(Tuple{typeof(SparseArrays.sparse!), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64, typeof(Base.:(+)), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(SparseArrays.spdiagm), Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Vararg{Base.Pair{Int64, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(SparseArrays._spdiagm), Nothing, Base.Pair{Int64, Base.UnitRange{Int64}}, Vararg{Base.Pair{Int64, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(SparseArrays.spdiagm_internal), Base.Pair{Int64, Base.UnitRange{Int64}}, Vararg{Base.Pair{Int64, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(Base.map), getfield(SparseArrays, Symbol("#34#35")), Tuple{Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(SparseArrays.sparse_check), Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{SparseArrays.SparseMatrixCSC{Tv, Ti} where Ti<:Integer where Tv}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Function})
precompile(Tuple{typeof(SparseArrays.sparse!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, typeof(Base.:(+)), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Plots.Spy})
precompile(Tuple{typeof(Plots.spy), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.Spy}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Plots.Spy}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Plots.Spy}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Plots.Spy}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Plots.Spy}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Plots.Spy})
precompile(Tuple{typeof(Base.axes), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64})
precompile(Tuple{Type{Plots.Surface{M} where M<:(AbstractArray{T, 2} where T)}, SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(SparseArrays.HigherOrderFns.expandstorage!), SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64})
precompile(Tuple{typeof(SparseArrays.HigherOrderFns.trimstorage!), SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64})
precompile(Tuple{typeof(SparseArrays.HigherOrderFns._map_zeropres!), typeof(Base.float), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(SparseArrays.HigherOrderFns._noshapecheck_map), typeof(Base.float), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(SparseArrays._insert!), Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(SparseArrays._insert!), Array{Float64, 1}, Int64, Float64, Int64})
precompile(Tuple{typeof(SparseArrays._setindex_scalar!), SparseArrays.SparseMatrixCSC{Float64, Int64}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#146#147")), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.OneTo{Int64}, Base.OneTo{Int64}, Plots.Surface{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(Plots.compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Plots.Surface{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Surface{SparseArrays.SparseMatrixCSC{Float64, Int64}}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:spy}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Plots.Attr, Type{Base.Val{:spy}}, Array{Float64, 1}, Array{Float64, 1}, Plots.Surface{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(Plots.processGridArg!), Plots.Attr, Bool, Symbol})
precompile(Tuple{Type{NamedTuple{(:grid, :lims), T} where T<:Tuple}, Tuple{Bool, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:grid, :lims), Tuple{Bool, Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:grid, :lims), Tuple{Bool, Tuple{Int64, Int64}}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:grid, :lims), Tuple{Bool, Tuple{Int64, Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{NamedTuple{(:grid, :lims, :flip), T} where T<:Tuple}, Tuple{Bool, Tuple{Int64, Int64}, Bool}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:grid, :lims, :flip), Tuple{Bool, Tuple{Int64, Int64}, Bool}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:grid, :lims, :flip), Tuple{Bool, Tuple{Int64, Int64}, Bool}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:grid, :lims, :flip), Tuple{Bool, Tuple{Int64, Int64}, Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.spy), SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{typeof(Base.axes), SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{Type{Plots.Surface{M} where M<:(AbstractArray{T, 2} where T)}, SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{typeof(SparseArrays.HigherOrderFns._map_zeropres!), typeof(Base.float), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{typeof(SparseArrays.HigherOrderFns._noshapecheck_map), typeof(Base.float), SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.OneTo{Int64}, Base.OneTo{Int64}, Plots.Surface{SparseArrays.SparseMatrixCSC{Int64, Int64}}})
precompile(Tuple{typeof(Base.hcat), String, String})
precompile(Tuple{Type{NamedTuple{(:title,), T} where T<:Tuple}, Tuple{Array{String, 2}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Symbol, Array{String, 2}, Tuple{Symbol}, NamedTuple{(:title,), Tuple{Array{String, 2}}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:title,), Tuple{Array{String, 2}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.eachindex), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Int64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.wctondc), Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.gr_draw_marker), Int64, Int64, Int64, Plots.Shape})
precompile(Tuple{typeof(GR.polymarker), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_marker), Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Int64, 1}, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{Int64, Int64, Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.cellarray), Int64, Int64, Float64, Float64, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.axes), Int64, Float64, Int64, Float64, Int64, Int64, Float64})
precompile(Tuple{Type{NamedTuple{(:title,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:title,), Tuple{String}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:grid, :title), T} where T<:Tuple}, Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:grid, :title), Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:grid, :title), Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:grid, :title), Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Symbol, Symbol, Int64, Float64}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Symbol, Symbol, Int64, Float64}})
precompile(Tuple{typeof(Plots.hasgrid), Symbol, Symbol})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Int64, Symbol})
precompile(Tuple{typeof(Base.in), Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), String, Int64})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.in), Float64, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Float64})
precompile(Tuple{typeof(Base.:(==)), String, Float64})
precompile(Tuple{typeof(Base.:(==)), Nothing, Float64})
precompile(Tuple{typeof(Plots.slice_arg), Float64, Int64})
precompile(Tuple{typeof(Plots.slice_arg), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{Type{NamedTuple{(:foreground_color_grid, :grid, :gridalpha, :gridstyle, :gridlinewidth), T} where T<:Tuple}, Tuple{ColorTypes.RGBA{Float64}, Bool, Float64, Symbol, Int64}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:foreground_color_grid, :grid, :gridalpha, :gridstyle, :gridlinewidth), Tuple{ColorTypes.RGBA{Float64}, Bool, Float64, Symbol, Int64}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:foreground_color_grid, :grid, :gridalpha, :gridstyle, :gridlinewidth), Tuple{ColorTypes.RGBA{Float64}, Bool, Float64, Symbol, Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:foreground_color_grid, :grid, :gridalpha, :gridstyle, :gridlinewidth), Tuple{ColorTypes.RGBA{Float64}, Bool, Float64, Symbol, Int64}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.deepcopy), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Int64, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Plots.Series, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Plots.Series, 1}})
precompile(Tuple{typeof(Base.length), Array{Plots.Series, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{RecipesBase.AbstractLayout, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.length), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Measures.Measure, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Base.length), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Any, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.length), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Float64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{ColorTypes.RGBA{Float64}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Base.IdDict{Any, Any}})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:title,), Tuple{String}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Plots.xgrid!), Plots.Plot{Plots.GRBackend}, Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#xgrid!#497#518")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.xgrid!), Plots.Plot{Plots.GRBackend}, Symbol, Vararg{Any, N} where N})
precompile(Tuple{Type{NamedTuple{(:xgrid,), T} where T<:Tuple}, Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:xgrid,), Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:xgrid,), Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Symbol, Int64, Symbol, Float64}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Tuple{Symbol, Symbol, Int64, Symbol, Float64}, Tuple{Symbol}, NamedTuple{(:xgrid,), Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:xgrid,), Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Symbol, Int64, Symbol, Float64}})
precompile(Tuple{Type{NamedTuple{(:layout, :label, :fillrange, :fillalpha), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, String, Int64, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Int64}, String, Int64, Float64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:layout, :label, :fillrange, :fillalpha), Tuple{Tuple{Int64, Int64}, String, Int64, Float64}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :label, :fillrange, :fillalpha), Tuple{Tuple{Int64, Int64}, String, Int64, Float64}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :label, :fillrange, :fillalpha), Tuple{Tuple{Int64, Int64}, String, Int64, Float64}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Plots.layout_args), Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.min), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.add_sum), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(Plots.get_series_color), Int64, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Plots._transform_ticks), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.in), Base.UnitRange{Int64}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#109#111")){Float64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!=)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64})
precompile(Tuple{Type{NamedTuple{(:marker_z, :color, :legend), T} where T<:Tuple}, Tuple{typeof(Base.:(+)), Symbol, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{typeof(Base.:(+)), Symbol, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:marker_z, :color, :legend), Tuple{typeof(Base.:(+)), Symbol, Bool}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{typeof(Base.:(+)), Symbol, Bool, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter")), NamedTuple{(:marker_z, :color, :legend), Tuple{typeof(Base.:(+)), Symbol, Bool}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#401")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend), Tuple{typeof(Base.:(+)), Symbol, Bool}}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{typeof(Base.:(+)), Symbol, Bool, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{typeof(Base.:(+)), Symbol, Bool, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{typeof(Base.:(+)), Symbol, Bool, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Base.:(+))}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(+))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(+))}}})
precompile(Tuple{typeof(Plots._cycle), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##sum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.sum), Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}})
precompile(Tuple{typeof(Base.permutedims), Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:labels,), T} where T<:Tuple}, Tuple{Array{String, 2}}})
precompile(Tuple{getfield(Plots, Symbol("#kw##portfoliocomposition")), NamedTuple{(:labels,), Tuple{Array{String, 2}}}, typeof(Plots.portfoliocomposition), Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Array{String, 2}, Tuple{Symbol}, NamedTuple{(:labels,), Tuple{Array{String, 2}}}}, typeof(RecipesBase.plot), Plots.PortfolioComposition})
precompile(Tuple{getfield(Plots, Symbol("##portfoliocomposition#256")), Base.Iterators.Pairs{Symbol, Array{String, 2}, Tuple{Symbol}, NamedTuple{(:labels,), Tuple{Array{String, 2}}}}, typeof(Plots.portfoliocomposition), Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.PortfolioComposition}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Plots.PortfolioComposition}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Plots.PortfolioComposition}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Plots.PortfolioComposition}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Plots.PortfolioComposition}})
precompile(Tuple{typeof(Plots.isvertical), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Plots.PortfolioComposition})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._accumulaten!), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Base.OneTo{Int64}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Nothing})
precompile(Tuple{typeof(Base.axes), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.reverse), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:shape}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.LinRange{T} where T}, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, Tuple{Symbol}, NamedTuple{(:ribbon,), Tuple{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:ribbon,), Tuple{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Base.LinRange{Float64}})
precompile(Tuple{typeof(Plots.process_ribbon), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.LinRange{Float64}, typeof(Base.float)}, Int64})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Symbol}, NamedTuple{(:ribbon,), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:ribbon,), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.process_ribbon), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.wraptuple), Array{Float64, 1}})
precompile(Tuple{typeof(Base.first), Tuple{Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{typeof(Base.sqrt)}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, typeof(Base.sqrt), Tuple{Symbol}, NamedTuple{(:ribbon,), Tuple{typeof(Base.sqrt)}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:ribbon,), Tuple{typeof(Base.sqrt)}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.process_ribbon), Function, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.map), Function, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sqrt), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.OneTo{Int64}, typeof(Base.sqrt)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Base.OneTo{Int64}, Base.Generator{Base.OneTo{Int64}, typeof(Base.sqrt)}})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:ribbon,), Tuple{Int64}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:ribbon,), Tuple{Int64}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.process_ribbon), Int64, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.first), Tuple{Int64}})
precompile(Tuple{typeof(Plots.make_fillrange_side), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Plots.is_2tuple), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.StepRange{Int64, Int64}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.StepRange{Int64, Int64}, Base.Generator{Base.StepRange{Int64, Int64}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Base.Complex{Bool}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}}}})
precompile(Tuple{typeof(Base.Math.sincos_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.sincos), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Complex{Bool}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}}}}})
precompile(Tuple{Type{NamedTuple{(:nbins, :show_empty_bins, :normed, :aspect_ratio), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Bool, Bool, Int64}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nbins, :show_empty_bins, :normed, :aspect_ratio, :seriestype), Tuple{Tuple{Int64, Int64}, Bool, Bool, Int64, Symbol}}}, typeof(RecipesBase.plot), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{getfield(Plots, Symbol("#kw##histogram2d")), NamedTuple{(:nbins, :show_empty_bins, :normed, :aspect_ratio), Tuple{Tuple{Int64, Int64}, Bool, Bool, Int64}}, typeof(Plots.histogram2d), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nbins, :show_empty_bins, :normed, :aspect_ratio, :seriestype), Tuple{Tuple{Int64, Int64}, Bool, Bool, Int64, Symbol}}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Base.Complex{Float64}, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.real), Tuple{Base.Broadcast.Extruded{Array{Base.Complex{Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.imag), Tuple{Base.Broadcast.Extruded{Array{Base.Complex{Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:guide,), Tuple{String}}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Char})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:guide,), Tuple{String}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:guide,), Tuple{String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots._hist_edges), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Plots, Symbol("##_make_hist#234")), Bool, Nothing, typeof(Plots._make_hist), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#kw##_make_hist")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#225#226")){Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Int64, Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Float64, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##cat")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat#104")), Base.Val{1}, typeof(Base.cat), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Array{Float64, 1}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Float64, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Float64}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{1}, typeof(Base.cat_t), Type{Float64}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Array{Float64, 1}, Float64, Array{Float64, 1}, Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.similar), Array{Float64, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.cat_similar), Array{Float64, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Float64, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:marker,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:marker,), Tuple{Bool}}}, typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:marker,), Tuple{Bool}}, typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Bool})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Union{Base.Missing, Int64}, 1}, Nothing})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Missing}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Base.Missing, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.Missing}, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Float64, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Union{Base.Missing, Int64}, 1}, Type{Float64}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##replace!#253")), Int64, typeof(Base.replace!), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.replace!), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#146#147")), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Nothing, Array{Union{Base.Missing, Float64}, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Base.Missing})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{NamedTuple{(:arrow,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:arrow,), Tuple{Int64}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:arrow,), Tuple{Int64}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.:(==)), Int64, Bool})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Plots.arrow), Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Complex{Bool}})
precompile(Tuple{typeof(Base.:(+)), Int64, Base.Complex{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Complex{Bool}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Complex{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Complex{Int64}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Base.Complex{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Complex{Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Complex{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Complex{Float64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Base.Complex{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Complex{Float64}}, Type{Base.Complex{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Base.Complex{Float64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Complex{Int64}}, Type{Base.Complex{Float64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Float64}, Type{Base.Complex{Float64}}})
precompile(Tuple{Type{Array{Base.Complex{Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Complex{Float64}, 1}, Tuple{Int64, Base.Complex{Int64}, Float64, Base.Complex{Int64}, Int64, Base.Complex{Float64}, Int64, Base.Complex{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Complex{Float64}, 1}, Base.Complex{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Complex{Float64}, 1}, Base.Complex{Float64}, Int64})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:marker,), Tuple{Bool}}}, typeof(RecipesBase.plot), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:marker,), Tuple{Bool}}, typeof(RecipesBase.plot), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:legend,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:legend,), Tuple{Bool}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#139")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:legend,), Tuple{Bool}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Plots.Arrow})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Plots.Arrow, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Arrow, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Plots._initialize_backend), Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Plots.backend), Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Plots.unicodeplots)})
precompile(Tuple{getfield(Plots, Symbol("#327#360"))})
precompile(Tuple{getfield(Plots, Symbol("#328#361"))})
precompile(Tuple{getfield(Plots, Symbol("#329#362"))})
precompile(Tuple{Type{Ref{T} where T}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.UnicodePlotsBackend, Plots.UnicodePlotsBackend})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.UnicodePlotsBackend, Int64, Plots.Attr, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots._process_userrecipe), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._process_plotrecipe), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot_setup), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots._subplot_setup), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_colors), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.IndexLinear, Array{Plots.Subplot{Plots.UnicodePlotsBackend}, 1}})
precompile(Tuple{getfield(Plots, Symbol("##Axis#97")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.Axis}, Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_axis), Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_axis_links), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Attr, Int64, Bool})
precompile(Tuple{typeof(Plots._prepare_subplot), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._prepare_annotations), Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._expand_subplot_extrema), Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._series_index), Plots.Attr, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots._update_series_attributes!), Plots.Attr, Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.warnOnUnsupported_args), Plots.UnicodePlotsBackend, Plots.Attr})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.UnicodePlotsBackend, Symbol})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.UnicodePlotsBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.UnicodePlotsBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported), Plots.UnicodePlotsBackend, Plots.Attr})
precompile(Tuple{typeof(Plots._add_the_series), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._process_seriesrecipe), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.update_inset_bboxes!), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Plots.unicodeplots_rebuild), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots._display), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.inline), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.is_scale_supported), Plots.UnicodePlotsBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_scales), Plots.UnicodePlotsBackend, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.UnicodePlotsBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.UnicodePlotsBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.UnicodePlotsBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Int64})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.UnicodePlotsBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.:(!=)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base._show_default), Base.GenericIOBuffer{Array{UInt8, 1}}, Any})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Base.sizeof), Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Set{Symbol}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Set{Symbol}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Set{Symbol}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Set{Symbol}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Set{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Multimedia.display), Plots.PlotsDisplay, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.tick_padding), Plots.Subplot{Plots.UnicodePlotsBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.guide_padding), Plots.Axis})
precompile(Tuple{typeof(Plots.title_padding), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.UnicodePlotsBackend})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{String, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.Generator{Array{String, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.maximum), Base.Generator{Array{String, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Plots.text_size), Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.UnicodePlotsBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.UnicodePlotsBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.Subplot{Plots.UnicodePlotsBackend}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Plots.rebuildUnicodePlot!), Plots.Plot{Plots.UnicodePlotsBackend}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:width, :height, :title, :xlim, :ylim, :border), T} where T<:Tuple}, Tuple{Int64, Int64, String, Array{Float64, 1}, Array{Float64, 1}, Symbol}})
precompile(Tuple{typeof(UnicodePlots.ceil_neg_log10), Float64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Up}, Int64, Int64})
precompile(Tuple{typeof(UnicodePlots.round_up_subtick), Float64, Float64})
precompile(Tuple{typeof(UnicodePlots.round_down_subtick), Float64, Float64})
precompile(Tuple{typeof(UnicodePlots.extend_limits), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.fill!), Array{Char, 2}, Char})
precompile(Tuple{getfield(UnicodePlots, Symbol("##BrailleCanvas#13")), Float64, Float64, Float64, Float64, Type{UnicodePlots.BrailleCanvas}, Int64, Int64})
precompile(Tuple{Type{Base.Dict{Int64, Symbol}}})
precompile(Tuple{getfield(UnicodePlots, Symbol("##Plot#19")), String, String, String, String, Symbol, Int64, Int64, Bool, Nothing, Bool, Symbol, Tuple{Float64, Float64}, Type{UnicodePlots.Plot{T} where T<:UnicodePlots.GraphicsArea}, UnicodePlots.BrailleCanvas})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Symbol}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Symbol}, Symbol, Int64})
precompile(Tuple{typeof(UnicodePlots.annotate!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, Symbol, Int64, String, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, String}, Int64})
precompile(Tuple{typeof(UnicodePlots.annotate!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, Symbol, String, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, UInt8}, Symbol})
precompile(Tuple{typeof(UnicodePlots.pixel!), UnicodePlots.BrailleCanvas, Int64, Int64, Symbol})
precompile(Tuple{typeof(UnicodePlots.points!), UnicodePlots.BrailleCanvas, Float64, Float64, Symbol})
precompile(Tuple{typeof(Base.print_to_string), Float64})
precompile(Tuple{getfield(UnicodePlots, Symbol("##Plot#20")), String, String, String, String, Int64, Int64, Symbol, Array{Float64, 1}, Array{Float64, 1}, Int64, Int64, Bool, Nothing, Bool, Symbol, Tuple{Float64, Float64}, Bool, Int64, Int64, Type{UnicodePlots.Plot{T} where T<:UnicodePlots.GraphicsArea}, Array{Float64, 1}, Array{Float64, 1}, Type{UnicodePlots.BrailleCanvas}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:width, :height, :title, :xlim, :ylim, :border), Tuple{Int64, Int64, String, Array{Float64, 1}, Array{Float64, 1}, Symbol}}, Type{UnicodePlots.Plot{T} where T<:UnicodePlots.GraphicsArea}, Array{Float64, 1}, Array{Float64, 1}, Type{UnicodePlots.BrailleCanvas}})
precompile(Tuple{typeof(UnicodePlots.xlabel!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, String})
precompile(Tuple{typeof(UnicodePlots.ylabel!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, String})
precompile(Tuple{typeof(Plots.xlims), Int64})
precompile(Tuple{typeof(Plots.ylims), Int64})
precompile(Tuple{typeof(Plots.straightline_data), Plots.Attr, Int64})
precompile(Tuple{typeof(Plots.shape_data), Plots.Attr, Int64})
precompile(Tuple{getfield(Plots, Symbol("#551#553")){Plots.Attr}, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#551#553")){Plots.Attr}}})
precompile(Tuple{typeof(Plots.addUnicodeSeries!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, Plots.Attr, Bool, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.float), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Tuple{Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#551#553")){Plots.Attr}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#551#553")){Plots.Attr}}, Int64})
precompile(Tuple{typeof(Base.float), Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Iterators.filter), Function, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Plots, Symbol("#552#554")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Plots, Symbol("#552#554")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Plots, Symbol("#552#554")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Filter{getfield(Plots, Symbol("#552#554")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Filter{getfield(Plots, Symbol("#552#554")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:color, :name), T} where T<:Tuple}, Tuple{Symbol, String}})
precompile(Tuple{typeof(UnicodePlots.next_color!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}})
precompile(Tuple{typeof(UnicodePlots.lines!), UnicodePlots.BrailleCanvas, Float64, Float64, Float64, Float64, Symbol})
precompile(Tuple{getfield(UnicodePlots, Symbol("##lineplot!#50")), Symbol, String, typeof(UnicodePlots.lineplot!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(UnicodePlots, Symbol("#kw##lineplot!")), NamedTuple{(:color, :name), Tuple{Symbol, String}}, typeof(UnicodePlots.lineplot!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.show), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.show)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.show)}})
precompile(Tuple{typeof(Base.show), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.Dict{Symbol, String}}, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.ValueIterator{Base.Dict{Int64, String}}, getfield(UnicodePlots, Symbol("#27#29"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{Int64, String}}, getfield(UnicodePlots, Symbol("#27#29"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.ValueIterator{Base.Dict{Int64, String}}, getfield(UnicodePlots, Symbol("#28#30"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{Int64, String}}, getfield(UnicodePlots, Symbol("#28#30"))}})
precompile(Tuple{getfield(UnicodePlots, Symbol("##print_title#26")), Int64, Symbol, typeof(UnicodePlots.print_title), Base.PipeEndpoint, String, String})
precompile(Tuple{typeof(UnicodePlots.print_border_top), Base.PipeEndpoint, String, Int64, Symbol, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, Symbol}, UInt8})
precompile(Tuple{typeof(UnicodePlots.print_color), UInt8, Base.PipeEndpoint, Char})
precompile(Tuple{typeof(UnicodePlots.printrow), Base.PipeEndpoint, UnicodePlots.BrailleCanvas, Int64})
precompile(Tuple{typeof(UnicodePlots.print_border_bottom), Base.PipeEndpoint, String, Int64, Symbol, Symbol})
precompile(Tuple{typeof(Base.show), Base.PipeEndpoint, UnicodePlots.Plot{UnicodePlots.BrailleCanvas}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Nothing}, Base.Generator{Array{Any, 1}, typeof(Base.show)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Any, 1}, typeof(Base.show)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{Any, 1}, typeof(Base.show)}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:bar}}, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots.text), String, Symbol, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##font#91")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{Float64, Float64, Plots.PlotText}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:annotation,), Tuple{Array{Tuple{Float64, Float64, Plots.PlotText}, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}, Tuple{Symbol}, NamedTuple{(:annotation,), Tuple{Array{Tuple{Float64, Float64, Plots.PlotText}, 1}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.annotate!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Float64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Tuple{Float64, Float64, Plots.PlotText}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Any, 1}, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.UnicodePlotsBackend}, Float64, Float64, Plots.PlotText, Plots.Font})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.UnicodePlotsBackend}, Float64, Float64, Plots.PlotText})
precompile(Tuple{typeof(Plots.hline!), Plots.Plot{Plots.UnicodePlotsBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##hline!#428")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.hline!), Plots.Plot{Plots.UnicodePlotsBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:hline}}, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Tuple{Float64, Float64}, getfield(Plots, Symbol("#80#81")){Tuple{Float64, Float64}, Array{Float64, 1}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Float64, Float64}, getfield(Plots, Symbol("#80#81")){Tuple{Float64, Float64}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.straightline_data), Tuple{Float64, Float64}, Tuple{Float64, Float64}, Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Dates.Date, Vararg{Dates.Date, N} where N})
precompile(Tuple{typeof(RecipesBase.plot), Array{Dates.Date, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Dates.Date, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Dates.Date, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Dates.Date, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Dates.Date, 1}, Array{Int64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Dates.Date, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Dates.Date, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Dates.Date}, Dates.Date})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Dates.Date, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Dates.Date, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Dates.Date, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#240#241")), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Dates.Date, 1}, getfield(Plots, Symbol("#240#241"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Dates.Date, 1}, Base.Generator{Array{Dates.Date, 1}, getfield(Plots, Symbol("#240#241"))}})
precompile(Tuple{Type{Plots.Formatted{T} where T}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.Formatted{Array{Int64, 1}}}, Plots.Formatted{Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Plots.Formatted{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Plots.Formatted{Array{Int64, 1}}, Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(Plots.slice_arg), Function, Int64})
precompile(Tuple{Type{NamedTuple{(:formatter,), T} where T<:Tuple}, Tuple{typeof(Plots.dateformatter)}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:formatter,), Tuple{typeof(Plots.dateformatter)}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Symbol, typeof(Plots.dateformatter), Tuple{Symbol}, NamedTuple{(:formatter,), Tuple{typeof(Plots.dateformatter)}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#kw##attr!")), NamedTuple{(:formatter,), Tuple{typeof(Plots.dateformatter)}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.vect), Tuple{Dates.Date, Float64, Plots.PlotText}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:annotation,), Tuple{Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##plot!#143")), Base.Iterators.Pairs{Symbol, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}, Tuple{Symbol}, NamedTuple{(:annotation,), Tuple{Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.annotate!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Any, 1}, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.UnicodePlotsBackend}, Dates.Date, Float64, Plots.PlotText, Plots.Font})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.UnicodePlotsBackend}, Dates.Date, Float64, Plots.PlotText})
precompile(Tuple{typeof(Base.:(==)), Function, Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("##optimize_datetime_ticks#49")), Int64, Int64, typeof(PlotUtils.optimize_datetime_ticks), Float64, Float64})
precompile(Tuple{getfield(PlotUtils, Symbol("#kw##optimize_datetime_ticks")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_datetime_ticks), Float64, Float64})
precompile(Tuple{Type{Dates.Day}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{DataType, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Dates.Day}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{DataType, 1}, Base.RefValue{Type{Dates.Day}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{DataType, 1}, Base.RefValue{Type{Dates.Day}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{DataType, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Type{Dates.Day}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{DataType, 1}, Base.RefValue{Type{Dates.Day}}}}})
precompile(Tuple{typeof(Base.findfirst), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{DataType, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PlotUtils, Symbol("#50#51")){Dates.DateTime}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{DataType, 1}, getfield(PlotUtils, Symbol("#50#51")){Dates.DateTime}}})
precompile(Tuple{getfield(PlotUtils, Symbol("#50#51")){Dates.DateTime}, Type{T} where T})
precompile(Tuple{Type{Dates.Year}, Dates.DateTime})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{DataType, 1}, getfield(PlotUtils, Symbol("#50#51")){Dates.DateTime}}, Int64})
precompile(Tuple{Type{Dates.Month}, Dates.DateTime})
precompile(Tuple{Type{Dates.Day}, Dates.DateTime})
precompile(Tuple{Type{Dates.DateTime}, Dates.Year, Dates.Month, Dates.Day})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Day})
precompile(Tuple{typeof(Dates.guess), Dates.DateTime, Dates.DateTime, Dates.Day})
precompile(Tuple{typeof(Base.steprange_last), Dates.DateTime, Dates.Day, Dates.DateTime})
precompile(Tuple{Base.Colon, Dates.DateTime, Dates.Day, Dates.DateTime})
precompile(Tuple{typeof(Base.iterate), Base.StepRange{Dates.DateTime, Dates.Day}})
precompile(Tuple{typeof(Base.vcat), Base.StepRange{Dates.DateTime, Dates.Day}})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Dates.DateTime, Dates.Day}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Dates.DateTime, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}}}})
precompile(Tuple{typeof(Base.string), Dates.Date})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Base.Broadcast.Extruded{Array{Dates.DateTime, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Dates.value), Tuple{Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Dates.value), Tuple{Base.Broadcast.Extruded{Array{Dates.DateTime, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Dates.value), Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Int64, 1}, Float64})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot)})
precompile(Tuple{typeof(RecipesBase.plot)})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.in), Base.Pair{Any, Any}, Base.Dict{Any, Any}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#46#48")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#46#48"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#46#48"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#47#49")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#47#49"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#47#49"))}})
precompile(Tuple{typeof(Plots.histogram), Array{Int64, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram}}, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.vect), Base.Missing})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Base.Missing, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Base.Missing, 1}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Base.Missing, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.vcat), Base.Missing, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._similar_for), Array{Union{Base.Missing, Int64}, 1}, Type{Base.Missing}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Missing, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Base.Missing, 1}, Base.Missing})
precompile(Tuple{typeof(Base.fill), Base.Missing, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Base.Missing, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Tuple{Array{Base.Missing, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.vcat), Array{Base.Missing, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64, Base.Missing})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Union{Base.Missing, Int64}}, Tuple{Int64, Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Int64, Int64, Base.Missing}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Int64, Int64, Int64, Base.Missing}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Union{Base.Missing, Int64}, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.typed_hcat), Type{Union{Base.Missing, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, Int64, Base.Missing})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Union{Base.Missing, Int64}}, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{2}, typeof(Base.cat_t), Type{Union{Base.Missing, Int64}}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.cat_similar), Int64, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, Int64}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 2, Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Int64}, 2, Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Int64}, 2, Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.Missing})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Union{Base.Missing, Int64}, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 2}, Array{Union{Base.Missing, Int64}, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Tuple{Array{Union{Base.Missing, Int64}, 2}, Array{Union{Base.Missing, Int64}, 2}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Union{Base.Missing, Int64}}, Array{Union{Base.Missing, Int64}, 2}, Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Union{Base.Missing, Int64}, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 2}, Base.Missing, Base.Generator{Array{Union{Base.Missing, Int64}, 2}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 2}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 2}, Float64, Base.Generator{Array{Union{Base.Missing, Int64}, 2}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Union{Base.Missing, Int64}, 2}, Base.Generator{Array{Union{Base.Missing, Int64}, 2}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Plots.Surface{Array{Union{Base.Missing, Int64}, 2}}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Union{Base.Missing, Int64}, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Union{Base.Missing, Int64}, 2}, Nothing})
precompile(Tuple{getfield(Base, Symbol("##replace!#253")), Int64, typeof(Base.replace!), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.replace!), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Base.Missing, String})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Union{Base.Missing, String}}, Tuple{Int64, Int64}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Base.Missing, String}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.getindex), Tuple{String, String, Base.Missing, String}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{2}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.cat_similar), String, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 2, Array{Union{Base.Missing, String}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Union{Base.Missing, String}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, String}, 2, Array{Union{Base.Missing, String}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, String})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, String}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, Base.Missing, String})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{2}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_similar), Base.Missing, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, String}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, String}, 2, Array{Union{Base.Missing, String}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.Missing})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Union{Base.Missing, String}, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Union{Base.Missing, String}, 2}, Array{Union{Base.Missing, String}, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, String}}, Tuple{Array{Union{Base.Missing, String}, 2}, Array{Union{Base.Missing, String}, 2}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Union{Base.Missing, String}}, Array{Union{Base.Missing, String}, 2}, Array{Union{Base.Missing, String}, 2}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(RecipesBase.plot), Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Union{Base.Missing, String}, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(Plots._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, String}, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, String}, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#148#149")), Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Union{Base.Missing, String}, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 2}, Float64, Base.Generator{Array{Int64, 2}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 2}, Base.Generator{Array{Int64, 2}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Int64, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}, Nothing})
precompile(Tuple{typeof(Plots.compute_xyz), Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, String}, 1}, Symbol})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.vect), Plots.Plot{Plots.UnicodePlotsBackend}, Vararg{Plots.Plot{Plots.UnicodePlotsBackend}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Plots.Plot{Plots.UnicodePlotsBackend}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Plots.Plot{Plots.UnicodePlotsBackend}, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Any, 1}})
precompile(Tuple{typeof(Base.maximum), Base.Generator{Array{Any, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Array{Any, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.Generator{Array{Any, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.redirect_stderr), getfield(Main, Symbol("#51#54")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#50#53")), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{getfield(Main, Symbol("#52#55")), Int64, Int64}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, getfield(Main, Symbol("#52#55")), Int64, Int64}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{getfield(Main, Symbol("#52#55")), Int64, Int64}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(Main, Symbol("#52#55")), Int64, Int64}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(Main, Symbol("#52#55")), Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#166#167")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Function, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#166#167")){Base.Dict{Symbol, Any}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#166#167")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Plots._scaled_adapted_grid), Function, Symbol, Symbol, Int64, Int64})
precompile(Tuple{typeof(PlotUtils.adapted_grid), Function, Tuple{Float64, Float64}})
precompile(Tuple{Type{Random.MersenneTwister}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{getfield(Base, Symbol("#56#57")){getfield(Base, Symbol("#56#57")){getfield(Plots, Symbol("#105#106")){Symbol}, getfield(Main, Symbol("#52#55"))}, getfield(Plots, Symbol("#107#108")){Symbol}}, Float64})
precompile(Tuple{getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#56#57")){getfield(Base, Symbol("#56#57")){getfield(Plots, Symbol("#105#106")){Symbol}, getfield(Main, Symbol("#52#55"))}, getfield(Plots, Symbol("#107#108")){Symbol}}}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#56#57")){getfield(Base, Symbol("#56#57")){getfield(Plots, Symbol("#105#106")){Symbol}, getfield(Main, Symbol("#52#55"))}, getfield(Plots, Symbol("#107#108")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#27")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#56#57")){getfield(Base, Symbol("#56#57")){getfield(Plots, Symbol("#105#106")){Symbol}, getfield(Main, Symbol("#52#55"))}, getfield(Plots, Symbol("#107#108")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#56#57")){getfield(Plots, Symbol("#105#106")){Symbol}, getfield(Main, Symbol("#52#55"))}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#56#57")){getfield(Base, Symbol("#56#57")){getfield(Plots, Symbol("#105#106")){Symbol}, getfield(Main, Symbol("#52#55"))}, getfield(Plots, Symbol("#107#108")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.similar), Array{Float64, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#56#57")){getfield(Base, Symbol("#56#57")){getfield(Plots, Symbol("#105#106")){Symbol}, getfield(Main, Symbol("#52#55"))}, getfield(Plots, Symbol("#107#108")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isfinite), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.isfinite), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Base.extrema), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Plots, Symbol("#107#108")){Symbol}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(Plots, Symbol("#107#108")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Plots, Symbol("#107#108")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Plots, Symbol("#107#108")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Plots, Symbol("#107#108")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Plots, Symbol("#107#108")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#@animate")), LineNumberNode, Module, Expr, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##_animate#271")), Bool, typeof(Plots._animate), Expr})
precompile(Tuple{typeof(Plots._animate), Expr})
precompile(Tuple{getfield(Test, Symbol("#@test_throws")), LineNumberNode, Module, Any, Any})
precompile(Tuple{Type{Plots.Animation}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(FFMPEG_jll, Symbol("##ffmpeg#10")), Bool, Bool, typeof(FFMPEG_jll.ffmpeg), getfield(FFMPEG, Symbol("#4#6")){Base.Cmd}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:fn,), Tuple{String}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.NullLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:fn,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(DelimitedFiles.writedlm_row), Base.GenericIOBuffer{Array{UInt8, 1}}, Char, Char, Char})
precompile(Tuple{getfield(DelimitedFiles, Symbol("##writedlm#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DelimitedFiles.writedlm), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:fn,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(Plots, Symbol("##buildanimation#268")), Int64, Int64, Bool, Bool, typeof(Plots.buildanimation), Plots.Animation, String, Bool})
precompile(Tuple{typeof(Plots.gif), Plots.Animation})
precompile(Tuple{Type{Test.Threw}, ArgumentError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.println), Test.Fail})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Fail})
precompile(Tuple{typeof(Base.print), Test.Fail})
precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol, Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#3#5")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#4#6")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Test.scrub_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Fail})
precompile(Tuple{typeof(Test.do_test_throws), Test.Threw, Any, Any})
precompile(Tuple{getfield(Main, Symbol("#segments#56")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Base.UnitRange{Int64}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{getfield(Main, Symbol("#segments#56")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Base.UnitRange{Int64}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}, Vararg{AbstractArray{T, 1} where T, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Float64, 1}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Base.UnitRange{Int64}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.typed_vcat), Type{Float64}, Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}, Vararg{Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T, N} where N})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Float64, 1}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.vcat), Float64, Int64})
precompile(Tuple{getfield(Main, Symbol("#segments#56")), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Base.UnitRange{Int64}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Array{Float64, 1}, Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.vect), Tuple{String, String}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, String}, Vararg{Tuple{Int64, String}, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Int64}, Vararg{Tuple{Int64, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64, Int64, Int64}, Vararg{Tuple{Int64, Int64, Int64, Int64}, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Int64, Float64}, Tuple{Base.Missing, Base.Missing}})
precompile(Tuple{Type{Array{Tuple{Any, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any}, 1}, Tuple{Tuple{Int64, Float64}, Tuple{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Base.Missing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Int64, Base.Missing}, Tuple{Base.Missing, String}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any}, 1}, Tuple{Tuple{Int64, Base.Missing}, Tuple{Base.Missing, String}}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Base.Missing, Base.Missing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.Missing, Base.Missing, Base.Missing}, Tuple{String, String, String}})
precompile(Tuple{Type{Array{Tuple{Any, Any, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any, Any}, 1}, Tuple{Tuple{Base.Missing, Base.Missing, Base.Missing}, Tuple{String, String, String}}})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, Int64}, 1}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64}, 1}, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s24#25")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("#26#35")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("#26#35"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("#26#35"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Int64, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{2, Int64}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{2, Int64}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{2, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Tuple{String, String}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Tuple{String, String}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{String, String}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{String, 1}, Vararg{Array{String, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{String}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{String}, Type{Tuple{String}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{String, String}, 1}, Base.Iterators.Zip{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{String, String}, 1}, Array{Tuple{String, String}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{String, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{String, String}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{String, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{String, String}, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{GeometryTypes.Point{2, String}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{GeometryTypes.Point{2, String}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{2, String}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Tuple{Int64, String}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, String}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Int64, String}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{String}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, String}, 1}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, String}, 1}, Array{Tuple{Int64, String}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, String}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Int64, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, String}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#22#24"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#23#25"))}})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{2, Any}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{GeometryTypes.Point{2, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{GeometryTypes.Point{2, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64, Int64}, 1}, getfield(Plots, Symbol("#28#31"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64, Int64}, 1}, getfield(Plots, Symbol("#27#30"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64, Int64}, 1}, getfield(Plots, Symbol("#26#29"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, Int64, Int64}, 1}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Int64}, 1}, Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Int64, Int64, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{3, Int64}, 1}, getfield(Plots, Symbol("#28#31"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{3, Int64}, 1}, getfield(Plots, Symbol("#27#30"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{3, Int64}, 1}, getfield(Plots, Symbol("#26#29"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{3, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64, Int64, Int64}, 1}, getfield(Plots, Symbol("#35#39"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64, Int64, Int64}, 1}, getfield(Plots, Symbol("#34#38"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64, Int64, Int64}, 1}, getfield(Plots, Symbol("#33#37"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Int64, Int64, Int64}, 1}, getfield(Plots, Symbol("#32#36"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Int64, Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, Int64, Int64, Int64}, 1}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Int64, Int64}, 1}, Array{Tuple{Int64, Int64, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Int64, Int64, Int64, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{4, Int64}, 1}, getfield(Plots, Symbol("#35#39"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{4, Int64}, 1}, getfield(Plots, Symbol("#34#38"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{4, Int64}, 1}, getfield(Plots, Symbol("#33#37"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{4, Int64}, 1}, getfield(Plots, Symbol("#32#36"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{4, Int64}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#22#24"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#23#25"))}})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Tuple{Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{Tuple{Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Float64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, Int64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Union{Base.Missing, Float64}}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Union{Base.Missing, Int64}}, Type{Tuple{Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Float64}}, 1}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Float64}}, 1}, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int64, Float64}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Base.Missing}, Tuple{Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any}, 1}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Type{T} where T, Tuple{Array{Tuple{Any, Any}, 1}}})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryTypes.Point{2, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float64}, Int64})
precompile(Tuple{typeof(Base.similar), Array{GeometryTypes.Point{2, Float64}, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Missing, Base.Missing}})
precompile(Tuple{Type{Array{GeometryTypes.Point{2, T} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{2, T} where T, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryTypes.Point{2, T} where T, 1}, Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryTypes.Point{2, Base.Missing}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#22#24"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#23#25"))}})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{2, T} where T, 1}})
precompile(Tuple{getfield(Plots, Symbol("#22#24")), GeometryTypes.Point{2, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{GeometryTypes.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#22#24")), GeometryTypes.Point{2, Base.Missing}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#23#25")), GeometryTypes.Point{2, Float64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#23#25")), GeometryTypes.Point{2, Base.Missing}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, Float64}, 1}, Vararg{Array{Union{Base.Missing, Float64}, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Union{Base.Missing, Float64}}, Type{Tuple{Union{Base.Missing, Float64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, 1}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, 1}, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Float64, Float64}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{Tuple{Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Missing, 1}, String, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Union{Base.Missing, String}}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Union{Base.Missing, Int64}}, Type{Tuple{Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, String}}, 1}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, String}}, 1}, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int64, Base.Missing}, Tuple{Int64, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, String}, Tuple{Base.Missing, String}})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Int64, Base.Missing}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryTypes.Point{2, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{2, Union{Base.Missing, Int64}}, 1}, GeometryTypes.Point{2, Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.similar), Array{GeometryTypes.Point{2, Union{Base.Missing, Int64}}, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{2, Union{Base.Missing, Int64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Missing, String}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryTypes.Point{2, T} where T, 1}, Array{GeometryTypes.Point{2, Union{Base.Missing, Int64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryTypes.Point{2, Union{Base.Missing, String}}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#22#24")), GeometryTypes.Point{2, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{GeometryTypes.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#22#24")), GeometryTypes.Point{2, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#23#25")), GeometryTypes.Point{2, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{GeometryTypes.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#23#25")), GeometryTypes.Point{2, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#23#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Base.Missing, Base.Missing}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Base.Missing, Base.Missing}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Base.Missing, Base.Missing}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Base.Missing, 1}, Vararg{Array{Base.Missing, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Base.Missing}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Base.Missing}, Type{Tuple{Base.Missing}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Base.Missing, Base.Missing}, 1}, Base.Iterators.Zip{Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Base.Missing}, 1}, Array{Tuple{Base.Missing, Base.Missing}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Base.Missing, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Base.Missing, Base.Missing}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Base.Missing, Base.Missing}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Base.Missing, Base.Missing}, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{2, Base.Missing}, 1}, getfield(Plots, Symbol("#23#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{2, Base.Missing}, 1}, getfield(Plots, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{2, Base.Missing}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#26#29"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#27#30"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#28#31"))}})
precompile(Tuple{typeof(Plots.unzip), Array{Tuple{Any, Any, Any}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{Tuple{Any, Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#26#29"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#26#29"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#26#29"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#27#30"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#27#30"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#27#30"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#28#31"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#28#31"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(Plots, Symbol("#28#31"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, String}, 1}, Vararg{Array{Union{Base.Missing, String}, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Union{Base.Missing, String}}, Type{Tuple{Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Union{Base.Missing, String}}, Type{Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}, 1}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}, 1}, Array{Tuple{Any, Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Base.Missing, Base.Missing}, Tuple{Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), Tuple{String, String, String}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Any, Any, Any}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any, Any}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any, Any}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Type{T} where T, Tuple{Array{Tuple{Any, Any, Any}, 1}}})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryTypes.Point{3, Base.Missing}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{3, Base.Missing}, 1}, GeometryTypes.Point{3, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.similar), Array{GeometryTypes.Point{3, Base.Missing}, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{3, Base.Missing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{String, String, String}})
precompile(Tuple{Type{Array{GeometryTypes.Point{3, T} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{3, T} where T, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryTypes.Point{3, T} where T, 1}, Array{GeometryTypes.Point{3, Base.Missing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryTypes.Point{3, String}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#26#29"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#27#30"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#28#31"))}})
precompile(Tuple{typeof(Plots.unzip), Array{GeometryTypes.Point{3, T} where T, 1}})
precompile(Tuple{getfield(Plots, Symbol("#26#29")), GeometryTypes.Point{3, Base.Missing}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{GeometryTypes.Point{3, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#26#29"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#26#29"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#26#29")), GeometryTypes.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#26#29"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#27#30")), GeometryTypes.Point{3, Base.Missing}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#27#30"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#27#30"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#27#30")), GeometryTypes.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#27#30"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#28#31")), GeometryTypes.Point{3, Base.Missing}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#28#31"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#28#31"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#28#31")), GeometryTypes.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#28#31"))}, Int64, Int64})
precompile(Tuple{getfield(Gtk.GLib, Symbol("#99#100"))})
