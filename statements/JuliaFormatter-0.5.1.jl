precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(IJulia.push_preexecute_hook), Function})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#73")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.add_definitions_from_repl), String})
precompile(Tuple{typeof(Revise.maybe_parse_from_cache!), Revise.PkgData, String})
precompile(Tuple{getfield(Revise, Symbol("#40#41")){String}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#40#41")){String}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#36#37")){Base.PkgId}})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(Test, Symbol("#@test_broken")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{CSTParser.EXPR}})
precompile(Tuple{typeof(Base.allocatedinline), Type{JuliaFormatter.FST}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{JuliaFormatter.FST, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.readchar), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(CSTParser.read_comment), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(CSTParser.read_ws), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Bool, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.emit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tokenize.Tokens.Kind, Tokenize.Tokens.TokenError})
precompile(Tuple{typeof(CSTParser.lex_ws_comment), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.lex_comment), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.lex_prime), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.dotop2), Char, Char})
precompile(Tuple{typeof(Tokenize.Lexers.is_operator_start_char), UInt32})
precompile(Tuple{typeof(Tokenize.Lexers.accept_number), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, typeof(Tokenize.Lexers.ishex)})
precompile(Tuple{typeof(Tokenize.Lexers.lex_digit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_dot), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.readrest), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char, Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Char, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tuple{Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.lex_identifier), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.next_token), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Bool})
precompile(Tuple{typeof(CSTParser.next), CSTParser.ParseState})
precompile(Tuple{Type{CSTParser.ParseState}, String})
precompile(Tuple{typeof(CSTParser.update_span!), CSTParser.EXPR})
precompile(Tuple{typeof(Base.push!), CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.valid_escaped_seq), String})
precompile(Tuple{typeof(Base.getindex), CSTParser.EXPR, Int64})
precompile(Tuple{typeof(CSTParser.mLITERAL), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.closer), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.mKEYWORD), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.mIDENTIFIER), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.mOPERATOR), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.mPUNCTUATION), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.INSTANCE), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.create_tmp), CSTParser.Closer})
precompile(Tuple{typeof(CSTParser.update_to_default!), CSTParser.Closer})
precompile(Tuple{typeof(CSTParser.update_from_tmp!), CSTParser.Closer, CSTParser.Closer_TMP})
precompile(Tuple{typeof(CSTParser.parse_block), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.accept_end), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.is_assignment), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_wrapped_assignment), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_let), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_try), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.mWhereOpCall), CSTParser.EXPR, CSTParser.EXPR, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(CSTParser.parse_operator_where), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR, Bool})
precompile(Tuple{typeof(CSTParser.parse_function), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_macro), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_block), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Tuple{Tokenize.Tokens.Kind}, Bool})
precompile(Tuple{typeof(CSTParser.parse_begin), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_quote), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_for), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_while), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.accept_rparen), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_dot_mod), CSTParser.ParseState, Bool})
precompile(Tuple{typeof(Base.copyto!), Array{CSTParser.EXPR, 1}, Int64, Array{CSTParser.EXPR, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), CSTParser.EXPR, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(CSTParser.parse_imports), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_export), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_module), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_const), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_global), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_local), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_return), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_abstract), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_primitive), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_struct), CSTParser.ParseState, Bool})
precompile(Tuple{typeof(Base.pushfirst!), CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_mutable), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_kw), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser._do_kw_convert), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser._kw_convert), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_comma_sep), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(CSTParser.parse_paren), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.accept_rbrace), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.accept_rsquare), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_barray), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_braces), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.errorof), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_unary_colon), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.mUnaryOpCall), CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_unary), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.mBinaryOpCall), CSTParser.EXPR, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(Base.throw_boundserror), Array{CSTParser.EXPR, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getproperty), CSTParser.EXPR, Symbol})
precompile(Tuple{typeof(CSTParser.parse_call), CSTParser.ParseState, CSTParser.EXPR, Bool})
precompile(Tuple{typeof(CSTParser.parse_macrocall), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_expression), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.is_range), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_iterator), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_iterators), CSTParser.ParseState, Bool})
precompile(Tuple{typeof(Base.append!), CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_generator), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_do), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.isajuxtaposition), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_func_call), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_operator_eq), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_operator_cond), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_operator_colon), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_operator_anon_func), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_operator_dot), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_comp_operator), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_operator_power), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_operator), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{getfield(CSTParser, Symbol("#adjust_lcp#9")){Array{Any, 1}}, CSTParser.EXPR, Bool})
precompile(Tuple{typeof(CSTParser.dropleadlingnewline), CSTParser.EXPR})
precompile(Tuple{typeof(Tokenize.Lexers.readutf), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.length), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_string_or_cmd), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_curly), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_array), CSTParser.ParseState, Bool})
precompile(Tuple{typeof(CSTParser.parse_ref), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_tuple), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_compound), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.GlobalRefDOC)})
precompile(Tuple{typeof(CSTParser.nexttokenstartsdocstring), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_doc), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser._continue_doc_parse), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse), CSTParser.ParseState, Bool})
precompile(Tuple{Type{Base.Dict{Int64, Tuple{Int64, Int64, String}}}})
precompile(Tuple{Type{Base.Dict{Int64, Tuple{Int64, String}}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.readchar), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.emit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind, Tokenize.Tokens.TokenError})
precompile(Tuple{typeof(Tokenize.Lexers.lex_comment), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.lex_prime), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.accept_number), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, typeof(Tokenize.Lexers.ishex)})
precompile(Tuple{typeof(Tokenize.Lexers.lex_digit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_dot), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.readrest), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.lex_identifier), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.next_token), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Tokenize.Tokens.untokenize), Tokenize.Tokens.Token})
precompile(Tuple{typeof(Base.push!), Base.BitSet, Int64, Int64})
precompile(Tuple{Type{DataStructures.BalancedTree23{Base.UnitRange{Int64}, Int64, JuliaFormatter.IntervalTreeOrder}}, JuliaFormatter.IntervalTreeOrder})
precompile(Tuple{Type{Base.Dict{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(DataStructures.eq), JuliaFormatter.IntervalTreeOrder, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataStructures.push_or_reuse!), Array{DataStructures.KDRec{Base.UnitRange{Int64}, Int64}, 1}, Array{Int64, 1}, DataStructures.KDRec{Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(DataStructures.push_or_reuse!), Array{DataStructures.TreeNode{Base.UnitRange{Int64}}, 1}, Array{Int64, 1}, DataStructures.TreeNode{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.insert!), DataStructures.BalancedTree23{Base.UnitRange{Int64}, Int64, JuliaFormatter.IntervalTreeOrder}, Base.UnitRange{Int64}, Int64, Bool})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#8#16")), String, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Tuple{Int64, Int64, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Tuple{Int64, Int64, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Tuple{Int64, Int64, String}}, Tuple{Int64, Int64, String}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#1#9"))}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String}, String}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#1#9"))}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String}, String}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#1#9"))}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String}, String}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}}, typeof(Base.first)}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#1#9"))}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String}, String}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.count), getfield(JuliaFormatter, Symbol("#3#11")), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Tuple{Int64, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Tuple{Int64, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Tuple{Int64, String}}, Tuple{Int64, String}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#6#14")), String, Int64})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#4#12")), Char})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#4#12")), String, Int64})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#5#13")), Char})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#5#13")), String, Int64})
precompile(Tuple{typeof(Base.min), Nothing, Int64})
precompile(Tuple{Type{JuliaFormatter.Document}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Tuple{Int64, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(JuliaFormatter.get_args), Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(JuliaFormatter.add_node!), JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#add_node!##kw")), NamedTuple{(:join_lines,), Tuple{Bool}}, typeof(JuliaFormatter.add_node!), JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(CSTParser.defines_anon_function), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.rem_invis), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.rem_kw), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.rem_dddot), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.rem_where), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.rem_decl), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.rem_subtype), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.rem_curly), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.get_arg_name), CSTParser.EXPR})
precompile(Tuple{typeof(Base.iterate), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.defines_function), CSTParser.EXPR})
precompile(Tuple{typeof(Base.iterate), CSTParser.EXPR, Int64})
precompile(Tuple{typeof(CSTParser.flatten_tuple), CSTParser.EXPR, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.rem_decl), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.error), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.get_sig), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.get_args), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.get_args), CSTParser.EXPR})
precompile(Tuple{typeof(Base.pairs), Nothing})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#25#26")), Nothing})
precompile(Tuple{typeof(Base.findnext), typeof(JuliaFormatter.is_colon), Array{JuliaFormatter.FST, 1}, Int64})
precompile(Tuple{typeof(Base.findall), getfield(JuliaFormatter, Symbol("#31#32")), Nothing})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#31#32"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#31#32"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.findfirst), typeof(JuliaFormatter.is_colon), Nothing})
precompile(Tuple{typeof(JuliaFormatter.import_to_usings), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#add_node!##kw")), NamedTuple{(:join_lines, :max_padding), Tuple{Bool, Int64}}, typeof(JuliaFormatter.add_node!), JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.is_multiline), JuliaFormatter.FST})
precompile(Tuple{typeof(JuliaFormatter.is_prev_newline), JuliaFormatter.FST})
precompile(Tuple{typeof(Base.throw_boundserror), Array{JuliaFormatter.FST, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(JuliaFormatter.binaryop_to_whereop!), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##add_node!#24")), Bool, Int64, typeof(JuliaFormatter.add_node!), JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.op_kind), JuliaFormatter.FST})
precompile(Tuple{typeof(JuliaFormatter.pipe_to_function_call), JuliaFormatter.FST})
precompile(Tuple{typeof(JuliaFormatter.pipe_to_function_call_pass!), JuliaFormatter.FST})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#flatten_binaryopcall##kw")), NamedTuple{(:top,), Tuple{Bool}}, typeof(JuliaFormatter.flatten_binaryopcall), JuliaFormatter.FST})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##flatten_binaryopcall#30")), Bool, typeof(JuliaFormatter.flatten_binaryopcall), JuliaFormatter.FST})
precompile(Tuple{typeof(JuliaFormatter.flatten_fst!), JuliaFormatter.FST})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{JuliaFormatter.FST, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#108#110")), Nothing, Int64})
precompile(Tuple{typeof(JuliaFormatter.nest!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#107#109")), JuliaFormatter.FST})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#107#109")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.n_using!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_import!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.to_index), Array{JuliaFormatter.FST, 1}, Nothing})
precompile(Tuple{typeof(JuliaFormatter.walk), typeof(JuliaFormatter.reset_line_offset!), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.walk), getfield(JuliaFormatter, Symbol("#57#58")){Int64}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##nest!#62")), Int64, typeof(JuliaFormatter.nest!), JuliaFormatter.DefaultStyle, Array{JuliaFormatter.FST, 1}, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#64#65")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.n_using!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_export!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#105#106")), Nothing, Int64})
precompile(Tuple{typeof(JuliaFormatter.n_whereopcall!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_whereopcall!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findall), getfield(JuliaFormatter, Symbol("#76#77")), Nothing})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#76#77"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#76#77"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(JuliaFormatter.n_conditionalopcall!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.prepend_return!), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.setproperty!), JuliaFormatter.FST, Symbol, CSTParser.Head})
precompile(Tuple{typeof(Base.setproperty!), JuliaFormatter.FST, Symbol, Nothing})
precompile(Tuple{typeof(Base.setproperty!), JuliaFormatter.FST, Symbol, JuliaFormatter.FNode})
precompile(Tuple{typeof(JuliaFormatter.short_to_long_function_def!), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findall), getfield(JuliaFormatter, Symbol("#78#80")), Nothing})
precompile(Tuple{typeof(Base.findall), getfield(JuliaFormatter, Symbol("#59#60")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.unnest!), JuliaFormatter.FST, Array{Int64, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#59#60"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#59#60"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(JuliaFormatter.dedent!), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.walk), typeof(JuliaFormatter.dedent!), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##length_to#27")), Int64, typeof(JuliaFormatter.length_to), JuliaFormatter.FST, Tuple{JuliaFormatter.FNode}})
precompile(Tuple{typeof(JuliaFormatter.length_to), JuliaFormatter.FST, Tuple{JuliaFormatter.FNode}})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#length_to##kw")), NamedTuple{(:start,), Tuple{Int64}}, typeof(JuliaFormatter.length_to), JuliaFormatter.FST, Tuple{JuliaFormatter.FNode}})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#79#81")), Nothing})
precompile(Tuple{typeof(Base.findfirst), typeof(JuliaFormatter.is_comment), Nothing})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#valid#28")), CSTParser.EXPR})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##parent_is#19")), getfield(JuliaFormatter, Symbol("#ignore#29")), typeof(JuliaFormatter.parent_is), CSTParser.EXPR, getfield(JuliaFormatter, Symbol("#valid#28"))})
precompile(Tuple{typeof(JuliaFormatter.is_standalone_shortcircuit), CSTParser.EXPR})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#78#80"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(JuliaFormatter, Symbol("#78#80"))}, Base.Iterators.Pairs{Int64, JuliaFormatter.FST, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{JuliaFormatter.FST, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(JuliaFormatter.n_binaryopcall!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#111#112")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.n_binaryopcall!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#99#100")), Nothing, Int64})
precompile(Tuple{typeof(JuliaFormatter.n_call!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findlast), getfield(JuliaFormatter, Symbol("#74#75")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.n_call!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#101#102")), Nothing, Int64})
precompile(Tuple{typeof(JuliaFormatter.n_tupleh!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findlast), getfield(JuliaFormatter, Symbol("#66#67")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.n_tupleh!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##nest_if_over_margin!#61")), Nothing, typeof(JuliaFormatter.nest_if_over_margin!), Nothing, JuliaFormatter.FST, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(Base.findlast), getfield(JuliaFormatter, Symbol("#70#72")), Nothing})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#69#71")), Nothing})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##n_comprehension!#68")), Int64, typeof(JuliaFormatter.n_comprehension!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_comprehension!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_typedcomprehension!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_do!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#103#104")), Nothing, Int64})
precompile(Tuple{typeof(JuliaFormatter.n_generator!), JuliaFormatter.YASStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#n_comprehension!##kw")), NamedTuple{(:indent,), Tuple{Int64}}, typeof(JuliaFormatter.n_comprehension!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_generator!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_filter!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_flatten!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#87#88")), Nothing})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##n_block!#86")), Int64, typeof(JuliaFormatter.n_block!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#83#85")), Nothing})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#82#84")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.n_for!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_unaryopcall!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_stringh!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.nest!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##print_notcode#91")), Bool, typeof(JuliaFormatter.print_notcode), Base.GenericIOBuffer{Array{UInt8, 1}}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.format_check), Base.GenericIOBuffer{Array{UInt8, 1}}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.print_inlinecomment), Base.GenericIOBuffer{Array{UInt8, 1}}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing})
precompile(Tuple{typeof(JuliaFormatter.print_leaf), Base.GenericIOBuffer{Array{UInt8, 1}}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.skip_indent), JuliaFormatter.FST})
precompile(Tuple{typeof(JuliaFormatter.print_stringh), Base.GenericIOBuffer{Array{UInt8, 1}}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##print_tree#90")), Int64, typeof(JuliaFormatter.print_tree), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{JuliaFormatter.FST, 1}, JuliaFormatter.State, Int64})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#print_tree##kw")), NamedTuple{(:notcode_indent,), Tuple{Int64}}, typeof(JuliaFormatter.print_tree), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{JuliaFormatter.FST, 1}, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(JuliaFormatter.print_tree), Base.GenericIOBuffer{Array{UInt8, 1}}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##format_text#113")), Int64, Int64, JuliaFormatter.DefaultStyle, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, typeof(JuliaFormatter.format_text), String})
precompile(Tuple{typeof(Main.fmt), String})
precompile(Tuple{typeof(CSTParser.sized_uint_literal), String, Int64})
precompile(Tuple{typeof(CSTParser.sized_uint_oct_literal), String})
precompile(Tuple{typeof(CSTParser.Expr_int), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.Expr_float), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.Expr_char), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.Expr_cmd), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.Expr_tcmd), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser._literal_expr), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser._unary_expr), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser._binary_expr), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser._where_expr), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser._if_expr), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.fix_range), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser._let_expr), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.get_iters), CSTParser.EXPR, Array{Any, 1}})
precompile(Tuple{typeof(CSTParser.get_inner_gen), CSTParser.EXPR, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(CSTParser.convert_iter_assign), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.expr_import), CSTParser.EXPR, Symbol})
precompile(Tuple{Type{Expr}, CSTParser.EXPR})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Tuple{Int64, Int64, String}}, Int64})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#39#40")), Char})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#39#40")), Base.SubString{String}, Int64})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#41#42")), Char})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#41#42")), Base.SubString{String}, Int64})
precompile(Tuple{typeof(JuliaFormatter.p_stringh), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##p_block#43")), Bool, Bool, Bool, typeof(JuliaFormatter.p_block), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_block), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_module), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_baremodule), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_macro), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_primitive), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.annotate_typefields_with_any!), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_struct), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_mutable), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_abstract), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.eq_to_in_normalization!), CSTParser.EXPR, Bool})
precompile(Tuple{typeof(JuliaFormatter.p_for), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_while), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_do), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_if), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_try), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_toplevel), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_begin), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_quote), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_let), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.pretty), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_call), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_vect), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.unnestable_arg), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.p_vect), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_comprehension), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_comprehension), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_typedcomprehension), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_typedcomprehension), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_curly), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_braces), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_braces), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#pretty##kw")), NamedTuple{(:nospace,), Tuple{Bool}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##pretty#38")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:nospace,), Tuple{Bool}}}, typeof(JuliaFormatter.pretty), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#pretty##kw")), NamedTuple{(:nospace,), Tuple{Bool}}, typeof(JuliaFormatter.pretty), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_tupleh), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_tupleh), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_curly), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_call), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.walk), getfield(JuliaFormatter, Symbol("#34#36")){Array{JuliaFormatter.FST, 1}}, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.move_at_sign_to_the_end), JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.is_block), JuliaFormatter.FST})
precompile(Tuple{typeof(JuliaFormatter.p_macrocall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(Base.findlast), getfield(JuliaFormatter, Symbol("#94#96")), Nothing})
precompile(Tuple{typeof(Base.findfirst), getfield(JuliaFormatter, Symbol("#93#95")), Nothing})
precompile(Tuple{typeof(JuliaFormatter.p_macrocall), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_whereopcall), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_whereopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_conditionalopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_colonopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_kw), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_kw), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_parameters), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_parameters), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_const), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_local), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_global), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_return), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_outer), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_import), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_import), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_export), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_export), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_using), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_using), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_row), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_vcat), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_typedvcat), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_hcat), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_typedhcat), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_ref), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_ref), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##parent_is#19")), getfield(JuliaFormatter, Symbol("#97#98")), typeof(JuliaFormatter.parent_is), CSTParser.EXPR, typeof(JuliaFormatter.is_iterable)})
precompile(Tuple{typeof(JuliaFormatter.p_tupleh), JuliaFormatter.YASStyle, Array{CSTParser.EXPR, 1}, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_generator), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##parent_is#19")), getfield(JuliaFormatter, Symbol("#55#56")), typeof(JuliaFormatter.parent_is), CSTParser.EXPR, typeof(JuliaFormatter.is_iterable)})
precompile(Tuple{typeof(JuliaFormatter.p_generator), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_filter), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_filter), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_flatten), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_flatten), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_fileh), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##pretty#37")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:ignore_single_line,), Tuple{Bool}}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#pretty##kw")), NamedTuple{(:ignore_single_line,), Tuple{Bool}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_functiondef), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##p_invisbrackets#53")), Bool, Bool, typeof(JuliaFormatter.p_invisbrackets), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#p_invisbrackets##kw")), NamedTuple{(:nonest, :nospace), Tuple{Bool, Bool}}, typeof(JuliaFormatter.p_invisbrackets), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##p_invisbrackets#92")), Bool, Bool, typeof(JuliaFormatter.p_invisbrackets), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_invisbrackets), JuliaFormatter.YASStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_invisbrackets), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.nestable), JuliaFormatter.YASStyle, CSTParser.EXPR})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##p_binaryopcall#49")), Bool, Bool, typeof(JuliaFormatter.p_binaryopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_binaryopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##p_unaryopcall#51")), Bool, typeof(JuliaFormatter.p_unaryopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_unaryopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##p_chainopcall#45")), Bool, Bool, typeof(JuliaFormatter.p_chainopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_chainopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#p_chainopcall##kw")), NamedTuple{(:nonest, :nospace), Tuple{Bool, Bool}}, typeof(JuliaFormatter.p_chainopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##p_comparison#47")), Bool, Bool, typeof(JuliaFormatter.p_comparison), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_comparison), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##pretty#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#2#10")), String, Int64})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Base.findnext), getfield(JuliaFormatter, Symbol("#7#15")), String, Int64})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#p_block##kw")), NamedTuple{(:ignore_single_line,), Tuple{Bool}}, typeof(JuliaFormatter.p_block), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{Type{JuliaFormatter.FST}, CSTParser.EXPR, Int64, Int64, String})
precompile(Tuple{typeof(JuliaFormatter.nestable), JuliaFormatter.DefaultStyle, CSTParser.EXPR})
precompile(Tuple{typeof(Tokenize.Lexers.lex_equal), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(CSTParser.parse_call), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_comma_sep), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.string_terminated), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.read_string), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_quote), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Bool})
precompile(Tuple{typeof(CSTParser.parse_string_or_cmd), CSTParser.ParseState, Bool})
precompile(Tuple{typeof(CSTParser.parse_string_or_cmd), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser._unescape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.prevind), String, Int64})
precompile(Tuple{typeof(Tokenize.Lexers.lex_equal), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.string_terminated), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.read_string), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_quote), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(JuliaFormatter.walk), Function, Array{JuliaFormatter.FST, 1}, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(Tokenize.Lexers.lex_star), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_star), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##pretty#37")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:nonest, :nospace), Tuple{Bool, Bool}}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#pretty##kw")), NamedTuple{(:nonest, :nospace), Tuple{Bool, Bool}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{getfield(Main, Symbol("##run_pretty#7")), JuliaFormatter.Options, JuliaFormatter.DefaultStyle, typeof(Main.run_pretty), String, Int64})
precompile(Tuple{typeof(Main.run_pretty), String, Int64})
precompile(Tuple{typeof(Base.length), JuliaFormatter.FST})
precompile(Tuple{typeof(CSTParser.parse_iterators), CSTParser.ParseState})
precompile(Tuple{typeof(Tokenize.Lexers.lex_colon), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(CSTParser.parse_block), CSTParser.ParseState, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_colon), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##pretty#37")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:join_body,), Tuple{Bool}}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#pretty##kw")), NamedTuple{(:join_body,), Tuple{Bool}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(Tokenize.Lexers.lex_minus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_minus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(CSTParser.parse_array), CSTParser.ParseState})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##nest_if_over_margin!#61")), Nothing, typeof(JuliaFormatter.nest_if_over_margin!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(JuliaFormatter.nest_if_over_margin!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(Tokenize.Lexers.lex_less), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_less), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(CSTParser.parse_operator_where), CSTParser.ParseState, CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(Base.__cat), Array{CSTParser.EXPR, 1}, Tuple{Int64}, Tuple{Bool}, CSTParser.EXPR, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), CSTParser.EXPR, Int64})
precompile(Tuple{typeof(Base.cat_size), CSTParser.EXPR, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{CSTParser.EXPR, 1, Array{CSTParser.EXPR, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{CSTParser.EXPR, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{CSTParser.EXPR, 1, Array{CSTParser.EXPR, 1}, Tuple{Base.UnitRange{Int64}}, true}, CSTParser.EXPR})
precompile(Tuple{typeof(Base.cat_indices), Array{CSTParser.EXPR, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{CSTParser.EXPR, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{CSTParser.EXPR, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##pretty#37")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:nospace,), Tuple{Bool}}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(Tokenize.Lexers.lex_exclaim), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_exclaim), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(CSTParser.parse_if), CSTParser.ParseState, Bool})
precompile(Tuple{typeof(CSTParser.parse_if), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.parse_block), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Tuple{Tokenize.Tokens.Kind, Tokenize.Tokens.Kind, Tokenize.Tokens.Kind}, Bool})
precompile(Tuple{typeof(CSTParser.parse_block), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Tuple{Tokenize.Tokens.Kind, Tokenize.Tokens.Kind, Tokenize.Tokens.Kind}})
precompile(Tuple{typeof(JuliaFormatter.is_block), CSTParser.EXPR})
precompile(Tuple{Type{NamedTuple{(:m,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Main, Symbol("#fmt##kw")), NamedTuple{(:m,), Tuple{Int64}}, typeof(Main.fmt), String})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_forwardslash), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_forwardslash), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Main.fmt), String, Int64, Int64})
precompile(Tuple{typeof(CSTParser.parse_block), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Tuple{Tokenize.Tokens.Kind, Tokenize.Tokens.Kind}, Bool})
precompile(Tuple{typeof(CSTParser.parse_block), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Tuple{Tokenize.Tokens.Kind, Tokenize.Tokens.Kind}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Tokenize.Tokens.Kind}, Char})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##pretty#37")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:from_quote,), Tuple{Bool}}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(JuliaFormatter, Symbol("#pretty##kw")), NamedTuple{(:from_quote,), Tuple{Bool}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{getfield(CSTParser, Symbol("#parse_parameters##kw")), NamedTuple{(:usekw,), Tuple{Bool}}, typeof(CSTParser.parse_parameters), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}})
precompile(Tuple{getfield(CSTParser, Symbol("#parse_parameters##kw")), NamedTuple{(:usekw,), Tuple{Bool}}, typeof(CSTParser.parse_parameters), CSTParser.ParseState, Array{CSTParser.EXPR, 1}})
precompile(Tuple{getfield(CSTParser, Symbol("##parse_parameters#6")), Bool, typeof(CSTParser.parse_parameters), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(CSTParser.parse_parameters), CSTParser.ParseState, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_bar), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_cmd), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.lex_bar), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_greater), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_amper), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.RawToken}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_greater), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_amper), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(CSTParser.skip_to_nl), String, Int64})
precompile(Tuple{typeof(Base.:(==)), CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.parse_dot_mod), CSTParser.ParseState})
precompile(Tuple{typeof(CSTParser.longest_common_prefix), String, String})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{getfield(CSTParser, Symbol("#7#8")){String, String}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(CSTParser, Symbol("#7#8")){String, String}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Tokenize.Lexers.lex_cmd), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Base._append!), Array{JuliaFormatter.FST, 1}, Base.HasLength, Tuple{JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST}})
precompile(Tuple{typeof(Base.push!), Array{JuliaFormatter.FST, 1}, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST})
precompile(Tuple{typeof(Base._append!), Array{JuliaFormatter.FST, 1}, Base.HasLength, Tuple{JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST}})
precompile(Tuple{typeof(Base.push!), Array{JuliaFormatter.FST, 1}, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST})
precompile(Tuple{typeof(Base.push!), Array{JuliaFormatter.FST, 1}, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, Vararg{JuliaFormatter.FST, N} where N})
precompile(Tuple{typeof(Base._append!), Array{JuliaFormatter.FST, 1}, Base.HasLength, Tuple{JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST}})
precompile(Tuple{typeof(Base.append!), Array{JuliaFormatter.FST, 1}, Tuple{JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST, JuliaFormatter.FST}})
precompile(Tuple{getfield(Main, Symbol("##run_nest#8")), JuliaFormatter.Options, JuliaFormatter.DefaultStyle, typeof(Main.run_nest), String, Int64})
precompile(Tuple{typeof(Main.run_nest), String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuliaFormatter.FST, JuliaFormatter.State}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuliaFormatter.FST, JuliaFormatter.State}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), JuliaFormatter.State, Symbol})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#11#13")), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#287#288")){Bool}, String})
precompile(Tuple{getfield(JuliaFormatter, Symbol("##format_file#114")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(JuliaFormatter.format_file), String})
precompile(Tuple{typeof(JuliaFormatter.format_file), String})
precompile(Tuple{typeof(Base.open), Function, String})
precompile(Tuple{getfield(Main, Symbol("#12#14")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#12#14")){String}, String})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#702")), Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.TTY}, String, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.TTY}, Symbol, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.TTY}, Int64, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:whitespace_typedefs,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:whitespace_typedefs,), Tuple{Bool}}}, Type{NamedTuple{(:i, :m), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:whitespace_typedefs,), Tuple{Bool}}}, Type{NamedTuple{(:indent, :margin), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Main, Symbol("#fmt##kw")), NamedTuple{(:whitespace_typedefs,), Tuple{Bool}}, typeof(Main.fmt), String})
precompile(Tuple{Type{NamedTuple{(:remove_extra_newlines,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:remove_extra_newlines,), Tuple{Bool}}}, Type{NamedTuple{(:i, :m), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:remove_extra_newlines,), Tuple{Bool}}}, Type{NamedTuple{(:indent, :margin), Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(Main, Symbol("#fmt##kw")), NamedTuple{(:remove_extra_newlines,), Tuple{Bool}}, typeof(Main.fmt), String})
precompile(Tuple{typeof(Base.reduce_first), Function, Int64})
precompile(Tuple{Type{NamedTuple{(:m, :whitespace_typedefs), T} where T<:Tuple}, Tuple{Int64, Bool}})
precompile(Tuple{getfield(Main, Symbol("#fmt##kw")), NamedTuple{(:m, :whitespace_typedefs), Tuple{Int64, Bool}}, typeof(Main.fmt), String})
precompile(Tuple{typeof(Main.fmt1), String})
precompile(Tuple{getfield(Test, Symbol("#23#24")){Int64}, Test.DefaultTestSet})
precompile(Tuple{typeof(Base.display_error), Array{Any, 1}})
precompile(Tuple{typeof(Base.show_exception_stack), Base.IOContext{Base.TTY}, Array{Any, 1}})
precompile(Tuple{typeof(Base.display_error), Base.TTY, Array{Any, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##showerror#651")), Bool, typeof(Base.showerror), Base.IOContext{Base.TTY}, LoadError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{getfield(Base, Symbol("#showerror##kw")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, LoadError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Test.TestSetException})
precompile(Tuple{typeof(Base.print_to_string), Test.TestSetException})
precompile(Tuple{getfield(Test, Symbol("##showerror#21")), Any, typeof(Base.showerror), IO, Test.TestSetException, Any})
precompile(Tuple{getfield(Base, Symbol("#showerror##kw")), Any, typeof(Base.showerror), IO, Test.TestSetException, Any})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:backtrace,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:backtrace,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.show), IO, Test.TestSetException})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String})
