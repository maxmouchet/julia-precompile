precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Compat.Sys.__init__)})
precompile(Tuple{typeof(Base.catch_backtrace)})
precompile(Tuple{typeof(Distributed.flush_gc_msgs)})
precompile(Tuple{getfield(Distributed, Symbol("#135#136"))})
precompile(Tuple{typeof(Base.backtrace)})
precompile(Tuple{typeof(Base._include_dependency), Module, String})
precompile(Tuple{typeof(Base.include_relative), Module, String})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{getfield(Base, Symbol("#681#682")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#681#682")){String}, String})
precompile(Tuple{typeof(Base.project_deps_get), String, String})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{getfield(Test, Symbol("#@test_throws")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{Type{NamedTuple{(:makeunique,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##make_unique!#1")), Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##make_unique")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.make_unique), Array{Symbol, 1}})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{Type{Test.Threw}, ArgumentError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.println), Test.Fail})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Fail})
precompile(Tuple{typeof(Base.print), Test.Fail})
precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol, Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#3#5")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#4#6")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Test.scrub_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Fail})
precompile(Tuple{typeof(Test.do_test_throws), Test.Threw, Any, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#100#103"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.DimensionMismatch}, Nothing})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#99#102")), Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.UnitRange{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.repeat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Int64, 1}})
precompile(Tuple{typeof(Base.copy), Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#100#103"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#99#102")), Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, DataFrames.Index})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(DataFrames, Symbol("#94#95")){Int64}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.repeat), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Int64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.repeat), Array{Int64, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#94#95")){Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{AbstractArray{T, 1} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#100#103"))}, Int64})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), Bool, Bool})
precompile(Tuple{typeof(Base.:(&)), Bool, Bool})
precompile(Tuple{typeof(DataFrames.nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(DataFrames, Symbol("#94#95")){Int64}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.repeat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Int64}})
precompile(Tuple{typeof(Base.repeat), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#94#95")){Int64}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{NamedTuple{(:inner, :outer), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64}, getfield(Base, Symbol("#168#173"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64}, getfield(Base, Symbol("#166#171"))}})
precompile(Tuple{typeof(Base._repeat), Base.UnitRange{Int64}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner, :outer), Tuple{Int64, Int64}}, typeof(Base.repeat), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(DataFrames, Symbol("#92#93")){Int64, Int64}, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner, :outer), Tuple{Int64, Int64}}, typeof(Base.repeat), DataFrames.DataFrame})
precompile(Tuple{typeof(Base._repeat), Array{Int64, 1}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#92#93")){Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(DataFrames, Symbol("#92#93")){Int64, Int64}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner, :outer), Tuple{Int64, Int64}}, typeof(Base.repeat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._repeat), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#92#93")){Int64, Int64}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64}})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, String})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{Union{Base.Missing, String}}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing, String}})
precompile(Tuple{typeof(Base.vect), Array{Union{Base.Missing, Int64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{Array{Array{T, 1} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(DataFrames.gennames), Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{T, 1} where T, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Base.UnitRange{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._typed_hcat), Type{Int64}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.hcat), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{Int64, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Int64, Int64, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#130")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.unalias), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractArray{T, 1} where T, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##add_names#27")), Bool, typeof(DataFrames.add_names), DataFrames.Index, DataFrames.Index})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat!#134")), Bool, Bool, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Symbol}, 1}, Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#15#20")){String}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#15#20")){String}}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Tuple{Int64, Symbol}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#16#21")){Array{Tuple{Int64, Symbol}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#16#21")){Array{Tuple{Int64, Symbol}, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#19#24")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#18#23"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#19#24")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#18#23"))}})
precompile(Tuple{typeof(DataFrames.fuzzymatch), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.isequal), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.names), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.isequal), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.isequal), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:b,), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}, NamedTuple{(:b,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.hcat), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, typeof(Base.hcat), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Base.Missing, String}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, String}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat!#141")), Bool, Bool, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.hcat), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Int64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat#142")), Bool, Bool, typeof(Base.hcat), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hcat), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hcat), Array{Int64, 1}, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:inner,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rep_shapes), Base.StepRange{Char, Int64}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base._repeat), Base.StepRange{Char, Int64}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner,), Tuple{Int64}}, typeof(Base.repeat), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.view), Array{Char, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Char, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Char, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Char, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Char, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Char, 1}})
precompile(Tuple{typeof(Base.copy), Array{Char, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:dims,), Tuple{Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(DataFrames._check_consistency), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.vcat), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{AbstractArray{T, 1} where T, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractArray{T, 1} where T, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#130")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#266#267")){DataFrames.DataFrame}, Int64})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.invperm), Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.group_rows), DataFrames.DataFrame, Bool, Bool, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.length), Array{Char, 1}})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Char, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Char, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.fill!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Base.fill), Char, Int64})
precompile(Tuple{Type{NamedTuple{(:A, :B, :A_1, :B_1, :A_2, :B_2), T} where T<:Tuple}, Tuple{Array{Char, 1}, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Char, 1}, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :A_1, :B_1, :A_2, :B_2), Tuple{Array{Char, 1}, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :A_1, :B_1, :A_2, :B_2), Tuple{Array{Char, 1}, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}, Char, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Char})
precompile(Tuple{typeof(Tables.allocatecolumn), Type{T} where T, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Char}, Int64})
precompile(Tuple{Type{Array{Char, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.iterate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.unalias), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#162")), Bool, Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat!#134")), Bool, Bool, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Char, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Char, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Char, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Char, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Char, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Char, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractArray{T, 1} where T, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#130")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.fill!), Array{UInt32, 1}, UInt32})
precompile(Tuple{Type{Base.Dict{Int64, UInt32}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 1}, Array{Int64, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Array{Int64, 1}, Base.Dict{Int64, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, UInt32}, Int64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}, Int64}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}, Int64}, Base.Dict{Int64, UInt32}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.IndexLinear, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.allunique), Array{Int64, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#11#12")){Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}, Int64}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}, Int64}, Base.Dict{Int64, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, UInt32}, Int64})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{Int64, UInt32}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Int64, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt32}, Int64, Int64})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, V, C, U} where U where C where V}, Base.UnitRange{Int64}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sort!#7")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Int64, UInt32}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Int64, UInt32}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, typeof(Base.:(!)), Symbol})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.IndexLinear, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, Base.UnitRange{Int64}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, 1, V, C, U, U} where U where U where C where V where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isempty), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), Base.UnitRange{Int64}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Int64, UInt32}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat!#138")), Bool, Bool, typeof(DataFrames.hcat!), String, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, typeof(DataFrames.hcat!), String, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat#72")), Bool, Bool, typeof(Base.hcat), String, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), String, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat!#139")), Bool, Bool, typeof(DataFrames.hcat!), DataFrames.DataFrame, String})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##hcat!")), NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, String})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat#142")), Bool, Bool, typeof(Base.hcat), DataFrames.DataFrame, String})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.DataFrame, String})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:b,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol}, NamedTuple{(:b,), Tuple{Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b,), Tuple{Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat!#134")), Bool, Bool, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.hcat), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.OneTo{Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(Base.hcat), Array{Int64, 1}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.unalias), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#162")), Bool, Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat#71")), Bool, Bool, typeof(Base.hcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.hcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(Base, Symbol("#kw##hcat")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(Base.hcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.length), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{Float64, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Float64, 2}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Int64}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Int64}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Int64}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(DataFrames.nextcolname), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Symbol, 1}, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, typeof(Base.names)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.DataFrame, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, typeof(Base.names)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{Base.Dict{Array{Symbol, 1}, Nothing}}})
precompile(Tuple{typeof(Base.hash), Array{Symbol, 1}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Array{Symbol, 1}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Array{Symbol, 1}, Nothing}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Array{Symbol, 1}, Nothing}, Nothing, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Array{Symbol, 1}, Nothing}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.unique), Array{Array{Symbol, 1}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Nothing}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#83#87")), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(DataFrames, Symbol("#83#87")), Array{Array{Symbol, 1}, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#77#78")){getfield(DataFrames, Symbol("#85#89")){Array{Symbol, 1}}}, Base.Iterators.Pairs{Int64, Array{Symbol, 1}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Array{Symbol, 1}, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#77#78")){getfield(DataFrames, Symbol("#85#89")){Array{Symbol, 1}}}, Base.Iterators.Pairs{Int64, Array{Symbol, 1}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Array{Symbol, 1}, 1}}}, typeof(Base.first)}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#88")){Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}}, Tuple{Int64, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.Iterators.Enumerate{Array{Array{Symbol, 1}, 1}}, getfield(DataFrames, Symbol("#84#88")){Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Array{Symbol, 1}, 1}}, getfield(DataFrames, Symbol("#84#88")){Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_vcat#82")), Symbol, typeof(DataFrames._vcat), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base.vcat), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{typeof(Base.vcat), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.union!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.union), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.intersect), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Symbol, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.map), Function, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#86#90")){Symbol}, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.DataFrame, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataFrames.DataFrame, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Float64, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Array{Float64, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Float64, 1}, 1}, Base.Generator{Array{Array{Float64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Array{Float64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Array{Float64, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Symbol, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Int64, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Int64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Array{Int64, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Array{Int64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Array{Int64, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Int64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.eachcol), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.eltype), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.eltype)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.eltype), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.setindex!), Array{DataType, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Type}, Type{T} where T, Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Array{DataType, 1}, Array{Type, 1}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Symbol, Int64}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{typeof(Base.vcat), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.deepcopy), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{AbstractArray{T, 1} where T, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Float64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Symbol, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.vect), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Array{Array{Float64, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{Float64, 1}, 1}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Float64, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Float64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Int64, Array{Array{Int64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Int64, 1}, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{T, 1} where T, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Array{T, 1} where T, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{T, 1} where T, 1}, Base.Generator{Array{Array{T, 1} where T, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Array{T, 1} where T, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Array{T, 1} where T, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Int64}})
precompile(Tuple{typeof(Base.getindex), Type{Float64}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:B, :A), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol}, NamedTuple{(:B, :A), Tuple{Float64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:B, :A), Tuple{Float64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Float64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Int64})
precompile(Tuple{typeof(Base.vcat), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##vcat#76")), Symbol, typeof(Base.vcat), DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.union!), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.union), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.intersect), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._shrink), Function, Array{Symbol, 1}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#58#59")){getfield(Base, Symbol("#247#248")){Base.Set{Symbol}}}, typeof(Base.delete!), Base.Set{Symbol}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Union{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(DataFrames, Symbol("##reduce#77")), Symbol, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.vcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.empty), Array{Union{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}, 1}, Type{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.push!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, Int64, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, Int64, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, typeof(Base.names)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{ArgumentError}, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_vcat#82")), Symbol, typeof(DataFrames._vcat), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##_vcat")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(DataFrames._vcat), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}})
precompile(Tuple{typeof(Base.names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, Type{Array{Symbol, 1}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, typeof(Base.names)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, typeof(Base.names)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, typeof(Base.names)}, Int64})
precompile(Tuple{typeof(DataFrames._names), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.copy), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.unique), Array{Array{Symbol, 1}, 1}})
precompile(Tuple{typeof(Base.setdiff), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#86#90")){Symbol}, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}})
precompile(Tuple{getfield(DataFrames, Symbol("#86#90")){Symbol}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.haskey), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#86#90")){Symbol}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.vect), DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Array{DataFrames.DataFrame, 1}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Array{DataFrames.DataFrame, 1}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DataFrames.DataFrame, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.DataFrame, 1}, Int64, Array{DataFrames.DataFrame, 1}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.trues), Int64})
precompile(Tuple{typeof(Base.falses), Int64})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Base.BitArray{1}, Base.BitArray{1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.BitArray{1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.BitArray{1}, Base.BitArray{1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Base.BitArray{1}, Base.BitArray{1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.BitArray{1}})
precompile(Tuple{typeof(Base.copy), Base.BitArray{1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Base.BitArray{1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.BitArray{1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.BitArray{1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.BitArray{1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.BitArray{1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.BitArray{1}, 1}, Base.Generator{Array{Base.BitArray{1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.BitArray{1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.BitArray{1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Bool}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.BitArray{1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, Base.BitArray{1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, Base.BitArray{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Bool, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Bool, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vect), Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Int64, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Int64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Int64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vect), Array{Float64, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Float64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(typeof), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(typeof), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(typeof), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(typeof), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.:(==)), Array{DataType, 1}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.vect), Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{String, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{String, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{String, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Int64, 1}, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{String, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Any, 1}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, String})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, String}})
precompile(Tuple{typeof(Base.vect), Array{Any, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Any, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Any, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Any, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.vect), Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Int64, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{Union{Base.Missing, Int64}}, Type{Int64}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Union{Base.Missing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.vect), Type{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, Array{Int64, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, Int64, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{AbstractArray{T, 1} where T, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base._collect), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{T, 1} where T, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{AbstractArray{T, 1} where T, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{AbstractArray{T, 1} where T, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Type{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, V, C, U} where U where C where V}, Array{Int64, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, N, R, V, C, U} where U where C where V where R<:Integer where N}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, Int64, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, Base.Generator{Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Type{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.length), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, U} where U where T, 1}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexin), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt32, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Bool, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.findfirst), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Int64}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Union{Base.Missing, Int64}}, Type{String}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Union{Base.Missing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{String, UInt32}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 1}, Array{String, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}}, Array{String, 1}, Base.Dict{String, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt32}, String})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}, Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(Base.allunique), Array{String, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#11#12")){Array{String, 1}}, String})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.union!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{String, Nothing}, String})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{String}}, Array{String, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, String}, Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{String, UInt32}, Array{String, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt32}, Int64, String})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, V, C, U} where U where C where V}, Array{String, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{String, UInt32}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Int64, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Base.Generator{Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{CategoricalArrays.CategoricalValue{Any, UInt32}}, Int64})
precompile(Tuple{Type{Base.Dict{Any, UInt32}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Any, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 1}, Array{Any, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}}, Array{Any, 1}, Base.Dict{Any, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Any, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Any, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.length), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.allunique), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.union!), Base.Set{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.append!), CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, Array{Any, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{Any, UInt32}, Array{Any, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Any, UInt32}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, Array{Any, 1}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Int64})
precompile(Tuple{typeof(Base.indexin), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.indexin), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{Any, 1}, Vararg{Array{Any, 1}, N} where N})
precompile(Tuple{typeof(Base.findfirst), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._all), getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{Any, 1}, Array{Any, 1}}, Int64}, Tuple{Array{Any, 1}, Array{Any, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, Int64})
precompile(Tuple{typeof(Base.in), Int64, Base.Set{Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Int64})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Int64})
precompile(Tuple{typeof(Base.delete!), Base.Set{Any}, Int64})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Any, Nothing}, Int64})
precompile(Tuple{getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, UInt32}, Int64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, Int64}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, Int64}, Base.Dict{Any, UInt32}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, UInt32}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Int64})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Any, Int64}, Int64})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, Array{String, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, String})
precompile(Tuple{typeof(Base.indexin), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.:(==)), String, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Int64}, Int64, Nothing})
precompile(Tuple{typeof(Base.insert!), Array{Any, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Int64}, String, Nothing})
precompile(Tuple{typeof(Base.insert!), Array{Any, 1}, Int64, String})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Any, Nothing}, String})
precompile(Tuple{getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, String})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, UInt32}, String})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, String}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Any, UInt32, CategoricalArrays.CategoricalValue{Any, UInt32}}, String}, Base.Dict{Any, UInt32}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, UInt32}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, UInt32}, String})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, String})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Any, Int64}, String})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Int64}, String, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Any, 1, UInt32, Any, CategoricalArrays.CategoricalValue{Any, UInt32}, Base.Missing}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Any, UInt32}, Int64})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Any, UInt32}, String})
precompile(Tuple{typeof(Base.vect), Base.BitArray{1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Base.BitArray{1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Base.BitArray{1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Base.BitArray{1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vect), Bool})
precompile(Tuple{typeof(Base.vect), Array{Bool, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Bool, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Bool, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Bool, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copy), Array{Bool, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Bool, 1}, 1}, Int64, Array{Base.BitArray{1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.BitArray{1}, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{AbstractArray{Bool, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{Bool, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Array{AbstractArray{Bool, 1}, 1}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{Bool, 1}, 1}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{Bool, 1}, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.length), Array{Bool, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{AbstractArray{Bool, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{AbstractArray{Bool, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base.eltype), Array{Bool, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{Bool, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, Array{Bool, 1}})
precompile(Tuple{typeof(Base.vect), Bool, Vararg{Bool, N} where N})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.vect), Type{Array{Bool, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestCat, Symbol("#1#2")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Core.Compiler._typename), DataType})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, SparseArrays.HigherOrderFns.SparseVecStyle})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(TestCat, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Int64, 1}})
precompile(Tuple{getfield(TestCat, Symbol("#1#2")), Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(TestCat, Symbol("#1#2"))}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(TestCat, Symbol("#1#2"))}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.reverse), Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:C, :B, :A), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:C, :B, :A), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:C, :B, :A), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Array{Int64, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.union!), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.union), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Symbol}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.intersect), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.allunique), Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#25#26")){DataFrames.Index}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#25#26")){DataFrames.Index}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#25#26")){DataFrames.Index}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:B, :A), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:B, :A), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:B, :A), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol}, NamedTuple{(:A,), Tuple{Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A,), Tuple{Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:B, :A), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:B, :A), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:B, :A), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:cols,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##vcat")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.vcat), DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Int64}, Base.Generator{Array{Any, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.length), Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Any, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.eltype), Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Base.Missing, Vararg{Base.Missing, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Missing}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing, Base.Missing, Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:A, :C), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:A, :C), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :C), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:A,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:cols,), T} where T<:Tuple}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##vcat")), NamedTuple{(:cols,), Tuple{Array{Symbol, 1}}}, typeof(Base.vcat), DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##vcat#76")), Array{Symbol, 1}, typeof(Base.vcat), DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##_vcat#82")), Array{Symbol, 1}, typeof(DataFrames._vcat), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Array{Symbol, 1}}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Int64, Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Base.Generator{Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Base.Generator{Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Base.Missing}, Int64})
precompile(Tuple{Type{Array{Base.Missing, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Base.Missing, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Missing, 1}, Int64, Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.vect), Base.Missing, Vararg{Base.Missing, N} where N})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.copy), Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Base.Missing, 1}, Array{Base.Missing, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Array{Symbol, 1}}}, typeof(Base.reduce), typeof(Base.vcat), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Array{Symbol, 1}}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_type), Type{Union{Base.Missing, Int64}}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Iterators.Take{Base.Iterators.Repeated{Base.Missing}}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.vect), Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Base.Missing, Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :C, :B), T} where T<:Tuple}, Tuple{Int64, Base.Missing, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Base.Missing, Float64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :C, :B), Tuple{Int64, Base.Missing, Float64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :C, :B), Tuple{Int64, Base.Missing, Float64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.Missing})
precompile(Tuple{typeof(Base.fill!), Array{Base.Missing, 1}, Base.Missing})
precompile(Tuple{typeof(Base.isequal), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:C,), T} where T<:Tuple}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Base.Missing, 1}, Tuple{Symbol}, NamedTuple{(:C,), Tuple{Array{Base.Missing, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:C,), Tuple{Array{Base.Missing, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.issubset), Base.Set{Symbol}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base.issetequal), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, String, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}, String, String})
precompile(Tuple{typeof(Base.getproperty), Test.Pass, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgumentError, Symbol})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C, :D, :E), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:A,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D), Tuple{Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C, :D), Tuple{Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :C, :D, :E, :F), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :C, :D, :E, :F), Tuple{Int64, Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :C, :D, :E, :F), Tuple{Int64, Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C, :D, :E), Tuple{Int64, Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E, :F), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D, :E, :F), Tuple{Int64, Int64, Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C, :D, :E, :F), Tuple{Int64, Int64, Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.union), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Symbol, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N} where N})
precompile(Tuple{typeof(Base.union!), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N} where N})
precompile(Tuple{typeof(Base.intersect), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Symbol}, Array{Symbol, 1}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}, Base.IndexLinear, Base.UnitRange{Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:A,), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}, NamedTuple{(:A,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.AbstractDataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.AbstractDataFrame, 1}, Int64, Array{DataFrames.DataFrame, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.AbstractDataFrame, 1}, Int64, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Union{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(DataFrames, Symbol("##reduce#77")), Symbol, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.empty), Array{Union{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}, 1}, Type{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.AbstractDataFrame, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, typeof(Base.names)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("##_vcat#82")), Symbol, typeof(DataFrames._vcat), Array{DataFrames.AbstractDataFrame, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##_vcat")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(DataFrames._vcat), Array{DataFrames.AbstractDataFrame, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.AbstractDataFrame, 1}, Type{Array{Symbol, 1}}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, typeof(Base.names)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, typeof(Base.names)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, typeof(Base.names)}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{DataFrames.AbstractDataFrame, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#86#90")){Symbol}, Array{DataFrames.AbstractDataFrame, 1}})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.AbstractDataFrame, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataFrames.AbstractDataFrame, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.AbstractDataFrame, 1}, Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#86#90")){Symbol}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, Int64, Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.vect), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{DataFrames.AbstractDataFrame, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.AbstractDataFrame, 1}, Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Array{DataFrames.AbstractDataFrame, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.AbstractDataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Array{DataFrames.AbstractDataFrame, 1}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(DataFrames, Symbol("##reduce#77")), Symbol, typeof(Base.reduce), typeof(Base.vcat), Array{DataFrames.AbstractDataFrame, 1}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{DataFrames.AbstractDataFrame, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#79#81")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.empty), Array{DataFrames.AbstractDataFrame, 1}, Type{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Array{DataFrames.AbstractDataFrame, 1}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Array{DataFrames.AbstractDataFrame, 1}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#79#81")), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.push_widen), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, 1}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.AbstractDataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Array{DataFrames.AbstractDataFrame, 1}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.promote_typeof), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Union{Base.Missing, Int64}, 1}}, Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Base.Colon})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(DataFrames.ncol), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.first), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Bool, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Bool, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Symbol})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, Int64, Array{AbstractArray{T, 1} where T, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.union!), Base.Set{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._shrink), Function, Base.UnitRange{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.vectorfilter), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findall), Array{Bool, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Bool, 1}, Base.Colon})
precompile(Tuple{typeof(Base.size), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.size), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vect), UInt8})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{UInt8, 1}, Base.Colon})
precompile(Tuple{typeof(Base.size), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Type{UInt64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{UInt64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Symbol})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Random.make_seed), Int64})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.IndexLinear, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, V, C, U} where U where C where V}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{UInt32, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt32, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randn_unlikely), Random.MersenneTwister, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}, Int64})
precompile(Tuple{typeof(Base.randn), Int64})
precompile(Tuple{typeof(Base.promote_typeof), Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Union{Base.Missing, Int64}, 1}}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Array{AbstractArray{T, 1} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Float64, 1}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Union{Base.Missing, Int64}, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.length), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Base.Missing}, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, Bool, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt32, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt32, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalString{UInt32}, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{UInt64, 1, Array{UInt64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{UInt64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.hash), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Bool})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Union{Base.Missing, Int64}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##aggregate#236")), Bool, typeof(DataFrames.aggregate), DataFrames.DataFrame, Function})
precompile(Tuple{typeof(DataFrames.aggregate), DataFrames.DataFrame, Function})
precompile(Tuple{typeof(Base.vect), typeof(Base.identity)})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Iterators.Flatten{Base.Generator{Array{typeof(Base.identity), 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){typeof(Base.identity)}}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Iterators.Flatten{Base.Generator{Array{typeof(Base.identity), 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#247#250")){typeof(Base.identity), DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base._collect), Type{AbstractArray{T, 1} where T}, Base.Iterators.Flatten{Base.Generator{Array{typeof(Base.identity), 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.DataFrame}}}, Base.SizeUnknown})
precompile(Tuple{typeof(DataFrames._aggregate), DataFrames.DataFrame, Array{typeof(Base.identity), 1}, Array{Symbol, 1}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.aggregate), DataFrames.DataFrame, Array{typeof(Base.identity), 1}})
precompile(Tuple{typeof(DataFrames.funname), Function})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:a_identity,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:a_identity,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a_identity,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vect), typeof(Base.sum)})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Iterators.Flatten{Base.Generator{Array{typeof(Base.sum), 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){typeof(Base.sum)}}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Iterators.Flatten{Base.Generator{Array{typeof(Base.sum), 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#247#250")){typeof(Base.sum), DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base._collect), Type{AbstractArray{T, 1} where T}, Base.Iterators.Flatten{Base.Generator{Array{typeof(Base.sum), 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.DataFrame}}}, Base.SizeUnknown})
precompile(Tuple{typeof(DataFrames._aggregate), DataFrames.DataFrame, Array{typeof(Base.sum), 1}, Array{Symbol, 1}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.aggregate), DataFrames.DataFrame, Array{typeof(Base.sum), 1}})
precompile(Tuple{typeof(Base.vcat), Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.sum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.vcat), Float64})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{typeof(Base.sum)}, Type{typeof(Base.length)}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.sum), typeof(Base.length)}})
precompile(Tuple{Type{NamedTuple{(:sort,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}, Function})
precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##aggregate#239")), Bool, typeof(DataFrames.aggregate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Function, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.aggregate), DataFrames.DataFrame, Symbol, Array{Function, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{UInt32, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#254#261")){Bool}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._accumulate!), typeof(Base.mul_prod), Array{Int64, 1}, Array{Int64, 1}, Int64, Nothing})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#243#246")){typeof(Base.sum)}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#243#246")){typeof(Base.sum)}, Symbol})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Symbol}})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){typeof(Base.sum)}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){typeof(Base.sum)}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#243#246")){typeof(Base.length)}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#243#246")){typeof(Base.length)}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){typeof(Base.length)}}, Int64}})
precompile(Tuple{typeof(DataFrames._combine), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.without), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##add_names#27")), Bool, typeof(DataFrames.add_names), DataFrames.Index, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##hcat!#134")), Bool, Bool, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.combine), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.check_aggregate), Function})
precompile(Tuple{typeof(DataFrames.without), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#248#249")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Function})
precompile(Tuple{typeof(Base._collect), Type{AbstractArray{T, 1} where T}, Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(DataFrames._aggregate), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Array{Function, 1}, Array{Symbol, 1}, Bool})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#240#241")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Function, 1}, Array{Symbol, 1}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#247#250")){typeof(Base.sum), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#247#250")){typeof(Base.sum), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sum), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Int64})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}}, Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#247#250")){typeof(Base.sum), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}, Int64}})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sum), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Float64, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Float64})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#247#250")){typeof(Base.length), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#247#250")){typeof(Base.length), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.length), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}}, Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#247#250")){typeof(Base.length), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}, Int64}})
precompile(Tuple{typeof(Base.length), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.wrap), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames._combine_with_first), DataFrames.DataFrame, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#222#224")){Array{DataType, 1}, Int64}, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._append!), Array{Int64, 1}, Base.HasLength, Base.Iterators.Take{Base.Iterators.Repeated{Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Iterators.repeated), Int64, Int64})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt32, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isequal), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.isequal), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unaliascopy), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isequal), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.sum), Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.ismissing), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{UInt32, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{UInt32, 1}, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.aggregate), DataFrames.DataFrame, Int64, Array{Function, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##groupby")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.aggregate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Function, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##groupby")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.groupby), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.aggregate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Function, 1}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort!#397")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Order.ord), Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Symbol, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#388#389")){Array{Base.Order.Ordering, 1}}}})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#384#385")){DataFrames.DataFrame}, Int64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Array{Base.Order.Ordering, 1}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Symbol, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.push!), Array{Base.Order.Ordering, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:alg, :cols), T} where T<:Tuple}, Tuple{Nothing, Array{Symbol, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.permute!!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:sort, :skipmissing), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("##aggregate#238")), Bool, typeof(DataFrames.aggregate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}, typeof(DataFrames.aggregate), DataFrames.DataFrame, Symbol, Function})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#384#385")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#384#385")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Array{Base.Order.Ordering, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{getfield(DataFrames, Symbol("##sortperm#396")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#384#385")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#384#385")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##aggregate#239")), Bool, typeof(DataFrames.aggregate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{typeof(Base.sum), 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.aggregate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{typeof(Base.sum), 1}})
precompile(Tuple{typeof(Base._collect), Type{AbstractArray{T, 1} where T}, Base.Iterators.Flatten{Base.Generator{Array{typeof(Base.sum), 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(DataFrames._aggregate), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Array{typeof(Base.sum), 1}, Array{Symbol, 1}, Bool})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#240#241")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{typeof(Base.sum), 1}, Array{Symbol, 1}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.sum), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Int64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.append!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##groupby")), NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}, typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.aggregate), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{typeof(Base.promote_type), Type{typeof(Statistics.mean)}, Type{getfield(TestData, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Statistics.mean), getfield(TestData, Symbol("#1#2"))}})
precompile(Tuple{typeof(DataFrames.aggregate), DataFrames.DataFrame, Symbol, Array{Function, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#243#246")){typeof(Statistics.mean)}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#243#246")){typeof(Statistics.mean)}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){typeof(Statistics.mean)}}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){typeof(Statistics.mean)}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#243#246")){getfield(TestData, Symbol("#1#2"))}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#243#246")){getfield(TestData, Symbol("#1#2"))}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#244#245")){Array{Symbol, 1}}}}, Tuple{Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#243#246")){getfield(TestData, Symbol("#1#2"))}}, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#247#250")){typeof(Statistics.mean), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#247#250")){typeof(Statistics.mean), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Statistics._mean), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Colon})
precompile(Tuple{typeof(Statistics.mean), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}}, Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#247#250")){typeof(Statistics.mean), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}, Int64}})
precompile(Tuple{typeof(Statistics.mean), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#247#250")){getfield(TestData, Symbol("#1#2")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#247#250")){getfield(TestData, Symbol("#1#2")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{getfield(TestData, Symbol("#1#2")), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Base.Generator{Array{Function, 1}, getfield(DataFrames, Symbol("#248#249")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}}, Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#247#250")){getfield(TestData, Symbol("#1#2")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}}, Int64}})
precompile(Tuple{getfield(TestData, Symbol("#1#2")), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}}, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.promote_type), Type{getfield(TestData, Symbol("#1#2"))}, Type{getfield(TestData, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.promote_type), Type{typeof(Statistics.mean)}, Type{Function}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Statistics.mean), typeof(Statistics.mean), getfield(TestData, Symbol("#1#2")), getfield(TestData, Symbol("#1#2"))}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}}, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.vect), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, Array{String, 1}, Vararg{Array{String, 1}, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Int64, 1}}, Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##groupby")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{String, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.view), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}, Array{String, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#266#267")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#266#267")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames.group_rows), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Bool, Bool, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##groupby")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.groupby), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{getfield(DataFrames, Symbol("##sortperm#396")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Array{Any, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64, Symbol})
precompile(Tuple{getfield(Base, Symbol("#@r_str")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.vect), Array{Union{Base.Missing, Int64}, 1}, Vararg{Array{Union{Base.Missing, Int64}, 1}, N} where N})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames._nonmissing!), Base.BitArray{1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames._nonmissing!), Base.BitArray{1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.findall), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.BitArray{1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#145")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{String, 1}, Base.IndexLinear, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(DataFrames, Symbol("#128#129")){Array{Int64, 1}}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame})
precompile(Tuple{typeof(Base._deleteat!), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#128#129")){Array{Int64, 1}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#128#129")){Array{Int64, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Test.Threw}, MethodError, Nothing, LineNumberNode})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Int64})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Array{Int64, 1}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Array{Any, 1}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Array{Symbol, 1}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Base.UnitRange{Int64}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#145")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.:(!=)), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#147")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("#13#14")){Base.Regex}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(DataFrames, Symbol("#13#14")){Base.Regex}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Symbol, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Int64}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames._nonmissing!), Base.BitArray{1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{Type{NamedTuple{(:disallowmissing,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##dropmissing")), NamedTuple{(:disallowmissing,), Tuple{Bool}}, typeof(DataFrames.dropmissing), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##dropmissing")), NamedTuple{(:disallowmissing,), Tuple{Bool}}, typeof(DataFrames.dropmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.deleterows!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.BitArray{1}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##dropmissing!")), NamedTuple{(:disallowmissing,), Tuple{Bool}}, typeof(DataFrames.dropmissing!), DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:a, :copycols), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Bool}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:a, :copycols), Tuple{Array{Int64, 1}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :copycols), Tuple{Array{Int64, 1}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._nonmissing!), Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#128#129")){Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Random.shuffle!), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Symbol}}, Symbol, Symbol})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Union{Base.Missing, Symbol}, 1}, Random.SamplerSimple{Array{Union{Base.Missing, Symbol}, 1}, Random.SamplerRangeFast{UInt64, Int64}, Union{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base.rand), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Array{Union{Base.Missing, Symbol}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{Type{Array{Union{Base.Missing, Float64}, 1}}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :v1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :v1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :v1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :v1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Symbol}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Symbol}}, Symbol, Symbol, Symbol})
precompile(Tuple{Type{NamedTuple{(:a, :b2, :v2), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b2, :v2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b2, :v2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b2, :v2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :kind), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DataFrames.RowIndexMap, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##merge!#7")), Bool, typeof(Base.merge!), DataFrames.Index, DataFrames.Index})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##crossjoin#304")), Bool, typeof(DataFrames.crossjoin), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}}, DataFrames.DataFrame, DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#68#69")){DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#init_map#292")), DataFrames.DataFrame, Bool})
precompile(Tuple{typeof(Base.pairs), Nothing})
precompile(Tuple{typeof(Base.findall), Nothing})
precompile(Tuple{typeof(DataFrames.update_row_maps!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.RowGroupDict{DataFrames.DataFrame}, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##compose_joined_table#286")), Bool, typeof(DataFrames.compose_joined_table), DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}, Symbol, DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataFrames.RowIndexMap, 1}, DataFrames.RowIndexMap, Base.Generator{Array{Int64, 1}, getfield(Base, Symbol("#26#27")){Tuple{DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#296#300")){DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#298#302")){DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##join#294")), Symbol, Symbol, Bool, Nothing, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind), Tuple{Symbol, Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#287#290")){DataFrames.RowGroupDict{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#288#291")){DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.UnitRange{Int64}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.update_row_maps!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.RowIndexMap, Nothing, DataFrames.RowIndexMap, Nothing})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Int64}, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mightalias), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Symbol}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Array{Union{Base.Missing, Symbol}, 1}, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Array{Union{Base.Missing, Float64}, 1}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Symbol}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Float64}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Int64}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.unalias), Array{Bool, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Bool, 1, Array{Bool, 1}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, false}}, Array{Bool, 1}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Bool, 1}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(DataFrames.update_row_maps!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap, Array{Bool, 1}})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Int64}, 1}, Base.Missing})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Symbol}, 1}, Base.Missing})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{Union{Base.Missing, Symbol}, 1}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Float64}, 1}, Base.Missing})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, Int64}, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Union{Base.Missing, Int64}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, Int64}, Int64})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Union{Base.Missing, Int64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexin), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, Base.OneTo{Int64}, Nothing})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Union{Nothing, Int64}, 1}, Symbol})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Union{Nothing, Int64}, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.to_index), Array{Union{Base.Missing, Symbol}, 1}, Nothing})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Union{Nothing, Int64}, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.to_index), Array{Union{Base.Missing, Float64}, 1}, Nothing})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestData, Symbol("#3#5")), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(TestData, Symbol("#3#5")), Base.Missing})
precompile(Tuple{getfield(TestData, Symbol("#3#5")), Int64})
precompile(Tuple{typeof(Base._collect), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#3#5"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#3#5"))}})
precompile(Tuple{typeof(Base.in), Int64, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Union{Base.Missing, Int64}, 1}, Type{Bool}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#3#5"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Bool}, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#3#5"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#3#5"))}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Bool, 1}, Symbol})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Symbol}, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Symbol}, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.all), Function, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.ismissing), Array{Union{Base.Missing, Symbol}, 1}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestData, Symbol("#4#6")), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(TestData, Symbol("#4#6")), Base.Missing})
precompile(Tuple{getfield(TestData, Symbol("#4#6")), Int64})
precompile(Tuple{typeof(Base._collect), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#4#6"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#4#6"))}})
precompile(Tuple{typeof(Base._similar_for), Array{Union{Base.Missing, Int64}, 1}, Type{Bool}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#4#6"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#4#6"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, getfield(TestData, Symbol("#4#6"))}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.all), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.ismissing), Array{Union{Base.Missing, Float64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, String}}, String, String, String})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Array{Union{Base.Missing, String}, 1}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, String}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.update_row_maps!), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap, Nothing})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, String}, 1}, Base.Missing})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##compose_joined_table")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.compose_joined_table), DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}, Symbol, DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap, DataFrames.RowIndexMap})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, Base.Missing, String}})
precompile(Tuple{Type{NamedTuple{(:on,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on,), Tuple{Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Union{Base.Missing, String}, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, String}, 1}}, Tuple{Array{Union{Base.Missing, String}, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, String}, 1}}, Tuple{Array{Union{Base.Missing, String}, 1}}, Int64})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, Base.Missing, String}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :v1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :v1), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :v1), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :v2), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :v2), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :v2), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Base.Missing, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.Missing, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Symbol}, 1}, Base.Missing, Int64})
precompile(Tuple{Type{NamedTuple{(:on,), T} where T<:Tuple}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.:(==)), Symbol, WeakRef})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{Type{DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}}, DataFrames.DataFrame, DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##join#294")), Array{Symbol, 1}, Symbol, Bool, Nothing, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on,), Tuple{Array{Symbol, 1}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Union{Base.Missing, Symbol}, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Symbol}, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Symbol}}, Symbol, Symbol, Symbol, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{Type{NamedTuple{(:on, :kind), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind), Tuple{Array{Symbol, 1}, Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Int64, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Int64, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Symbol, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Symbol})
precompile(Tuple{typeof(Base.promote_type), Type{Symbol}, Type{Union{Base.Missing, Symbol}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Symbol}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Base.Missing, Symbol}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :v1), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :v1), Tuple{Array{String, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :v1), Tuple{Array{String, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :v2), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :v2), Tuple{Array{String, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :v2), Tuple{Array{String, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestData, Symbol("#spltdf#10")), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestData, Symbol("#7#11")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Char, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#7#11"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#7#11"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#7#11"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestData, Symbol("#8#12")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Char, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#8#12"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#8#12"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#8#12"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestData, Symbol("#9#13")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Char, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#9#13"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#9#13"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(TestData, Symbol("#9#13"))}})
precompile(Tuple{Type{NamedTuple{(:on, :makeunique), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :makeunique), Tuple{Symbol, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{String, 1}}, Tuple{Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{String, 1}}, Tuple{Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.similar), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.mightalias), Array{String, 1}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.similar), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.similar), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.view), Array{Char, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Array{Char, 1}, Base.SubArray{Char, 1, Array{Char, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Char, 1, Array{Char, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Char, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Char, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Char, 1}, Base.SubArray{Char, 1, Array{Char, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Char, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Char, 1, Array{Char, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Char, 1, Array{Char, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Char, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Char, 1, Array{Char, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Char, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Char, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:on, :makeunique), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :makeunique), Tuple{Array{Symbol, 1}, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Char, 1}, Array{Char, 1}, Array{Char, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Char, 1}, Array{Char, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Char, 1}, Array{Char, 1}, Array{Char, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Char, 1}, Array{Char, 1}, Array{Char, 1}}, Tuple{Array{Char, 1}, Array{Char, 1}, Array{Char, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Char, 1}, Array{Char, 1}, Array{Char, 1}}, Tuple{Array{Char, 1}, Array{Char, 1}, Array{Char, 1}}, Int64})
precompile(Tuple{typeof(Base.view), Array{String, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{String, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, String}}, String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Union{Base.Missing, Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Union{Base.Missing, String}, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Union{Base.Missing, String}, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, String}, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, String}, 1}, 1}, Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Union{Base.Missing, String}, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Union{Base.Missing, String}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Array{Union{Base.Missing, String}, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Union{Base.Missing, String}, 1}, 1}, Base.Generator{Array{Array{Union{Base.Missing, String}, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Array{Union{Base.Missing, String}, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Union{Base.Missing, String}, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Array{Union{Base.Missing, String}, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Union{Base.Missing, String}, 1}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, String}}, Int64})
precompile(Tuple{typeof(Base.length), Array{Array{Union{Base.Missing, String}, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Union{Base.Missing, String}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Array{Union{Base.Missing, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Array{Union{Base.Missing, Int64}, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Array{Array{Union{Base.Missing, Int64}, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Int64})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{true}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Function})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, Function})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}}, Base.Val{true}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{true}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!)), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Function})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{true}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}}, Base.Val{true}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.foreach), getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestData, Symbol("#14#18")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#64#65")){getfield(TestData, Symbol("#14#18"))}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#64#65")){getfield(TestData, Symbol("#14#18"))}}})
precompile(Tuple{typeof(Base.filter), getfield(TestData, Symbol("#14#18")), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(TestData, Symbol("#15#19")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#66#67")){getfield(TestData, Symbol("#15#19"))}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#66#67")){getfield(TestData, Symbol("#15#19"))}}})
precompile(Tuple{typeof(Base.filter!), getfield(TestData, Symbol("#15#19")), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Int64, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestData, Symbol("#16#20")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#64#65")){getfield(TestData, Symbol("#16#20"))}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#64#65")){getfield(TestData, Symbol("#16#20"))}}})
precompile(Tuple{typeof(Base.filter), getfield(TestData, Symbol("#16#20")), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.:(>)), Base.Missing, Int64})
precompile(Tuple{Type{Test.Threw}, TypeError, Nothing, LineNumberNode})
precompile(Tuple{getfield(TestData, Symbol("#17#21")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#66#67")){getfield(TestData, Symbol("#17#21"))}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(DataFrames, Symbol("#66#67")){getfield(TestData, Symbol("#17#21"))}}})
precompile(Tuple{typeof(Base.filter!), getfield(TestData, Symbol("#17#21")), DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.Index}})
precompile(Tuple{typeof(Base.push!), DataFrames.Index, Symbol})
precompile(Tuple{typeof(Base.big), Int64})
precompile(Tuple{typeof(Base.vect), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.unitrange_last), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{Base.Colon, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Base.GMP.BigInt}}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base.ndims), Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.GMP.BigInt, Symbol})
precompile(Tuple{typeof(Base.ndims), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Bool, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Bool, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.GMP.BigInt, 1}, Symbol})
precompile(Tuple{typeof(Base.ndims), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Base.GMP.BigInt}, Symbol})
precompile(Tuple{typeof(Base.ndims), Base.UnitRange{Base.GMP.BigInt}})
precompile(Tuple{Type{Base.OneTo{Int64}}, Base.GMP.BigInt})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Base.UnitRange{Base.GMP.BigInt}})
precompile(Tuple{typeof(Base._in_unit_range), Base.UnitRange{Base.GMP.BigInt}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Base.GMP.BigInt}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Base.UnitRange{Base.GMP.BigInt}})
precompile(Tuple{typeof(Base._collect), Type{Int64}, Base.UnitRange{Base.GMP.BigInt}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Base.UnitRange{Base.GMP.BigInt}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Int64}, 1}, Symbol})
precompile(Tuple{typeof(Base.ndims), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Base.GMP.BigInt}, 1}, Symbol})
precompile(Tuple{typeof(Base.ndims), Array{Union{Base.Missing, Base.GMP.BigInt}, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Union{Base.Missing, Base.GMP.BigInt}, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Union{Base.Missing, Base.GMP.BigInt}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Symbol}, 1}, Symbol})
precompile(Tuple{typeof(Base.ndims), Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Symbol, 1}, Base.IndexLinear, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Bool})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Bool}}, Bool, Bool})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{typeof(Base.vect), Bool, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Bool, Base.Missing})
precompile(Tuple{Type{Array{Union{Base.Missing, Bool}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool, Base.Missing}})
precompile(Tuple{typeof(Base.promote_type), Type{Symbol}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Symbol, Base.Missing}})
precompile(Tuple{typeof(Base.rat), Float64})
precompile(Tuple{typeof(Base.lcm_unchecked), Int64, Int64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{Base.Colon, Float64, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{Float64, 1}})
precompile(Tuple{Type{BoundsError}, Any})
precompile(Tuple{Type{Test.Threw}, BoundsError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.ImmutableDict{Symbol, Any}, Base.ImmutableDict{Symbol, Any}})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any})
precompile(Tuple{typeof(Base.convert), Type{Any}, Type{T} where T})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Symbol, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Symbol, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{BoundsError}, Any, Array{Bool, 1}})
precompile(Tuple{Base.Colon, Bool, Bool})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Bool}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Base.UnitRange{Bool}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Base.Colon})
precompile(Tuple{typeof(Base.length), DataFrames.Index})
precompile(Tuple{typeof(Base.:(==)), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Base.Colon})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{DataFrames.Index}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.names), DataFrames.Index})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:nms,), Tuple{Array{Symbol, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##rename!#4")), Bool, typeof(DataFrames.rename!), DataFrames.Index, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##rename!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.rename!), DataFrames.Index, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.Index, DataFrames.Index})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.Index, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copy), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Symbol, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Symbol, 1}}, Base.Val{true}})
precompile(Tuple{typeof(Base.copy), DataFrames.Index})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Int64}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.Index, Array{Base.Pair{Symbol, Symbol}, 1}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{Symbol, Symbol}, N} where N})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestIndex, Symbol("#1#3"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestIndex, Symbol("#1#3"))}}})
precompile(Tuple{typeof(DataFrames.rename!), getfield(TestIndex, Symbol("#1#3")), DataFrames.Index})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestIndex, Symbol("#2#4"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestIndex, Symbol("#2#4"))}}})
precompile(Tuple{typeof(DataFrames.rename!), getfield(TestIndex, Symbol("#2#4")), DataFrames.Index})
precompile(Tuple{typeof(Base.delete!), DataFrames.Index, Int64})
precompile(Tuple{typeof(Base.delete!), DataFrames.Index, Symbol})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Base.Colon})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Base.UnitRange{Int64}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Array{Bool, 1}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Array{Symbol, 1}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Symbol, 1}}}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##make_unique!#1")), Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copy), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexCartesian, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##make_unique!#1")), Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copy), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Int64})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Symbol})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Bool})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.length), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.length), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.keys), DataFrames.Index})
precompile(Tuple{typeof(Base.copy), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.names), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.keys), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.names), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.keys), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.haskey), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Bool})
precompile(Tuple{typeof(Base.haskey), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#34#35")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#34#35")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.names), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.Index, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Base.Regex})
precompile(Tuple{typeof(Base.isempty), Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.isempty), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.parentcols), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, getfield(DataFrames, Symbol("#13#14")){Base.Regex}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._collect), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, getfield(DataFrames, Symbol("#13#14")){Base.Regex}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexCartesian, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.filter), getfield(DataFrames, Symbol("#13#14")){Base.Regex}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.Regex})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.Regex})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._names), DataFrames.SubIndex{DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.names), DataFrames.SubIndex{DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.parentcols), DataFrames.SubIndex{DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Base.Regex})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{Type{DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}}, Int64, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Int64, Symbol}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Int64, Symbol}})
precompile(Tuple{Type{DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}}, Symbol, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Symbol, Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Symbol, Int64}})
precompile(Tuple{Type{DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}}, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.Between{Symbol, Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.Between{Int64, Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.Between{Symbol, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.Between{Symbol, Symbol}})
precompile(Tuple{Type{DataAPI.All{T} where T<:Tuple}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{}}})
precompile(Tuple{Type{DataAPI.All{T} where T<:Tuple}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Int64, Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.union), Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Int64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Int64}}, typeof(Base.push!), Int64, Array{Int64, 1}})
precompile(Tuple{Type{DataAPI.All{T} where T<:Tuple}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Int64, Symbol}}, Tuple{Int64, Symbol}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Int64, Symbol}}}}, Int64})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Int64, Symbol}}})
precompile(Tuple{Type{DataAPI.All{T} where T<:Tuple}, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Int64}}, Tuple{Symbol, Int64}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Symbol, Int64}}}}, Int64})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Int64}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol}}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Symbol, Symbol}}}}, Int64})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Symbol, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Int64, Int64, Int64}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.Val{3}}})
precompile(Tuple{typeof(Base.union), Int64, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Int64, 1}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Int64, Symbol}}, Tuple{Symbol, Int64, Symbol}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Symbol, Int64, Symbol}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Int64, Symbol}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Symbol, Int64, Symbol}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Int64}}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Symbol, Symbol, Int64}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Symbol, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Symbol, Symbol, Int64}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Int64, Int64, Symbol}}, Tuple{Int64, Int64, Symbol}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Int64, Int64, Symbol}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Int64, Int64, Symbol}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Int64, Int64, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:a1, :a2, :b1, :b2), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a1, :a2, :b1, :b2), Tuple{Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a1, :a2, :b1, :b2), Tuple{Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{DataAPI.All{T} where T<:Tuple}, Base.Regex, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}}}, Tuple{Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}}}}}, Int64})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Int64}}, typeof(Base.push!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.union!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}}}})
precompile(Tuple{Type{DataAPI.All{T} where T<:Tuple}, InvertedIndices.InvertedIndex{Base.Regex}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Tuple{InvertedIndices.InvertedIndex{Base.Regex}, Base.Regex}}, Tuple{InvertedIndices.InvertedIndex{Base.Regex}, Base.Regex}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{InvertedIndices.InvertedIndex{Base.Regex}, Base.Regex}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{InvertedIndices.InvertedIndex{Base.Regex}, Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{InvertedIndices.InvertedIndex{Base.Regex}, Base.Regex}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Base.StepRange{Char, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.StepRange{Char, Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Extruded{Base.StepRange{Char, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Random.shuffle), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.zeros), Int64, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Float64, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Base.Pair{A, B} where B where A}, Tuple{Array{Symbol, 1}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Base.Pair{A, B} where B where A}, Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Base.Pair{A, B} where B where A}, Tuple{Array{Symbol, 1}, Array{Symbol, 1}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Symbol}}, Array{Base.Pair{Symbol, Symbol}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{Symbol, Symbol}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.lcm), NamedTuple{(:init,), Tuple{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.lcm), Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Base.Dict{Symbol, Symbol}, getfield(DataFrames, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Symbol, Symbol}, getfield(DataFrames, Symbol("#38#39"))}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Base.sort), Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.index), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.collect), Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.values), Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.ValueIterator{Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.collect), Base.ValueIterator{Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.sort), Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestDataFrame, Symbol("#1#2")){DataFrames.DataFrame}, Base.Iterators.Enumerate{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.Iterators.Enumerate{Array{Symbol, 1}}, getfield(TestDataFrame, Symbol("#1#2")){DataFrames.DataFrame}}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.Iterators.Enumerate{Array{Symbol, 1}}, getfield(TestDataFrame, Symbol("#1#2")){DataFrames.DataFrame}}})
precompile(Tuple{Type{Random.Sampler{E} where E}, Type{Random.MersenneTwister}, Base.StepRange{Char, Int64}, Base.Val{inf}})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Char, 1}, Random.SamplerSimple{Base.StepRange{Char, Int64}, Random.SamplerRangeFast{UInt64, Int64}, Char}})
precompile(Tuple{typeof(Base.rand), Base.StepRange{Char, Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Base.StepRange{Char, Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Char, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Array{Char, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Extruded{Array{Char, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Array{Char, 1}}}})
precompile(Tuple{typeof(Base.lastindex), Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestDataFrame, Symbol("#3#5")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Any, 1}, 1}, Array{Any, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(TestDataFrame, Symbol("#3#5"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(TestDataFrame, Symbol("#3#5"))}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{Symbol, Symbol}, N} where N})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{Symbol, Symbol}, N} where N})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestDataFrame, Symbol("#4#6")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Any, 1}, 1}, Array{Any, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(TestDataFrame, Symbol("#4#6"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(TestDataFrame, Symbol("#4#6"))}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Array{Char, 1}}}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Pair{Symbol, Symbol}, Base.Generator{Array{Base.Pair{Int64, Symbol}, 1}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{Int64, Symbol}, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Pair{Int64, Symbol}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Pair{Int64, Symbol}})
precompile(Tuple{Type{NamedTuple{(:c, :b), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:c, :b), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:c, :b), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.GMP.BigInt, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Base.Pair{Base.GMP.BigInt, Symbol}, 1}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{Base.GMP.BigInt, Symbol}, 1}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Pair{Base.GMP.BigInt, Symbol}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Pair{Base.GMP.BigInt, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, UInt8, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Pair{Symbol, Symbol}, Base.Generator{Array{Base.Pair{UInt8, Symbol}, 1}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{UInt8, Symbol}, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Pair{UInt8, Symbol}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Pair{UInt8, Symbol}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Base.Pair{Int64, String}, 1}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{Int64, String}, 1}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Pair{Int64, String}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Pair{Int64, String}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Int64, Symbol}, Vararg{Base.Pair{Int64, Symbol}, N} where N})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{Base.Pair{Int64, Symbol}, 1}})
precompile(Tuple{Type{NamedTuple{(:b, :a), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:b, :a), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :a), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Int64, String}, Vararg{Base.Pair{Int64, String}, N} where N})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{Base.Pair{Int64, String}, 1}})
precompile(Tuple{Type{Base.Dict{Int64, Symbol}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Symbol}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Symbol}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Int64, Symbol}, Vararg{Base.Pair{Int64, Symbol}, N} where N})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Base.Dict{Int64, Symbol}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Int64, Symbol}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Dict{Int64, Symbol}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Base.Dict{Int64, String}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Int64, String}, getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Dict{Int64, String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Bool, Symbol})
precompile(Tuple{typeof(Base.to_index), Array{Symbol, 1}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#40#41")){DataFrames.DataFrame}, Base.Pair{Bool, Symbol}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{Bool, Symbol}, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Pair{Bool, Symbol}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Pair{Bool, Symbol}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{Int64, String}, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Dict{Int64, Symbol}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Dict{Int64, String}})
precompile(Tuple{Type{NamedTuple{(:a, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:b, :a), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:b, :a), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :a), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing}})
precompile(Tuple{getfield(Base, Symbol("#58#59")){typeof(Base.isequal)}, DataFrames.DataFrame, Vararg{DataFrames.DataFrame, N} where N})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:c,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:c,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:c,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:d,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:d,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:d,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, DataFrames.DataFrame}}, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, DataFrames.DataFrame}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, DataFrames.DataFrame}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, DataFrames.DataFrame}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, DataFrames.DataFrame}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Base.Missing, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, DataFrames.DataFrame}, 1}, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Union{Base.Missing, Int64}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Union{Base.Missing, DataFrames.DataFrame}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, DataFrames.DataFrame}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##rename")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.rename), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, String}}, String})
precompile(Tuple{Type{Base.Dict{Float64, UInt32}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 1}, Array{Float64, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}}, Array{Float64, 1}, Base.Dict{Float64, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, UInt32}, Float64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}, Float64}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}, Float64}, Base.Dict{Float64, UInt32}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Float64, 1}, Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Float64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{Type{Base.Dict{Float64, Nothing}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, Nothing}, Float64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, Nothing}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Float64, Nothing}, Nothing, Float64})
precompile(Tuple{typeof(Base.allunique), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#11#12")){Array{Float64, 1}}, Float64})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.unique), Array{Float64, 1}})
precompile(Tuple{typeof(Base.union!), Base.Set{Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}, Float64}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}, Float64}, Base.Dict{Float64, UInt32}, Float64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, UInt32}, Float64})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{Float64, UInt32}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Float64, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Float64, UInt32}, Int64, Float64})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, V, C, U} where U where C where V}, Array{Float64, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, N, R, V, C, U} where U where C where V where R<:Integer where N}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Float64, UInt32}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Float64, UInt32}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Missings.missings), Type{Int64}, Int64})
precompile(Tuple{typeof(Missings.missings), Type{String}, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, N, R, V, C, U} where U where C where V where R<:Integer where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.similar), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.hasproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.insert!), DataFrames.Index, Int64, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{String, 1}}})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{String, 1}}})
precompile(Tuple{Type{Test.Threw}, Base.DimensionMismatch, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##insertcols!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:a, :a_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :a_1), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :a_1), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##insertcols!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##insertcols!")), NamedTuple{(:makeunique,), Tuple{Bool}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Int64}})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##insertcols!")), NamedTuple{(:y,), Tuple{Base.UnitRange{Int64}}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#124")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#124")), Bool, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##insertcols!")), NamedTuple{(:a, :b), Tuple{Int64, Int64}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##insertcols!")), NamedTuple{(:x,), Tuple{Array{Int64, 1}}}, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.ones), Int64, Int64})
precompile(Tuple{Type{Array{Float64, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.promote_typeof), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{Type{Array{Array{Union{Base.Missing, Float64}, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{NamedTuple{(:Column,), T} where T<:Tuple}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:Column,), Tuple{Array{Symbol, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Column,), Tuple{Array{Symbol, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Symbol, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Symbol, Int64, Symbol})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Any, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Any, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.BitArray{1}, Base.Colon})
precompile(Tuple{typeof(Base.size), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, CategoricalArrays.CategoricalString{UInt32}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{CategoricalArrays.CategoricalString{UInt32}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{CategoricalArrays.CategoricalString{UInt32}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{CategoricalArrays.CategoricalString{UInt32}}, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.fill!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.hash), Tuple{Int64, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), DataFrames.DataFrame, UInt64})
precompile(Tuple{typeof(Base.hash), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.hash), Base.Pair{Int64, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Array{Int64, 1}, UInt64})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{getfield(Test, Symbol("#@test_logs")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Tuple{Expr, Expr}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{Base.CoreLogging.SimpleLogger}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:first, :second), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:first, :second), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:first, :second), Tuple{Array{Int64, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Tuple{Int64, String}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#7#25"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#7#25")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Tuple{Float64, String}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Float64})
precompile(Tuple{Type{InexactError}, Symbol, Any, Any})
precompile(Tuple{typeof(Base.resize!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{String, 1}, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.rethrow), InexactError})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Tuple{Int64, String, Int64}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#8#26"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#8#26")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Tuple{String, Int64}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, String})
precompile(Tuple{typeof(Base.rethrow), MethodError})
precompile(Tuple{getfield(TestDataFrame, Symbol("#9#27"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#9#27")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Int64}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Int64}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:first, :second), T} where T<:Tuple}, Tuple{Int64, String}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:first, :second), Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:first, :second), Tuple{Int64, String}}})
precompile(Tuple{Type{NamedTuple{(:second, :first), T} where T<:Tuple}, Tuple{String, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:second, :first), Tuple{String, Int64}}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:second, :first), Tuple{String, Int64}}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#10#28"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#10#28")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:second, :first), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:second, :first), Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Bool}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Bool}, Bool, Symbol})
precompile(Tuple{getfield(TestDataFrame, Symbol("#11#29"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#11#29")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Bool}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, Bool})
precompile(Tuple{getfield(TestDataFrame, Symbol("#12#30"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#12#30")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, String}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#13#31"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#13#31")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:first, :second), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:first, :second), Tuple{Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:first, :second), Tuple{Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#14#32"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#14#32")), Base.CoreLogging.LogState})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Int64}, Base.Dict{Symbol, Int64}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Int64}, Base.Pair{String, Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{String, Int64}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{String, Int64}}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#15#33"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#15#33")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Int64}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Int64}, Type{Any}, Type{Int64}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Int64}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Int64}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{String, Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Any, Int64}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Any, Int64}})
precompile(Tuple{typeof(Base.rethrow), Base.KeyError})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool}}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Bool}}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Bool}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Int64, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Bool})
precompile(Tuple{getfield(TestDataFrame, Symbol("#16#34"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#16#34")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.rethrow), AssertionError})
precompile(Tuple{getfield(TestDataFrame, Symbol("#17#35"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#17#35")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Int64}}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#18#36"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#18#36")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(DataFrames, Symbol("#180#181")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#180#181")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Int64})
precompile(Tuple{typeof(Base.pairs), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.get), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol, Base.Missing})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#188")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(DataFrames.pushhelper!), Array{Int64, 1}, Int64})
precompile(Tuple{Type{Test.Threw}, AssertionError, Nothing, LineNumberNode})
precompile(Tuple{getfield(TestDataFrame, Symbol("#19#37"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#19#37")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(TestDataFrame, Symbol("#20#38"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#20#38")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(TestDataFrame, Symbol("#21#39"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#21#39")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#22#40"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#22#40")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(TestDataFrame, Symbol("#23#41"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#23#41")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.hcat), Int64, Int64})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Array{Int64, 2}})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Test.TestLogger})
precompile(Tuple{typeof(Base.occursin), Tuple{Symbol, Base.Regex}, Test.LogRecord})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Tuple{Symbol, Base.Regex}}, Array{Test.LogRecord, 1}}}, getfield(Test, Symbol("#47#50"))}, Base.Colon})
precompile(Tuple{typeof(Test.match_logs), Function, Tuple{Symbol, Base.Regex}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#24#42"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#24#42")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, String})
precompile(Tuple{typeof(Base.firstcaller), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{typeof(Base.length), Array{Ptr{Nothing}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Ptr{Nothing}, 1}, Int64})
precompile(Tuple{typeof(Base.deleteat!), Array{Ptr{Nothing}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._reformat_bt), Array{Ptr{Nothing}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Test.TestLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}, typeof(Base.CoreLogging.handle_message), Test.TestLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Char})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Base.CoreLogging.LogLevel, String}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, Base.Regex}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Test, Symbol("#53#54")), Base.Iterators.Zip{Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, Base.Regex}}}})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, Base.Regex}}}, getfield(Test, Symbol("#53#54"))}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, Base.Regex}}}, getfield(Test, Symbol("#53#54"))}})
precompile(Tuple{getfield(Test, Symbol("#53#54")), Tuple{Base.CoreLogging.LogLevel, Symbol}})
precompile(Tuple{getfield(Test, Symbol("#53#54")), Tuple{String, Base.Regex}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Array{Test.LogRecord, 1}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Array{Test.LogRecord, 1}, DataFrames.DataFrame}, Int64, Int64})
precompile(Tuple{Type{Test.Pass}, Symbol, Nothing, Nothing, DataFrames.DataFrame})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Pass})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Int64, Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :d, :e), Tuple{Int64, Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{Type{NamedTuple{(:a, :d, :e), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :d, :e), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :d, :e), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.Regex})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{Type{NamedTuple{(:b, :c, :d, :e), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:b, :c, :d, :e), Tuple{Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :c, :d, :e), Tuple{Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.copy), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##copy")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(Base.copy), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Int64})
precompile(Tuple{Type{BoundsError}, Any, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.foreach), getfield(DataFrames, Symbol("#126#127")){Int64}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(DataFrames.deleterows!), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Int64}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(DataFrames, Symbol("#126#127")){Base.UnitRange{Int64}}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(DataFrames.deleterows!), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Base.UnitRange{Int64}}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Base.UnitRange{Int64}}, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.deleterows!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{Float64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Int64}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Int64}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Base.UnitRange{Int64}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Base.UnitRange{Int64}}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Int64}, Array{Any, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, Array{Any, 1}})
precompile(Tuple{Type{BoundsError}, Any, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.deleterows!), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{Type{NamedTuple{(:x, :copycols), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:x, :copycols), Tuple{Array{Int64, 1}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :copycols), Tuple{Array{Int64, 1}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Dates.Date}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Dates.Date}, Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:number, :number_missing, :string, :string_missing, :dates, :catarray), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Dates.Date, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Dates.Date, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:number, :number_missing, :string, :string_missing, :dates, :catarray), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Dates.Date, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:number, :number_missing, :string, :string_missing, :dates, :catarray), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Dates.Date, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:number, :number_missing, :string, :string_missing, :dates, :catarray), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Dates.Date, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Dates.Date, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.copy), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.Date, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Nothing, Vararg{Nothing, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, Nothing, Vararg{Nothing, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Float64}, Type{Union{Nothing, Float64}}})
precompile(Tuple{Type{Array{Union{Nothing, Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Float64}, 1}, Tuple{Float64, Float64, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Statistics._mean), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Statistics.std), Array{Int64, 1}})
precompile(Tuple{typeof(Base.promote_typeof), Float64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Dates.Date, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Dates.Date, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Float64}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Float64, Float64, String, String, Dates.Date, Int64}})
precompile(Tuple{typeof(Base.vect), Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Nothing}, Type{Union{Nothing, Int64}}})
precompile(Tuple{Type{Array{Union{Nothing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int64}, 1}, Tuple{Nothing, Nothing, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int64}, 1}, Tuple{Nothing, Int64, Nothing, Int64, Nothing, Nothing}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, Int64, String, String, Dates.Date, Int64}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Dates.Date, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Missing}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, Base.Missing, String, Base.Missing, Dates.Date, Int64}})
precompile(Tuple{typeof(Base.vect), Type{T} where T, Vararg{Type{T} where T, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Type{T} where T, Type{T} where T, Vararg{Type{T} where T, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Type{T} where T})
precompile(Tuple{typeof(Base.promote_type), Type{DataType}, Type{DataType}})
precompile(Tuple{typeof(Base.promote_type), Type{Union}, Type{DataType}})
precompile(Tuple{typeof(Base.promote_type), Type{DataType}, Type{Type}})
precompile(Tuple{typeof(Base.promote_type), Type{Union}, Type{Type}})
precompile(Tuple{Type{Array{Type, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Type, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{DataType, Union, DataType, Union, DataType, DataType}})
precompile(Tuple{Type{NamedTuple{(:variable, :mean, :std, :min, :q25, :median, :q75, :max, :nunique, :nmissing, :first, :last, :eltype), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Any, 1}, Array{Any, 1}, Array{Type, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Any, 1}, Array{Any, 1}, Array{Type, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:variable, :mean, :std, :min, :q25, :median, :q75, :max, :nunique, :nmissing, :first, :last, :eltype), Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Any, 1}, Array{Any, 1}, Array{Type, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:variable, :mean, :std, :min, :q25, :median, :q75, :max, :nunique, :nmissing, :first, :last, :eltype), Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Any, 1}, Array{Any, 1}, Array{Type, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:variable, :mean, :std, :min, :q25, :median, :q75, :max, :nunique, :nmissing, :first, :last, :eltype), Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{Any, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Any, 1}, Array{Any, 1}, Array{Type, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Type, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Type, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Type, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Nothing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Nothing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Type, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Symbol, 1}, Tuple{Int64}, Tuple{Bool}, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Symbol})
precompile(Tuple{typeof(Base.cat_indices), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataAPI.describe), DataFrames.DataFrame})
precompile(Tuple{typeof(Base._collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#47#55")), Array{Symbol, 1}}, getfield(DataFrames, Symbol("#46#54"))}, Base.SizeUnknown})
precompile(Tuple{typeof(Base.splice!), Array{Symbol, 1}, Int64, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:ordered_names,), Tuple{Array{Symbol, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#51#59"))}, Int64})
precompile(Tuple{typeof(DataFrames._describe), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##describe#45")), Function, typeof(DataAPI.describe), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.issubset), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Dict{Symbol, Any}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._collect), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}}})
precompile(Tuple{typeof(DataFrames.get_stats!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Int64, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("#50#51")){Array{Int64, 1}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Int64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Statistics, Symbol("##quantile#54")), Bool, typeof(Statistics.quantile), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(DataFrames.get_stats), Array{Int64, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.SkipMissing{Array{Union{Base.Missing, Int64}, 1}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Missing, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames.get_stats!), Base.Dict{Symbol, Any}, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{String, 1}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{String, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{String, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("#50#51")){Array{String, 1}}, Float64})
precompile(Tuple{getfield(Statistics, Symbol("##quantile#54")), Bool, typeof(Statistics.quantile), Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.mean), Array{String, 1}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##std")), NamedTuple{(:mean,), Tuple{Nothing}}, typeof(Statistics.std), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Union{}, 1}, Int64})
precompile(Tuple{typeof(DataFrames.get_stats), Array{String, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.add_sum), String, String})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{String, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Statistics._mean), Array{String, 1}, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##mean#4")), Function, typeof(Statistics.mean), Array{String, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.SkipMissing{Array{Union{Base.Missing, String}, 1}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dates.Date}})
precompile(Tuple{typeof(DataFrames.get_stats!), Base.Dict{Symbol, Any}, Array{Dates.Date, 1}, Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Dates.Date, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}, Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.Date, 1}, Int64, Array{Dates.Date, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Dates.Date, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Dates.Date, 1}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Dates.Date, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Dates.Date, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("#50#51")){Array{Dates.Date, 1}}, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Dates.Date, 1}, Dates.Date, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Dates.Date, 1}}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Dates.Date, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Statistics.mean), Array{Dates.Date, 1}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##std")), NamedTuple{(:mean,), Tuple{Nothing}}, typeof(Statistics.std), Array{Dates.Date, 1}})
precompile(Tuple{Type{Base.Dict{Dates.Date, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Dates.Date, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Dates.Date, Nothing}, Dates.Date})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Dates.Date, Nothing}, Nothing, Dates.Date})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Dates.Date, Nothing}, Dates.Date})
precompile(Tuple{typeof(Base.unique), Array{Dates.Date, 1}})
precompile(Tuple{typeof(DataFrames.get_stats), Array{Dates.Date, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.add_sum), Dates.Date, Dates.Date})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Dates.Date, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Statistics._mean), Array{Dates.Date, 1}, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##mean#4")), Function, typeof(Statistics.mean), Array{Dates.Date, 1}})
precompile(Tuple{typeof(DataFrames.get_stats!), Base.Dict{Symbol, Any}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.sort!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.partition!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("#50#51")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Float64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{getfield(Statistics, Symbol("##quantile#54")), Bool, typeof(Statistics.quantile), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.mean), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##std")), NamedTuple{(:mean,), Tuple{Nothing}}, typeof(Statistics.std), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Base.Missing})
precompile(Tuple{typeof(Base._collect), Type{Int64}, Base.Generator{Base.Iterators.Filter{getfield(CategoricalArrays, Symbol("#60#62")){Array{Int64, 1}}, Array{Int64, 1}}, getfield(CategoricalArrays, Symbol("#59#61")){CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(CategoricalArrays._unique), Type{Int64}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(DataFrames.get_stats), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Symbol, 1}})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.findfirst), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._all), getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.add_sum), CategoricalArrays.CategoricalValue{Int64, UInt32}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Statistics._mean), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##mean#4")), Function, typeof(Statistics.mean), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Int64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{Base.Dict{Symbol, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Float64}, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Float64, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, Float64}, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Nothing, Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Nothing, Float64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Base.Dict{Symbol, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, String, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Any, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Nothing}, Array{Base.Dict{Symbol, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int64}, 1}, Int64, Array{Nothing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Nothing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Nothing, Int64}, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Nothing, Int64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Nothing, Int64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Array{Base.Dict{Symbol, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataType, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.similar), Array{DataType, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.firstindex), Array{Type, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Int64, Array{DataType, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Type, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Type, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Type, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Dates.Date, Dates.Date})
precompile(Tuple{typeof(Base.:(==)), Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Type, 1}, Array{Type, 1}})
precompile(Tuple{typeof(DataAPI.describe), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##describe#44")), Function, typeof(DataAPI.describe), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:mean,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##std")), NamedTuple{(:mean,), Tuple{Float64}}, typeof(Statistics.std), Array{Int64, 1}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##var")), NamedTuple{(:corrected, :mean), Tuple{Bool, Nothing}}, typeof(Statistics.var), Array{String, 1}})
precompile(Tuple{typeof(Statistics._std), Array{String, 1}, Bool, Nothing, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##std#18")), Bool, Nothing, Function, typeof(Statistics.std), Array{String, 1}})
precompile(Tuple{typeof(Statistics._var), Array{String, 1}, Bool, Nothing, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##var#15")), Bool, Nothing, Function, typeof(Statistics.var), Array{String, 1}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##var")), NamedTuple{(:corrected, :mean), Tuple{Bool, Nothing}}, typeof(Statistics.var), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Statistics._std), Array{Dates.Date, 1}, Bool, Nothing, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##std#18")), Bool, Nothing, Function, typeof(Statistics.std), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Statistics._var), Array{Dates.Date, 1}, Bool, Nothing, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##var#15")), Bool, Nothing, Function, typeof(Statistics.var), Array{Dates.Date, 1}})
precompile(Tuple{getfield(Statistics, Symbol("#kw##var")), NamedTuple{(:corrected, :mean), Tuple{Bool, Nothing}}, typeof(Statistics.var), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Statistics._std), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Bool, Nothing, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##std#18")), Bool, Nothing, Function, typeof(Statistics.std), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Statistics._var), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Bool, Nothing, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("##var#15")), Bool, Nothing, Function, typeof(Statistics.var), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, getfield(DataFrames, Symbol("#53#61")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Union{Base.Missing, Int64}, 1}, String, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isequal), Float64, Int64})
precompile(Tuple{typeof(Base.isequal), Dates.Date, Dates.Date})
precompile(Tuple{typeof(Base.isequal), Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.isequal), Int64, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Type, 1}, Array{Type, 1}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Statistics.std)}}, Any, Any})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Base.Pair{Symbol, typeof(Statistics.std)}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Symbol, Base.Pair{Symbol, typeof(Statistics.std)}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base._collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#47#55")), Array{Any, 1}}, getfield(DataFrames, Symbol("#46#54"))}, Base.SizeUnknown})
precompile(Tuple{typeof(Base.findnext), getfield(DataFrames, Symbol("#48#56")), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._collect), Type{Base.Pair{A, B} where B where A}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#50#58")), Array{Any, 1}}, getfield(DataFrames, Symbol("#49#57"))}, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#51#59"))}})
precompile(Tuple{typeof(DataFrames._describe), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(DataAPI.describe), DataFrames.DataFrame, Symbol, Base.Pair{Symbol, typeof(Statistics.std)}})
precompile(Tuple{typeof(Base.push!), Array{Base.Pair{A, B} where B where A, 1}, Base.Pair{Symbol, typeof(Statistics.std)}})
precompile(Tuple{getfield(DataFrames, Symbol("#51#59")), Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#51#59"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#51#59"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#51#59")), Base.Pair{Symbol, typeof(Statistics.std)}})
precompile(Tuple{typeof(Statistics.std), Array{String, 1}})
precompile(Tuple{typeof(Statistics.std), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Statistics.std), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#53#61")){Symbol}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{String, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Any, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.mapreduce_empty), typeof(Base.identity), Function, Type{T} where T})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.add_sum), Type{T} where T})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.:(+)), Type{T} where T})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.SkipMissing{Array{Any, 1}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(DataFrames.get_stats!), Base.Dict{Symbol, Any}, Array{Any, 1}, Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.count), typeof(Base.ismissing), Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#52#60")){Array{Base.Pair{A, B} where B where A, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Any, 1}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Any, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Any, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("#50#51")){Array{Any, 1}}, Float64})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Statistics, Symbol("#50#51")){Array{Any, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Statistics, Symbol("##quantile#54")), Bool, typeof(Statistics.quantile), Array{Any, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Any, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Statistics._mean), Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(DataFrames.get_stats), Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.zero), Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Float64}, 1}, Tuple{Float64, Nothing, Nothing}})
precompile(Tuple{Type{NamedTuple{(:variable, :mean), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:variable, :mean), Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:variable, :mean), Tuple{Array{Symbol, 1}, Array{Union{Nothing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:cols,), T} where T<:Tuple}, Tuple{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##describe#44")), InvertedIndices.InvertedIndex{Int64}, typeof(DataAPI.describe), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataAPI, Symbol("#kw##describe")), NamedTuple{(:cols,), Tuple{InvertedIndices.InvertedIndex{Int64}}}, typeof(DataAPI.describe), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Statistics._var), Array{Any, 1}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(Statistics._std), Array{Any, 1}, Bool, Nothing, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("#kw##std")), NamedTuple{(:mean,), Tuple{Nothing}}, typeof(Statistics.std), Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Nothing, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Nothing, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{DataType, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{DataType, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.isequal), Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.isequal), Array{DataType, 1}, Array{DataType, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##describe#45")), InvertedIndices.InvertedIndex{Int64}, typeof(DataAPI.describe), DataFrames.DataFrame})
precompile(Tuple{getfield(DataAPI, Symbol("#kw##describe")), NamedTuple{(:cols,), Tuple{InvertedIndices.InvertedIndex{Int64}}}, typeof(DataAPI.describe), DataFrames.DataFrame})
precompile(Tuple{typeof(DataAPI.describe), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##describe#44")), Function, typeof(DataAPI.describe), DataFrames.DataFrame, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.symdiff!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, typeof(Base.push!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.symdiff!), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##append!#154")), Symbol, typeof(Base.append!), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.append!), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#43#47"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#43#47")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#44#48"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#44#48")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, String, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Int64, 1}, Array{String, 1}})
precompile(Tuple{getfield(TestDataFrame, Symbol("#45#49"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#45#49")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(TestDataFrame, Symbol("#46#50"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrame, Symbol("#46#50")), Base.CoreLogging.LogState})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.append!), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:B, :A), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:B, :A), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:B, :A), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.UnitRange{Int64}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Float64, 1}}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Base.UnitRange{Int64}}, Type{Symbol}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Dict{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Symbol, 1}, Type{Symbol}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, Base.Dict{Symbol, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.append!), DataFrames.DataFrame, Base.Dict{Symbol, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.append!), DataFrames.DataFrame, Base.Dict{Symbol, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{Symbol, Base.UnitRange{Int64}}, Vararg{Base.Pair{Symbol, B} where B, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 1}, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Symbol, Any}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Base.UnitRange{Int64}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Array{Float64, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Symbol, Any}, Symbol, Bool})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.KeySet{Symbol, OrderedCollections.OrderedDict{Symbol, Any}}, Type{Symbol}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{getfield(Base, Symbol("#kw##append!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.append!), DataFrames.DataFrame, OrderedCollections.OrderedDict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#153")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, Type{T} where T})
precompile(Tuple{typeof(Base.all), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#51#65")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#151")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, Int64}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, Nothing}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, Nothing}, Nothing, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, Nothing}, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, Nothing}, Nothing, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, Nothing}, Int64})
precompile(Tuple{typeof(Base.unique), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Array{Union{Base.Missing, Int64}, 1}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Union{Base.Missing, Int64}, 1}, Bool})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, V, C, U} where U where C where V}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, V, C, U} where U where C where V}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#52#66")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#151")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#53#67")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{typeof(DataFrames._columns), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.findfirst), Function, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#54#68")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#150")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#55#69")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#56#70")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#150")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#57#71")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#58#72")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#152")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#59#73")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#152")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Symbol, 1}}}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#60#74")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#61#75")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#152")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Symbol}}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Symbol}}})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#62#76")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#63#77")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#152")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{typeof(Base.findnext), getfield(TestDataFrame, Symbol("#64#78")), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{String, 1}, Array{Char, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Char, 1}, Array{Bool, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Bool, 1}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.UnitRange{Int64}, Array{String, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Bool, 1}}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Char, 1}}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{String, 1}}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, Tuple{Array{String, 1}, Array{Char, 1}, Array{Bool, 1}, Base.UnitRange{Int64}, Array{String, 1}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Char, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Bool, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Array{String, 1}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{String, 1}, Bool})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, V, C, U} where U where C where V}, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Char}})
precompile(Tuple{typeof(Base.vect), Type{CategoricalArrays.CategoricalString{UInt32}}, Vararg{DataType, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{DataType, 1}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{DataType, 1}, Array{DataType, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(<:)}, Base.Iterators.Zip{Tuple{Array{DataType, 1}, Array{DataType, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Base.Iterators.Zip{Tuple{Array{DataType, 1}, Array{DataType, 1}}}, getfield(Base, Symbol("#3#4")){typeof(<:)}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{DataType, 1}, Array{DataType, 1}}}, getfield(Base, Symbol("#3#4")){typeof(<:)}}})
precompile(Tuple{typeof(Base.all), Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#151")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(Base.unique), Array{Char, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Array{Char, 1}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Char, 1}, Bool})
precompile(Tuple{Type{Base.Dict{Char, UInt32}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Char, 1}, Array{Char, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Char, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}}, Array{Char, 1}, Base.Dict{Char, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Char, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Char, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Char, UInt32}, Char})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}, Char}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}, Char}, Base.Dict{Char, UInt32}, Char})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Base.IndexLinear, Array{Char, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Char, 1}, Int64, Array{Char, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Char, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Char, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Char, 1}})
precompile(Tuple{typeof(Base.allunique), Array{Char, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Char, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}}}, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#11#12")){Array{Char, 1}}, Char})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{Char, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.union!), Base.Set{Char}, Array{Char, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Char, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Char}, Array{Char, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Char}}, Array{Char, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}, Char}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}, Char}, Base.Dict{Char, UInt32}, Char})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, UInt32}, Char})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{Char, UInt32}, Array{Char, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Char, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, UInt32}, Int64, Char})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Char, 1, UInt32, V, C, U} where U where C where V}, Array{Char, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Char, 1, UInt32, V, C, U} where U where C where V}, Array{Char, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{Type{Base.Dict{Bool, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Bool, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Bool, Nothing}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Bool, Nothing}, Nothing, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Bool, Nothing}, Bool})
precompile(Tuple{typeof(Base.unique), Array{Bool, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Array{Bool, 1}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Bool, 1}, Bool})
precompile(Tuple{Type{Base.Dict{Bool, UInt32}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Bool, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Bool, 1}, Array{Bool, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Bool, UInt32, CategoricalArrays.CategoricalValue{Bool, UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Bool, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Bool, UInt32, CategoricalArrays.CategoricalValue{Bool, UInt32}}}, Array{Bool, 1}, Base.Dict{Bool, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Bool, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Bool, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Bool, UInt32}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Bool, UInt32, CategoricalArrays.CategoricalValue{Bool, UInt32}}, Bool}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Bool, UInt32, CategoricalArrays.CategoricalValue{Bool, UInt32}}, Bool}, Base.Dict{Bool, UInt32}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Bool, 1, UInt32, Bool, CategoricalArrays.CategoricalValue{Bool, UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Bool, 1, UInt32, Bool, CategoricalArrays.CategoricalValue{Bool, UInt32}, Union{}}, Base.IndexLinear, Array{Bool, 1}})
precompile(Tuple{typeof(Base.allunique), Array{Bool, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}, Bool}}, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#11#12")){Array{Bool, 1}}, Bool})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{Bool, 1}}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.union!), Base.Set{Bool}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Bool}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Bool}}, Array{Bool, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Bool, UInt32, CategoricalArrays.CategoricalValue{Bool, UInt32}}, Bool}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Bool, UInt32, CategoricalArrays.CategoricalValue{Bool, UInt32}}, Bool}, Base.Dict{Bool, UInt32}, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Bool, UInt32}, Bool})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{Bool, UInt32}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Bool, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Bool, UInt32}, Int64, Bool})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Bool, UInt32, CategoricalArrays.CategoricalValue{Bool, UInt32}}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Bool, 1, UInt32, V, C, U} where U where C where V}, Array{Bool, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Bool, 1, UInt32, V, C, U} where U where C where V}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.Sort.sort_int_range!), Array{Bool, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.sort!), Array{Bool, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Bool, 1}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Bool, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{getfield(Base.Sort, Symbol("##sort!#7")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt32, Bool, CategoricalArrays.CategoricalValue{Bool, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt32, Bool, CategoricalArrays.CategoricalValue{Bool, UInt32}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Array{Int64, 1}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Int64, 1}, Bool})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalValue{Char, UInt32}}})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Bool, 1, UInt32, Bool, CategoricalArrays.CategoricalValue{Bool, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalValue{Bool, UInt32}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{Type{NamedTuple{(:compress,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##categorical!")), NamedTuple{(:compress,), Tuple{Bool}}, typeof(DataFrames.categorical!), DataFrames.DataFrame})
precompile(Tuple{Type{Base.Dict{String, UInt8}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 1}, Array{String, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}}, Array{String, 1}, Base.Dict{String, UInt8}, Array{UInt8, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{String, 1, UInt8, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt8}, String})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}, String}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}, String}, Base.Dict{String, UInt8}, String})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}, String}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}, String}, Base.Dict{String, UInt8}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, UInt8}, String})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt8, 1}, Base.Dict{String, UInt8}, Array{String, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, UInt8}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt8}, Int64, String})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{String, UInt8, CategoricalArrays.CategoricalString{UInt8}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{String, 1, UInt8, V, C, U} where U where C where V}, Array{String, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{String, 1, UInt8, V, C, U} where U where C where V}, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalString{UInt8}}})
precompile(Tuple{typeof(Base.vect), Type{CategoricalArrays.CategoricalString{UInt8}}, Vararg{DataType, N} where N})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt32, Bool, CategoricalArrays.CategoricalValue{Bool, UInt32}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt32, Bool, CategoricalArrays.CategoricalValue{Bool, UInt32}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##categorical!")), NamedTuple{(:compress,), Tuple{Bool}}, typeof(DataFrames.categorical!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{Base.Dict{Char, UInt8}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Char, 1}, Array{Char, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Char, UInt8, CategoricalArrays.CategoricalValue{Char, UInt8}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Char, 1}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Char, UInt8, CategoricalArrays.CategoricalValue{Char, UInt8}}}, Array{Char, 1}, Base.Dict{Char, UInt8}, Array{UInt8, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Char, 1, UInt8, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Char, UInt8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Char, UInt8}, Char})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Char, UInt8, CategoricalArrays.CategoricalValue{Char, UInt8}}, Char}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Char, UInt8, CategoricalArrays.CategoricalValue{Char, UInt8}}, Char}, Base.Dict{Char, UInt8}, Char})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Char, 1, UInt8, Char, CategoricalArrays.CategoricalValue{Char, UInt8}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Char, 1, UInt8, Char, CategoricalArrays.CategoricalValue{Char, UInt8}, Union{}}, Base.IndexLinear, Array{Char, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Char, UInt8, CategoricalArrays.CategoricalValue{Char, UInt8}}, Char}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Char, UInt8, CategoricalArrays.CategoricalValue{Char, UInt8}}, Char}, Base.Dict{Char, UInt8}, Char})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, UInt8}, Char})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt8, 1}, Base.Dict{Char, UInt8}, Array{Char, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Char, UInt8}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, UInt8}, Int64, Char})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Char, UInt8, CategoricalArrays.CategoricalValue{Char, UInt8}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Char, 1, UInt8, V, C, U} where U where C where V}, Array{Char, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Char, 1, UInt8, V, C, U} where U where C where V}, Array{Char, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt8, Char, CategoricalArrays.CategoricalValue{Char, UInt8}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt8, Char, CategoricalArrays.CategoricalValue{Char, UInt8}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{Base.Dict{Bool, UInt8}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Bool, 1}, Array{Bool, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Bool, UInt8, CategoricalArrays.CategoricalValue{Bool, UInt8}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Bool, 1}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Bool, UInt8, CategoricalArrays.CategoricalValue{Bool, UInt8}}}, Array{Bool, 1}, Base.Dict{Bool, UInt8}, Array{UInt8, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Bool, 1, UInt8, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Bool, UInt8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Bool, UInt8}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Bool, UInt8, CategoricalArrays.CategoricalValue{Bool, UInt8}}, Bool}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Bool, UInt8, CategoricalArrays.CategoricalValue{Bool, UInt8}}, Bool}, Base.Dict{Bool, UInt8}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Bool, 1, UInt8, Bool, CategoricalArrays.CategoricalValue{Bool, UInt8}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Bool, 1, UInt8, Bool, CategoricalArrays.CategoricalValue{Bool, UInt8}, Union{}}, Base.IndexLinear, Array{Bool, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Bool, UInt8, CategoricalArrays.CategoricalValue{Bool, UInt8}}, Bool}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Bool, UInt8, CategoricalArrays.CategoricalValue{Bool, UInt8}}, Bool}, Base.Dict{Bool, UInt8}, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Bool, UInt8}, Bool})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt8, 1}, Base.Dict{Bool, UInt8}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Bool, UInt8}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Bool, UInt8}, Int64, Bool})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Bool, UInt8, CategoricalArrays.CategoricalValue{Bool, UInt8}}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Bool, 1, UInt8, V, C, U} where U where C where V}, Array{Bool, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Bool, 1, UInt8, V, C, U} where U where C where V}, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt8, Bool, CategoricalArrays.CategoricalValue{Bool, UInt8}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt8, Bool, CategoricalArrays.CategoricalValue{Bool, UInt8}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{Base.Dict{Int64, UInt8}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 1}, Array{Int64, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Int64, UInt8, CategoricalArrays.CategoricalValue{Int64, UInt8}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Int64, UInt8, CategoricalArrays.CategoricalValue{Int64, UInt8}}}, Array{Int64, 1}, Base.Dict{Int64, UInt8}, Array{UInt8, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt8, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, UInt8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, UInt8}, Int64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Int64, UInt8, CategoricalArrays.CategoricalValue{Int64, UInt8}}, Int64}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Int64, UInt8, CategoricalArrays.CategoricalValue{Int64, UInt8}}, Int64}, Base.Dict{Int64, UInt8}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Int64, 1, UInt8, Int64, CategoricalArrays.CategoricalValue{Int64, UInt8}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt8, Int64, CategoricalArrays.CategoricalValue{Int64, UInt8}, Union{}}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Int64, UInt8, CategoricalArrays.CategoricalValue{Int64, UInt8}}, Int64}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Int64, UInt8, CategoricalArrays.CategoricalValue{Int64, UInt8}}, Int64}, Base.Dict{Int64, UInt8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, UInt8}, Int64})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt8, 1}, Base.Dict{Int64, UInt8}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Int64, UInt8}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt8}, Int64, Int64})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Int64, UInt8, CategoricalArrays.CategoricalValue{Int64, UInt8}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt8, V, C, U} where U where C where V}, Array{Int64, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt8, V, C, U} where U where C where V}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt8, Int64, CategoricalArrays.CategoricalValue{Int64, UInt8}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt8, Int64, CategoricalArrays.CategoricalValue{Int64, UInt8}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Char, 1, UInt8, Char, CategoricalArrays.CategoricalValue{Char, UInt8}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalValue{Char, UInt8}}})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Bool, 1, UInt8, Bool, CategoricalArrays.CategoricalValue{Bool, UInt8}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalValue{Bool, UInt8}}})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Int64, 1, UInt8, Int64, CategoricalArrays.CategoricalValue{Int64, UInt8}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalValue{Int64, UInt8}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#152")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##categorical!")), NamedTuple{(:compress,), Tuple{Bool}}, typeof(DataFrames.categorical!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt8, Char, CategoricalArrays.CategoricalValue{Char, UInt8}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Char, 1, UInt8, Char, CategoricalArrays.CategoricalValue{Char, UInt8}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt8, Bool, CategoricalArrays.CategoricalValue{Bool, UInt8}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Bool, 1, UInt8, Bool, CategoricalArrays.CategoricalValue{Bool, UInt8}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt8, Int64, CategoricalArrays.CategoricalValue{Int64, UInt8}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Int64, 1, UInt8, Int64, CategoricalArrays.CategoricalValue{Int64, UInt8}, Union{}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, Type{T} where T})
precompile(Tuple{typeof(Base.vect), Type{String}, Vararg{DataType, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, Base.Missing}})
precompile(Tuple{typeof(Base.vect), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Union{Base.Missing, String}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, String}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, String}, 1}, 1}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, String}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, Nothing}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, Nothing}, Nothing, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, Nothing}, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, Nothing}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, Nothing}, Nothing, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, Nothing}, String})
precompile(Tuple{typeof(Base.unique), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Array{Union{Base.Missing, String}, 1}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Union{Base.Missing, String}, 1}, Bool})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, V, C, U} where U where C where V}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, typeof(Base.:(!)), Int64})
precompile(Tuple{Type{NamedTuple{(:x1,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:x1,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.OrdinalRange{T, Int64} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.vcat), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{Base.Pair{Symbol, Symbol}, 1}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.rename!), Function, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.rename), Function, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#79#83"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#79#83"))}}})
precompile(Tuple{typeof(DataFrames.rename!), getfield(TestDataFrame, Symbol("#79#83")), DataFrames.Index})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#80#84"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#80#84"))}}})
precompile(Tuple{typeof(DataFrames.rename!), getfield(TestDataFrame, Symbol("#80#84")), DataFrames.Index})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{Symbol, Symbol}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#81#85"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#81#85"))}}})
precompile(Tuple{typeof(DataFrames.rename!), getfield(TestDataFrame, Symbol("#81#85")), DataFrames.Index})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#82#86"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#5#6")){getfield(TestDataFrame, Symbol("#82#86"))}}})
precompile(Tuple{typeof(DataFrames.rename!), getfield(TestDataFrame, Symbol("#82#86")), DataFrames.Index})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{Symbol, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{Symbol, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{Symbol, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :z), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :z), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Symbol})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, Symbol}, Vararg{Base.Pair{String, Symbol}, N} where N})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{Type{Base.Dict{String, Symbol}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Symbol}, Symbol, String})
precompile(Tuple{Type{Base.Dict{String, Symbol}}, Array{Base.Pair{String, Symbol}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{String, Symbol}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, String}}, Array{Base.Pair{Symbol, String}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{Symbol, String}, 1}})
precompile(Tuple{Type{Base.Dict{String, String}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##rename!#37")), Bool, typeof(DataFrames.rename!), DataFrames.DataFrame, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Base.Pair{String, Symbol}, 1}, getfield(DataFrames, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{String, Symbol}, 1}, getfield(DataFrames, Symbol("#38#39"))}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{Base.Pair{String, Symbol}, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{String, Symbol}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Base.Pair{Symbol, String}, 1}, getfield(DataFrames, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{Symbol, String}, 1}, getfield(DataFrames, Symbol("#38#39"))}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{Base.Pair{Symbol, String}, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{Symbol, String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Array{Base.Pair{String, String}, 1}, getfield(DataFrames, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{String, String}, 1}, getfield(DataFrames, Symbol("#38#39"))}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Base.Dict{String, Symbol}, getfield(DataFrames, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{String, Symbol}, getfield(DataFrames, Symbol("#38#39"))}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Dict{String, Symbol}})
precompile(Tuple{typeof(Base.eltype), Base.Dict{String, Symbol}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Dict{String, Symbol}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Base.Dict{Symbol, String}, getfield(DataFrames, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Symbol, String}, getfield(DataFrames, Symbol("#38#39"))}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.eltype), Base.Dict{Symbol, String}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Symbol}, 1}, Base.Generator{Base.Dict{String, String}, getfield(DataFrames, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{String, String}, getfield(DataFrames, Symbol("#38#39"))}})
precompile(Tuple{typeof(DataFrames.rename), DataFrames.DataFrame, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.eltype), Base.Dict{String, String}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.eltype), Base.Dict{Symbol, Symbol}})
precompile(Tuple{getfield(Test, Symbol("#@inferred")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Test._inferred), Expr, Module, Expr})
precompile(Tuple{typeof(Test._inferred), Expr, Module})
precompile(Tuple{typeof(Base.any), Function, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#26#28")), Array{Any, 1}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Test, Symbol("#27#29")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(Test, Symbol("#27#29")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Test, Symbol("#27#29"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Test, Symbol("#27#29"))}})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Symbol, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, String, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Char, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.setindex_shape_check), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.show_block), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_call), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Symbol, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.ndims), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.ndims), Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.typesof), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.return_types), Any, Any})
precompile(Tuple{typeof(Base.may_invoke_generator), Method, Any, Core.SimpleVector})
precompile(Tuple{typeof(Base.func_for_method_checked), Method, Any, Core.SimpleVector})
precompile(Tuple{typeof(Base.first), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#184#185")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.last), DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.last), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.vect), Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Missings.allowmissing), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Base.Missing, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.Missing, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Int64})
precompile(Tuple{Type{NamedTuple{(:error,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Union{Base.Missing, Int64}, 1}, Base.Colon})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{typeof(Base.iterate), Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.iterate), Array{Bool, 1}, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(-)), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.big), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRange{Char, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.StepRange{Char, Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Base.StepRange{Char, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{Type{Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{typeof(Missings.allowmissing), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, String}, 1}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Base.indexin), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Missings.allowmissing), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.findfirst), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, String}, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base._all), getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}, Int64}, Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.all), Function, Array{DataType, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{DataType, 1}})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#87#89")), Array{DataType, 1}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Missing, Int64})
precompile(Tuple{typeof(DataFrames.disallowmissing!), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, Int64})
precompile(Tuple{typeof(Missings.disallowmissing), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, Int64})
precompile(Tuple{typeof(Missings.disallowmissing), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{Type{Test.Threw}, Base.MissingException, Nothing, LineNumberNode})
precompile(Tuple{typeof(Missings.disallowmissing), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.any), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Colon})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, String, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, String, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, String, Int64})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{String, 1}, Vararg{Array{String, 1}, N} where N})
precompile(Tuple{typeof(Base.findfirst), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._all), getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{String, 1}, Array{String, 1}}, Int64}, Tuple{Array{String, 1}, Array{String, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._all), getfield(TestDataFrame, Symbol("#88#90")), Array{DataType, 1}, Base.Colon})
precompile(Tuple{Type{NamedTuple{(:b, :c, :d), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:b, :c, :d), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :c, :d), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:x, :y, :z), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :z), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.eltype), Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.any), Function, Array{Base.Missing, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Base.Missing, 1}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##disallowmissing!")), NamedTuple{(:error,), Tuple{Bool}}, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :z), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :z), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vect), DataFrames.DataFrame, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.AbstractDataFrame, 1}, Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.AbstractDataFrame, 1}})
precompile(Tuple{typeof(Base.union!), Base.Set{Int64}, Base.OneTo{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.vect), Type{Int64}, Vararg{Type{Int64}, N} where N})
precompile(Tuple{typeof(Base.vect), Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Function, Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Symbol, 1}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, Array{Bool, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Bool, 1}, Base.Regex, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Bool, 1}}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Symbol, 1}}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Colon}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.Colon, Array{Symbol, 1}, Array{Int64, 1}, Array{Bool, 1}, Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.promote_typeof), Symbol, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Regex, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Symbol, Int64, Array{Symbol, 1}, Array{Int64, 1}, Array{Bool, 1}, Base.Regex, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Type, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{DataType, Union, DataType}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{Union}})
precompile(Tuple{typeof(Base.setindex!), Array{Union, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Array{Union, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{Union, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{Union, Union, DataType}})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Symbol, 1}, Array{Bool, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Regex, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Bool, 1}, Base.Regex, InvertedIndices.InvertedIndex{Base.Colon}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.AbstractDataFrame, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Missings.disallowmissing), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Missings.disallowmissing), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.copy), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Int64}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.copy), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.any), Function, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Colon})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Base.Missing, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Base.Missing, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Base.Missing, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Missings.disallowmissing), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.convert), Type{Union{}}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Array{Union{}, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, Array{Base.Missing, 1}})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Missings, Symbol("#kw##disallowmissing")), NamedTuple{(:error,), Tuple{Bool}}, typeof(Missings.disallowmissing), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :z), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :z), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame})
precompile(Tuple{typeof(Missings.allowmissing), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Array{Union, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{Union, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Array{Union, 1}, Array{Union, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{Union, DataType, DataType}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{DataType}, Type{Union}})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{Union, DataType, Union}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Missings.allowmissing), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}, Base.IndexLinear, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Missings.allowmissing), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :z), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :z), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#98")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Type{T} where T})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), String, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Type{T} where T})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.push!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.isequal), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#98")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Type{T} where T})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{String, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.unique), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.IndexLinear, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, V, C, U} where U where C where V}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, V, C, U} where U where C where V}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.unique), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.IndexLinear, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, V, C, U} where U where C where V}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, V, C, U} where U where C where V}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.isequal), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Type{T} where T})
precompile(Tuple{typeof(Base.copy), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, String}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.copy), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.unique), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#64")), Bool, typeof(CategoricalArrays.categorical), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.IndexLinear, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Base.Colon}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, V, C, U} where U where C where V}, Array{Float64, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d), T} where T<:Tuple}, Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Float64, 1}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Float64, 1}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d), Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Float64, 1}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :d), Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Float64, 1}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.similar), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.eltype), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalValue{Float64, UInt32}}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.OrdinalRange{T, Int64} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.UnitRange{Int64}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Base.StepRange{Char, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.StepRange{Char, Int64}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestDataFrame, Symbol("#91#92")){DataFrames.DataFrame}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.UnitRange{Int64}, getfield(TestDataFrame, Symbol("#91#92")){DataFrames.DataFrame}}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.UnitRange{Int64}, getfield(TestDataFrame, Symbol("#91#92")){DataFrames.DataFrame}}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :copycols), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Bool, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Bool, Base.Regex})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Type{Bool}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Array{Bool, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Random._rand_max383!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.CloseOpen01{Float64}})
precompile(Tuple{typeof(Random.DSFMT.dsfmt_fill_array_close_open!), Random.DSFMT.DSFMT_state, Ptr{Float64}, Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.SamplerTrivial{Random.CloseOpen01{Float64}, Float64}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.rand), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.UnitRange{Int64}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Base.UnitRange{Int64}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Base.UnitRange{Int64}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.unalias), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#272#273")){Int64}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Array{Symbol, 1}, 1}, Base.Set{Array{Symbol, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}, DataFrames.DataFrame, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.deepcopy), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Base.BitArray{1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{Int64, 1}, DataFrames.DataFrame, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy_to_bitarray_chunks!), Array{UInt64, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{Int64, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Float64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Float64})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Float64, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Float64, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.push!), Array{Union{}, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.first), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:b, :c, :a), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:b, :c, :a), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :c, :a), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:c, :a, :b), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:c, :a, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:c, :a, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :c, :b), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :c, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :c, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:b, :a, :c), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:b, :a, :c), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :a, :c), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:c, :b, :a), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:c, :b, :a), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:c, :b, :a), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.vcat), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :copycols), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Float64, 1}, Bool}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Float64, 1}, Bool}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Float64, 1}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Float64, 1}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.parent), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.parentindices), DataFrames.DataFrame})
precompile(Tuple{Type{Base.OneTo{T} where T<:Integer}, Int64})
precompile(Tuple{typeof(Base.axes), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.axes), DataFrames.DataFrame, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b, :copycols), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(DataFrames.completecases), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing!#148")), Bool, typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing#62")), Bool, typeof(DataFrames.dropmissing), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.dropmissing), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##dropmissing!#63")), Bool, typeof(DataFrames.dropmissing!), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.dropmissing!), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Missings.disallowmissing), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##disallowmissing#96")), Bool, typeof(Missings.disallowmissing), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Missings.disallowmissing), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Missings.allowmissing), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical#97")), Bool, typeof(CategoricalArrays.categorical), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}, Tuple{Tuple{Int64, Nothing}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unalias), Base.BitArray{1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Int64, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Int64, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{Int64, 1}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.Colon, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 2} where T}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.eltype)}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Type{T} where T})
precompile(Tuple{typeof(Base.reduce_first), Function, Type{T} where T})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.eltype)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy_to_bitarray_chunks!), Array{UInt64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 2}, Base.IndexLinear, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Base.Colon, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Base.Colon, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, InvertedIndices.InvertedIndex{Int64}, Int64})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copymutable), InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 1}, Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{Int64, 1}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}, Tuple{Nothing, Nothing}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, InvertedIndices.InvertedIndex{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, InvertedIndices.InvertedIndexIterator{Int64, Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(DataFrames.allowmissing!), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(DataFrames.disallowmissing!), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#151")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, DataAPI.All{Tuple{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##categorical!#152")), Bool, typeof(DataFrames.categorical!), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.categorical!), DataFrames.DataFrame, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##categorical#65")), Bool, typeof(CategoricalArrays.categorical), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Bool})
precompile(Tuple{typeof(CategoricalArrays.categorical), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Bool})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Colon, DataAPI.Between{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), DataAPI.All{Tuple{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, Base.Colon, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{Int64, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, Base.Colon, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, Base.UnitRange{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, Base.UnitRange{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, Base.Colon, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, Base.Colon, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, InvertedIndices.InvertedIndex{Int64}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, InvertedIndices.InvertedIndex{Int64}, DataAPI.Between{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Symbol, Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##select#133")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Symbol, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}}, Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}}})
precompile(Tuple{typeof(Base.union), Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Int64, 1}, Tuple{Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Int64}}, typeof(Base.push!), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Symbol, Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Val{4}}})
precompile(Tuple{getfield(Base, Symbol("##s66#129")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Symbol, Symbol, Symbol, Symbol}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.union), Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.union!), Array{Int64, 1}, Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base._grow!), Function, Array{Int64, 1}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Symbol, DataAPI.Between{Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##select#133")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Symbol, DataAPI.Between{Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}}, Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}}})
precompile(Tuple{typeof(Base.union), Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Int64, 1}, Tuple{Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol, Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##select#165")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol, Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.All{Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.All{Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.All{Tuple{Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.All{Tuple{Symbol, Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol, DataAPI.Between{Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##select#165")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol, DataAPI.Between{Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.All{Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataAPI.All{Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Symbol, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, Symbol, DataAPI.All{Tuple{}}}}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Symbol, DataAPI.Between{Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, DataAPI.All{Tuple{Symbol, DataAPI.Between{Symbol, Symbol}, DataAPI.All{Tuple{}}}}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#19#20")){Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{DataFrames.Index}, Tuple{InvertedIndices.InvertedIndex{Array{Symbol, 1}}, DataAPI.All{Tuple{}}}}}}, Int64})
precompile(Tuple{typeof(Base.union!), Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.union), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.union), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, DataAPI.All{Tuple{InvertedIndices.InvertedIndex{Array{Symbol, 1}}, DataAPI.All{Tuple{}}}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}, DataAPI.All{Tuple{}}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Int64, 1}, Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{Symbol, Int64}, Vararg{Base.Pair{Symbol, Int64}, N} where N})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Symbol, Int64}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Symbol, Int64}, Int64, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Symbol, Int64}, Int64, Symbol})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Symbol, Int64}}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Symbol, Int64}, Symbol, Bool})
precompile(Tuple{typeof(Base._any), getfield(DataFrames, Symbol("#156#157")), Base.Iterators.Zip{Tuple{Base.KeySet{Symbol, OrderedCollections.OrderedDict{Symbol, Int64}}, Array{Symbol, 1}}}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, OrderedCollections.OrderedDict{Symbol, Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, OrderedCollections.OrderedDict{Symbol, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :d), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :c, :b), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :c, :b), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :c, :b), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d), Tuple{Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :d), Tuple{Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Int64}, Vararg{Base.Pair{Symbol, Int64}, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b, :d), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b, :d), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :c, :b), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :c, :b), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.rethrow), ArgumentError})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c, :d), Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c, :d), Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Symbol, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :d), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :d), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.CoreLogging.global_logger), Base.CoreLogging.NullLogger})
precompile(Tuple{typeof(Base.push!), Array{Union{Base.Missing, Int64}, 1}, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.resize!), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:y, :x), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:z, :y, :x), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:y, :x), Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:y, :x), Tuple{Int64, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:z, :y, :x), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:z, :y, :x), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:z, :x), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:z, :p, :x), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:z, :x), Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:z, :x), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.rethrow), ErrorException})
precompile(Tuple{Type{Test.Threw}, ErrorException, Nothing, LineNumberNode})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#155")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:z, :p, :x), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, NamedTuple{(:z, :p, :x), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{Test.Threw}, Base.KeyError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, V, C, U} where U where C where V}, Array{String, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, N, R, V, C, U} where U where C where V where R<:Integer where N}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:Fish, :Key, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Fish, :Key, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Fish, :Key, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#55#57")){Array{String, 1}}, String})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#55#57")){Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{String, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{String, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{String, 1}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{UInt32, 1, Array{UInt32, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{UInt32, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.something), Tuple{Base.Broadcast.Extruded{Array{Union{Nothing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##levels!#54")), Bool, typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#327")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#324")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#321")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{typeof(CategoricalArrays.categorical), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._collect), Type{Union{Base.Missing, String}}, Base.Generator{Base.Iterators.Filter{getfield(CategoricalArrays, Symbol("#60#62")){Array{Int64, 1}}, Array{Int64, 1}}, getfield(CategoricalArrays, Symbol("#59#61")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(CategoricalArrays._unique), Type{Union{Base.Missing, String}}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(CategoricalArrays.droplevels!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#247#248")){Base.Set{String}}, Array{String, 1}})
precompile(Tuple{typeof(Base._shrink!), Function, Array{String, 1}, Tuple{Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Union{Base.Missing, String}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#58#59")){getfield(Base, Symbol("#247#248")){Base.Set{Union{Base.Missing, String}}}}, typeof(Base.delete!), Base.Set{String}, Base.Set{String}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{String}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, String}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Union{Base.Missing, String}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Union{Base.Missing, String}, 1}, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{UInt32, 1}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Function})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, String}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(DataAPI.levels), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#325")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#326")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#330")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, String}}, String, String})
precompile(Tuple{Type{NamedTuple{(:Fish, :Color, :Mass), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, String}, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Fish, :Color, :Mass), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Fish, :Color, :Mass), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalString{UInt32}, String})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalString{UInt32}, String})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, String}, 1}, Base.Missing, Int64})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#1#7"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#1#7"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#1#7"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#1#7"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#1#7")), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#1#7")), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#1#7")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#1#7")), Tuple{Array{String, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#2#8"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#2#8"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#2#8"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#2#8"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#2#8"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#2#8"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#2#8")), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#2#8")), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#2#8")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#2#8")), Tuple{Array{String, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:Fish, :_COLOR_, :_MASS_), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, String}, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Fish, :_COLOR_, :_MASS_), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Fish, :_COLOR_, :_MASS_), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:Fish, :Key, :Value), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Fish, :Key, :Value), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Fish, :Key, :Value), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, Base.Missing})
precompile(Tuple{typeof(Base._collect), Type{String}, Base.Generator{Base.Iterators.Filter{getfield(CategoricalArrays, Symbol("#60#62")){Array{Int64, 1}}, Array{Int64, 1}}, getfield(CategoricalArrays, Symbol("#59#61")){CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(CategoricalArrays._unique), Type{String}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##levels!#54")), Bool, typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{String, 1}})
precompile(Tuple{typeof(CategoricalArrays.droplevels!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base._shrink!), Function, Array{String, 1}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#58#59")){getfield(Base, Symbol("#247#248")){Base.Set{String}}}, typeof(Base.delete!), Base.Set{String}, Base.Set{String}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, String}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{String, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{String, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Function})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:Fish, :Color, :Mass), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Fish, :Color, :Mass), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Fish, :Color, :Mass), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, String}, 1}, Array{String, 1}})
precompile(Tuple{typeof(Missings.allowmissing), Array{String, 1}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Function})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#3#9"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#3#9"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#3#9"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#3#9"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#3#9")), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#3#9")), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#3#9")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#3#9")), Tuple{Array{String, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#4#10"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#4#10"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#4#10"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#4#10"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#4#10"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#4#10"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#4#10")), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#4#10")), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#4#10")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#4#10")), Tuple{Array{String, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:Fish, :_COLOR_, :_MASS_), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Fish, :_COLOR_, :_MASS_), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Fish, :_COLOR_, :_MASS_), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Int64, 1}, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#327")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Int64, 1}, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#329")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Base.Regex, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#327")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Base.Regex, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#328")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Base.Regex, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Base.Regex, Int64, Int64})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#327")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Symbol, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#318#319"))}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#318#319"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#341#342")){DataFrames.DataFrame, Int64}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#341#342")){DataFrames.DataFrame, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_stackview#340")), Symbol, Symbol, typeof(DataFrames._stackview), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}})
precompile(Tuple{typeof(Base._repeat), Array{Symbol, 1}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#309")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#318#319")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.view), Array{Symbol, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Array{Int64, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{DataType}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:id, :a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.repeat), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Union{Base.Missing, Int64}, 1}}, Array{Int64, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, Array{Int64, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._collect), Type{Union{Base.Missing, Int64}}, Base.Generator{Base.Iterators.Filter{getfield(CategoricalArrays, Symbol("#60#62")){Array{Int64, 1}}, Array{Int64, 1}}, getfield(CategoricalArrays, Symbol("#59#61")){CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(CategoricalArrays._unique), Type{Union{Base.Missing, Int64}}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#55#57")){Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#55#57")){Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Int64, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{Int64, 1}}}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##levels!#54")), Bool, typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.droplevels!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#247#248")){Base.Set{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._shrink!), Function, Array{Int64, 1}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Union{Base.Missing, Int64}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#58#59")){getfield(Base, Symbol("#247#248")){Base.Set{Union{Base.Missing, Int64}}}}, typeof(Base.delete!), Base.Set{Int64}, Base.Set{Int64}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Int64}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, UInt32}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Symbol, 1}, Array{Symbol, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(CategoricalArrays.buildvalues!), CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Array{UInt32, 1}}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}, Array{Symbol, 1}, Base.Dict{Symbol, UInt32}, Array{UInt32, 1}, Bool})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, UInt32}, Symbol})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Symbol}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#7#8")){CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Symbol}, Base.Dict{Symbol, UInt32}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Base.IndexLinear, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#11#12")){Array{Symbol, 1}}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#11#12")){Array{Symbol, 1}}, Array{Symbol, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Symbol}})
precompile(Tuple{typeof(Base.get!), getfield(CategoricalArrays, Symbol("#9#10")){CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Symbol}, Base.Dict{Symbol, UInt32}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, UInt32}, Symbol})
precompile(Tuple{typeof(CategoricalArrays.buildorder!), Array{UInt32, 1}, Base.Dict{Symbol, UInt32}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, UInt32}, Int64, Symbol})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, V, C, U} where U where C where V}, Array{Symbol, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Base.Missing})
precompile(Tuple{typeof(Base._collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{getfield(CategoricalArrays, Symbol("#60#62")){Array{Int64, 1}}, Array{Int64, 1}}, getfield(CategoricalArrays, Symbol("#59#61")){CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(CategoricalArrays._unique), Type{Symbol}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#55#57")){Array{Symbol, 1}}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#55#57")){Array{Symbol, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Symbol, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{Symbol, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.indexin), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##levels!#54")), Bool, typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Symbol, 1}})
precompile(Tuple{typeof(CategoricalArrays.droplevels!), CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#247#248")){Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._shrink!), Function, Array{Symbol, 1}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Int64, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Function})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Symbol, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Symbol, 1}}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{Type{NamedTuple{(:inner,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base._repeat_inner_outer), Array{Int64, 1}, Array{Int64, 1}, Nothing})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner,), Tuple{Array{Int64, 1}}}, typeof(Base.repeat), Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:id, :a, :b, :c, :d), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :a, :b, :c, :d), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :a, :b, :c, :d), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :a, :b, :c, :d), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#318#319")), Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#331#334")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#331#334")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#331#334")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Float64, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Base.Missing, Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, Float64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#5#11"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#5#11"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#5#11"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#5#11")), Tuple{Array{Symbol, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#5#11")), Tuple{Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#5#11")), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#5#11")), Tuple{Array{Symbol, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#6#12"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#6#12"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Base.Regex, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#6#12"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Base.Regex, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#6#12"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#6#12")), Tuple{Array{Symbol, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#6#12")), Tuple{Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#6#12")), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#6#12")), Tuple{Array{Symbol, 1}}}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner,), Tuple{Int64}}, typeof(Base.repeat), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.repeat), Base.StepRange{Char, Int64}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, Array{Char, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Char, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Tuple{Array{Int64, 1}, Array{Char, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Int64, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##levels!#54")), Bool, typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.droplevels!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base._shrink!), Function, Array{Int64, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#58#59")){getfield(Base, Symbol("#247#248")){Base.Set{Int64}}}, typeof(Base.delete!), Base.Set{Int64}, Base.Set{Int64}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Char, 1}})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Base.Missing})
precompile(Tuple{typeof(Base._collect), Type{Char}, Base.Generator{Base.Iterators.Filter{getfield(CategoricalArrays, Symbol("#60#62")){Array{Int64, 1}}, Array{Int64, 1}}, getfield(CategoricalArrays, Symbol("#59#61")){CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}}}, Base.SizeUnknown})
precompile(Tuple{typeof(CategoricalArrays._unique), Type{Char}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#55#57")){Array{Char, 1}}, Char})
precompile(Tuple{typeof(Base.filter), getfield(CategoricalArrays, Symbol("#55#57")){Array{Char, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Char, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{Char, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Char, 1}, getfield(CategoricalArrays, Symbol("#56#58")){Array{Char, 1}}}})
precompile(Tuple{Type{Base.Dict{Char, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Char, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Char, Int64}, Char})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Char, Int64}, Char})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Int64}, Char})
precompile(Tuple{typeof(Base.indexin), Array{Char, 1}, Array{Char, 1}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##levels!#54")), Bool, typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Array{Char, 1}})
precompile(Tuple{typeof(CategoricalArrays.droplevels!), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Char}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#247#248")){Base.Set{Char}}, Array{Char, 1}})
precompile(Tuple{typeof(Base._shrink!), Function, Array{Char, 1}, Tuple{Array{Char, 1}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#58#59")){getfield(Base, Symbol("#247#248")){Base.Set{Char}}}, typeof(Base.delete!), Base.Set{Char}, Base.Set{Char}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Char}, Array{Char, 1}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Function})
precompile(Tuple{typeof(Base.similar), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Char, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Char, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Char, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Char, 1}}}}}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{AbstractArray{T, 1} where T, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{AbstractArray{T, 1} where T, 1}, Base.RefValue{Type{Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(isa), Tuple{Array{AbstractArray{T, 1} where T, 1}, Base.RefValue{Type{Array{Union{Base.Missing, Int64}, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(isa), Tuple{Base.Broadcast.Extruded{Array{AbstractArray{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Type{Array{Union{Base.Missing, Int64}, 1}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(isa), Tuple{Array{AbstractArray{T, 1} where T, 1}, Base.RefValue{Type{Array{Union{Base.Missing, Int64}, 1}}}}}})
precompile(Tuple{typeof(CategoricalArrays.categorical), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Type{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T}})
precompile(Tuple{typeof(Base.copyto!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Char, UInt32}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Char, UInt32}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalPool{Char, UInt32, CategoricalArrays.CategoricalValue{Char, UInt32}}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(CategoricalArrays.categorical), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(CategoricalArrays.categorical), CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.fill!), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Char, 1, UInt32, Char, CategoricalArrays.CategoricalValue{Char, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Function})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{AbstractArray{T, 1} where T, 1}, Base.RefValue{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(isa), Tuple{Array{AbstractArray{T, 1} where T, 1}, Base.RefValue{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(isa), Tuple{Base.Broadcast.Extruded{Array{AbstractArray{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(isa), Tuple{Array{AbstractArray{T, 1} where T, 1}, Base.RefValue{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}}}}})
precompile(Tuple{getfield(Test, Symbol("#@test_nowarn")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Test, Symbol("#@test_warn")), LineNumberNode, Module, Any, Any})
precompile(Tuple{Type{NamedTuple{(:id, :id2, :variable, :value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :id2, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :id2, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :id2, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.occursin), Tuple{Symbol, String}, Test.LogRecord})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Tuple{Symbol, String}}, Array{Test.LogRecord, 1}}}, getfield(Test, Symbol("#47#50"))}, Base.Colon})
precompile(Tuple{typeof(Test.match_logs), Function, Tuple{Symbol, String}})
precompile(Tuple{getfield(TestReshape, Symbol("#13#22"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#13#22")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Function})
precompile(Tuple{typeof(Base.print_to_string), CategoricalArrays.CategoricalValue{Int64, UInt32}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, String}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Test, Symbol("#53#54")), Base.Iterators.Zip{Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, String}}}})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, String}}}, getfield(Test, Symbol("#53#54"))}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Base.CoreLogging.LogLevel, String}, Tuple{Symbol, String}}}, getfield(Test, Symbol("#53#54"))}})
precompile(Tuple{getfield(TestReshape, Symbol("#14#23"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#14#23")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Int64, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#333#336")){DataFrames.DataFrame, Int64}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#333#336")){DataFrames.DataFrame, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#333#336")){DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.string), Tuple{Int64, Int64}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print_to_string), Tuple{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(TestReshape, Symbol("#15#24"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#15#24")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64}})
precompile(Tuple{Type{NamedTuple{(:id, :a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:id, :id2, :a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :id2, :a, :b), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :id2, :a, :b), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:id, :variable, :value), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{String, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :variable, :value), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :variable, :value), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestReshape, Symbol("#17#26"))})
precompile(Tuple{typeof(Base.redirect_stderr), getfield(TestReshape, Symbol("#17#26")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(TestReshape, Symbol("#16#25")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Function})
precompile(Tuple{typeof(Base._redirect_stderr), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.redirect_stderr), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{typeof(Test.contains_warn), String, Base.Regex})
precompile(Tuple{Type{NamedTuple{(:force,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##rm")), NamedTuple{(:force,), Tuple{Bool}}, typeof(Base.Filesystem.rm), String})
precompile(Tuple{getfield(TestReshape, Symbol("#19#28"))})
precompile(Tuple{typeof(Base.redirect_stderr), getfield(TestReshape, Symbol("#19#28")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(TestReshape, Symbol("#18#27")), String, Vararg{String, N} where N})
precompile(Tuple{Type{NamedTuple{(:variable, :value, :id), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:variable, :value, :id), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:variable, :value, :id), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:variable, :value, :id), Tuple{Array{String, 1}, Array{Base.Missing, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestReshape, Symbol("#20#29"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#20#29")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Base.Missing, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Base.Missing, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Base.Missing, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Function})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Base.Missing, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Base.Missing, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Base.Missing, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Missing, 1}})
precompile(Tuple{getfield(TestReshape, Symbol("#21#30"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#21#30")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Missing}, Type{Float64}})
precompile(Tuple{typeof(Base.promote_type), Type{Float64}, Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Missing}, Type{Union{Base.Missing, Float64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.Missing, Float64, Float64, Float64, Float64, Base.Missing, Float64, Base.Missing, Float64}})
precompile(Tuple{Type{NamedTuple{(:id, :variable, :value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestReshape, Symbol("#31#35"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#31#35")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(CategoricalArrays.categorical), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Union{Base.Missing, Float64}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Union{Base.Missing, Float64}, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Float64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Function})
precompile(Tuple{getfield(TestReshape, Symbol("#32#36"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#32#36")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.Missing, Float64, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.isequal), Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:id, :id2, :variable, :value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :id2, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :id2, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :id2, :variable, :value), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestReshape, Symbol("#33#37"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#33#37")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Union{Base.Missing, Float64}, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Union{Base.Missing, Float64}, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{getfield(TestReshape, Symbol("#34#38"))})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestReshape, Symbol("#34#38")), Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Base.Missing})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64}, Tuple{Bool}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Missing})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.RefValue{String}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestReshape, Symbol("#39#42")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Missing}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, Base.Missing, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#39#42"))}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.Missing}, String})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, String, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#39#42"))}, Int64})
precompile(Tuple{typeof(Random.randstring), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#39#42"))}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Missing, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#39#42"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#39#42"))}, Int64, Int64})
precompile(Tuple{typeof(Missings.allowmissing), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Float64}, 1}, Base.Missing, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.repeat), Array{String, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Union{Base.Missing, Float64}, 1}}, Array{Int64, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Int64, Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Vararg{Array{T, 1} where T, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{Union{Base.Missing, Float64}}, Type{Any}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Vararg{Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T, N} where N})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Union{Base.Missing, Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Union{Base.Missing, Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Union{Base.Missing, String}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Any, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}}})
precompile(Tuple{typeof(Base.fill!), Array{Any, 1}, Base.Missing})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Any, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Any, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Any, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Any, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Function})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Any, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestReshape, Symbol("#40#43")){DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{getfield(TestReshape, Symbol("#40#43")){DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(TestReshape, Symbol("#40#43")){DataFrames.DataFrame}}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Array{Symbol, 1}, getfield(TestReshape, Symbol("#40#43")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Any, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Any, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){Array{Any, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Any, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestReshape, Symbol("#41#44")){DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{getfield(TestReshape, Symbol("#41#44")){DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(TestReshape, Symbol("#41#44")){DataFrames.DataFrame}}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Array{Symbol, 1}, getfield(TestReshape, Symbol("#41#44")){DataFrames.DataFrame}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, N} where N}, Array{Int64, 1}})
precompile(Tuple{Type{Array{Union{Base.Missing, Float64}, N} where N}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), Function, Base.StepRange{Char, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base._similar_for), Base.StepRange{Char, Int64}, Type{String}, Base.Generator{Base.StepRange{Char, Int64}, typeof(Base.string)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.StepRange{Char, Int64}, typeof(Base.string)}, Int64, Char})
precompile(Tuple{typeof(Base._collect), Base.StepRange{Char, Int64}, Base.Generator{Base.StepRange{Char, Int64}, typeof(Base.string)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRange{Char, Int64}, Base.Generator{Base.StepRange{Char, Int64}, typeof(Base.string)}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, N} where N}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :e), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.repeat), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.repeat), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#311#313")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#310#312")){DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#318#319")), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#318#319")), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#318#319")), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{NamedTuple{(:variable_name, :value_name), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:variable_name, :value_name), Tuple{Symbol, Symbol}}, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:variable_name, :value_name), Tuple{Symbol, Symbol}}, typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:variable_name, :value_name), Tuple{Symbol, Symbol}}, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vcat)})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Any, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex, Base.Regex})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Array{Any, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:view,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{DataFrames.RepeatedVector{T} where T}, Array{Union{Base.Missing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}}, Array{Int64, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#341#342")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#341#342")){DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{Type{DataFrames.RepeatedVector{T} where T}, Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.RepeatedVector{T} where T, 1}, Int64, Array{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{DataFrames.RepeatedVector{T} where T, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#341#342")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{Type{DataFrames.RepeatedVector{T} where T}, Array{Union{Base.Missing, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, DataFrames.RepeatedVector{Symbol}, DataFrames.StackedVector, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.RepeatedVector{Symbol}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.StackedVector, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Int64})
precompile(Tuple{typeof(Base.length), DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.length), DataFrames.StackedVector})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), DataFrames.StackedVector})
precompile(Tuple{typeof(Base.length), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.length), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.length), DataFrames.RepeatedVector{Union{Base.Missing, String}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), DataFrames.RepeatedVector{Union{Base.Missing, String}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.RepeatedVector{Symbol}, DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.map), Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Symbol}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Tuple{DataFrames.RepeatedVector{Symbol}, DataFrames.RepeatedVector{Symbol}}, Tuple{Tuple{Tuple{Base.OneTo{Int64}, Int64}}, Tuple{Tuple{Base.OneTo{Int64}, Int64}}}, Tuple{Base.Missing, Base.Missing}, Base.Missing})
precompile(Tuple{typeof(Base.iterate), DataFrames.StackedVector})
precompile(Tuple{typeof(Base.:(==)), DataFrames.StackedVector, DataFrames.StackedVector})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#338#339"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#338#339"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._accumulate1!), typeof(Base.add_sum), Array{Int64, 1}, Int64, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.StackedVector, Int64})
precompile(Tuple{typeof(Base.iterate), DataFrames.StackedVector, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#338#339")), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Tuple{DataFrames.StackedVector, DataFrames.StackedVector}, Tuple{Tuple{Tuple{Base.OneTo{Int64}, Int64}}, Tuple{Tuple{Base.OneTo{Int64}, Int64}}}, Tuple{Base.Missing, Base.Missing}, Base.Missing})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}}, Tuple{Tuple{Tuple{Base.OneTo{Int64}, Int64}}, Tuple{Tuple{Base.OneTo{Int64}, Int64}}}, Tuple{Base.Missing, Base.Missing}, Base.Missing})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}}, Tuple{Tuple{Tuple{Base.OneTo{Int64}, Int64}}, Tuple{Tuple{Base.OneTo{Int64}, Int64}}}, Tuple{Base.Missing, Base.Missing}, Base.Missing})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.RepeatedVector{Union{Base.Missing, String}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Union{Base.Missing, String}}, Int64})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_some), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, String}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}}, Tuple{Tuple{Tuple{Base.OneTo{Int64}, Int64}}, Tuple{Tuple{Base.OneTo{Int64}, Int64}}}, Tuple{Base.Missing, Base.Missing}, Base.Missing})
precompile(Tuple{Type{Array{UnionAll, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{UnionAll, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{DataFrames.RepeatedVector{T} where T}})
precompile(Tuple{typeof(Base.allocatedinline), Type{UnionAll}})
precompile(Tuple{typeof(Base.vcat), Type{T} where T, Type{T} where T, Array{UnionAll, 1}})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Type{T} where T, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Type{T} where T, Array{UnionAll, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{DataType}, Type{UnionAll}})
precompile(Tuple{typeof(Base.promote_type), Type{UnionAll}, Type{Type}})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Type}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{1}, typeof(Base.cat_t), Type{Type}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{UnionAll, DataType, Array{UnionAll, 1}}})
precompile(Tuple{typeof(Base.cat_similar), Type{T} where T, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Type, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Type}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Type, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Type, 1}, Tuple{Int64}, Tuple{Bool}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Type, 1, Array{Type, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Type, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Type, 1, Array{Type, 1}, Tuple{Base.UnitRange{Int64}}, true}, Type{T} where T})
precompile(Tuple{typeof(Base.cat_indices), Array{UnionAll, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{UnionAll, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{UnionAll, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Type, 1}, Array{UnionAll, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{Type, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(isa), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{Type, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(isa), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Type, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(isa), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{Type, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{DataFrames.RepeatedVector{Union{Base.Missing, Float64}}}, Array{Int64, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#341#342")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#341#342")){DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.RepeatedVector{T} where T, 1}, Int64, Array{DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, DataFrames.RepeatedVector{Symbol}, DataFrames.StackedVector, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.ndims), DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.ndims), Type{DataFrames.RepeatedVector{Symbol}}})
precompile(Tuple{typeof(Base.ndims), DataFrames.StackedVector})
precompile(Tuple{typeof(Base.ndims), Type{DataFrames.StackedVector}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.RepeatedVector{Symbol}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.RepeatedVector{Symbol}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Symbol}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.similar), DataFrames.RepeatedVector{Symbol}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Array{Symbol, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.axes), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.map), typeof(Base.unsafe_length), Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Symbol, 1}, DataFrames.RepeatedVector{Symbol}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Any, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.StackedVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.StackedVector, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.StackedVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.to_index), DataFrames.RepeatedVector{Symbol}, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Symbol}, Bool})
precompile(Tuple{typeof(Base.to_index), DataFrames.StackedVector, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.StackedVector, Bool})
precompile(Tuple{typeof(Base.to_index), DataFrames.RepeatedVector{Symbol}, Float64})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Symbol}, Float64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.Pair{Symbol, Bool}, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.to_index), DataFrames.StackedVector, Float64})
precompile(Tuple{typeof(Base.getindex), DataFrames.StackedVector, Float64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.RepeatedVector{Symbol}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.RepeatedVector{Symbol}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Symbol}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.:(==)), Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Symbol, 1}, DataFrames.RepeatedVector{Symbol}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.iterate), DataFrames.RepeatedVector{Symbol}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.StackedVector, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.StackedVector, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.StackedVector, Base.BitArray{1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, DataFrames.StackedVector})
precompile(Tuple{typeof(Base.iterate), DataFrames.StackedVector, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Symbol}, Function})
precompile(Tuple{typeof(Base.to_indices), DataFrames.RepeatedVector{Symbol}, Tuple{Base.OneTo{Int64}}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.RepeatedVector{Symbol}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, DataFrames.RepeatedVector{Symbol}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Symbol, 1}, DataFrames.RepeatedVector{Symbol}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.StackedVector, Function})
precompile(Tuple{typeof(Base.to_indices), DataFrames.StackedVector, Tuple{Base.OneTo{Int64}}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.StackedVector, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, DataFrames.StackedVector, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.RepeatedVector{Symbol}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.RepeatedVector{Symbol}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Symbol}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Symbol, 1}, DataFrames.RepeatedVector{Symbol}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.StackedVector, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.StackedVector, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.StackedVector, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, DataFrames.RepeatedVector{Symbol}, DataFrames.StackedVector, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("#338#339")), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.similar), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Float64}, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, Float64}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.axes), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Union{Base.Missing, Float64}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Float64}, 1}, Float64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, DataFrames.RepeatedVector{Symbol}, DataFrames.StackedVector, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}})
precompile(Tuple{Type{NamedTuple{(:variable_name, :value_name, :view), T} where T<:Tuple}, Tuple{Symbol, Symbol, Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:variable_name, :value_name, :view), Tuple{Symbol, Symbol, Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:variable_name, :value_name, :view), Tuple{Symbol, Symbol, Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:variable_name, :value_name, :view), Tuple{Symbol, Symbol, Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##stack")), NamedTuple{(:variable_name, :value_name, :view), Tuple{Symbol, Symbol, Bool}}, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Base.IndexLinear, DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, V, C, U} where U where C where V}, DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(CategoricalArrays.categorical), DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Symbol, Int64})
precompile(Tuple{typeof(Base.similar), DataFrames.StackedVector, Type{T} where T, Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), DataFrames.StackedVector, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){DataFrames.StackedVector, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, DataFrames.StackedVector, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Function})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Int64}, 1}, Type{Any}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Any, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Any, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){DataFrames.StackedVector, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Any, 1}, 1}, Array{Any, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){DataFrames.StackedVector, Int64}}, Int64})
precompile(Tuple{typeof(Base.to_indices), Base.BitArray{2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, Base.BitArray{2}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Any, 1}, 1}, Int64})
precompile(Tuple{typeof(Base._setindex!), Base.IndexLinear, Base.BitArray{2}, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Float64}, 1}, Type{Any}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{UInt64, 0}, UInt64})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Union{Base.Missing, Int64}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Union{Base.Missing, Int64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Union{Base.Missing, Int64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Union{Base.Missing, Int64}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.zeros), Type{UInt64}, Int64})
precompile(Tuple{typeof(Base.fill), Bool, Int64})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{UInt64, 1}, UInt64, Int64})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Bool})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.length), Array{UInt64, 1}})
precompile(Tuple{typeof(Base._tablesz), Int64})
precompile(Tuple{typeof(Base.eachindex), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(&)), UInt64, Int64})
precompile(Tuple{typeof(Base.:(+)), UInt64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, UInt64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Int64, UInt64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Union{Base.Missing, Int64}, 1, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Union{Base.Missing, String}, 1, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, String, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){DataFrames.StackedVector, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, DataFrames.StackedVector, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.similar), DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Int64}, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.axes), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Union{Base.Missing, Int64}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.similar), DataFrames.RepeatedVector{Union{Base.Missing, String}}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, String}, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.axes), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Union{Base.Missing, String}, 1}, DataFrames.RepeatedVector{Union{Base.Missing, String}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, String}, 1}, String, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Any, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){DataFrames.StackedVector, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Any, 1}, 1}, Array{Any, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#332#335")){DataFrames.StackedVector, Int64}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Float64, 1}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#322#323")){Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Float64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Function})
precompile(Tuple{Type{Ref{T} where T}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Array{Symbol, 1}}}, Base.RefValue{Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.replace), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Array{Symbol, 1}}}, Base.RefValue{Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.replace), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.RefValue{Base.Pair{String, String}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.replace), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Array{Symbol, 1}}}, Base.RefValue{Base.Pair{String, String}}}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{String, 1}})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Float64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Function})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{typeof(Base.Unicode.uppercase)}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.Unicode.uppercase)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.Unicode.uppercase)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.Unicode.uppercase), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.uppercase), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.uppercase), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.uppercase), Tuple{Array{String, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#45#47"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#45#47"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#45#47"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#45#47")), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#45#47")), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#45#47")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#45#47")), Tuple{Array{String, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:renamecols,), T} where T<:Tuple}, Tuple{getfield(TestReshape, Symbol("#46#48"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#46#48"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#46#48"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{getfield(TestReshape, Symbol("#46#48"))}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestReshape, Symbol("#46#48")), Tuple{Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#46#48")), Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#46#48")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestReshape, Symbol("#46#48")), Tuple{Array{String, 1}}}}}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Array{Int64, 1}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{Int64, 1}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{Int64, 1}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Array{Int64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}, N} where N})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Tuple{Int64, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Symbol, 1}, typeof(Tables.sym)}, Int64})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Nothing})
precompile(Tuple{typeof(Tables.schema), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.columnindex), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.flatten), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Array{Int64, 1}, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Array{Int64, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{Array{Int64, 1}, 1}}}})
precompile(Tuple{typeof(DataFrames.repeat_lengths!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Int64}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DataType, 1}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{DataType, 1}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:a, :b), Tuple{Int64, Array{Int64, 1}}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Tuple{Int64, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{typeof(Base.Iterators.flatten), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.Iterators.Flatten{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Array{Tuple{Int64, Int64}, 1}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Tuple{Int64, Int64}}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:a, :b), Tuple{Int64, Tuple{Int64, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Array{T, 1} where T, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{T, 1} where T, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{T, 1} where T, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.copy), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Array{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, Int64, String, String}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Any, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Array{T, 1} where T, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Array{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{Array{T, 1} where T, 1}}}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Type, 1}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{Type, 1}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Array{T, 1} where T}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:a, :b), Tuple{Int64, Array{T, 1} where T}}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Any, 1}}})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Any, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestReshape, Symbol("#49#51")), Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestReshape, Symbol("#50#52")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vect), Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#49#51"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#49#51"))}, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#50#52"))}})
precompile(Tuple{Type{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}, Tuple{Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#49#51"))}, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#50#52"))}}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}})
precompile(Tuple{typeof(Base.copy), Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}, Int64})
precompile(Tuple{typeof(Base.fill), Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}}})
precompile(Tuple{typeof(Base.Iterators.flatten), Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}})
precompile(Tuple{getfield(TestReshape, Symbol("#49#51")), Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}, Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#49#51"))}, Int64}})
precompile(Tuple{getfield(TestReshape, Symbol("#50#52")), Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Array{Base.Generator{Base.UnitRange{Int64}, F} where F, 1}}, Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, getfield(TestReshape, Symbol("#50#52"))}, Int64}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, F} where F}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:a, :b), Tuple{Int64, Base.Generator{Base.UnitRange{Int64}, F} where F}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Array{Union{Base.Missing, Int64}, 1}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Array{Union{Base.Missing, Int64}, 1}, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{Array{Union{Base.Missing, Int64}, 1}, 1}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Array{Union{Base.Missing, Int64}, 1}}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:a, :b), Tuple{Int64, Array{Union{Base.Missing, Int64}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.vect), Array{Array{Int64, 1}, 1}, Vararg{Array{Array{Int64, 1}, 1}, N} where N})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Array{Array{Int64, 1}, 1}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Array{Array{Int64, 1}, 1}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{Array{Int64, 1}, 1}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Array{Array{Int64, 1}, 1}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Array{Array{Int64, 1}, 1}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Array{Array{Int64, 1}, 1}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Array{Array{Int64, 1}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Array{Array{Int64, 1}, 1}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Array{Array{Int64, 1}, 1}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Array{Array{Int64, 1}, 1}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Array{Array{Int64, 1}, 1}, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Array{Array{Int64, 1}, 1}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{Array{Array{Int64, 1}, 1}, 1}}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Array{Int64, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Int64, 1}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Array{Int64, 1}}, Array{Array{Array{Int64, 1}, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Array{Array{Int64, 1}, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{Array{Array{Int64, 1}, 1}, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Array{Int64, 1}, 1}}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Array{Array{Int64, 1}, 1}}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:a, :b), Tuple{Int64, Array{Array{Int64, 1}, 1}}}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Array{Int64, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##insertcols!#122")), Bool, typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(DataFrames.insertcols!), DataFrames.DataFrame, Int64, Base.Pair{Symbol, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Vararg{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, N} where N})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{typeof(Base.copy), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}}}})
precompile(Tuple{typeof(Base.unaliascopy), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:a, :b), Tuple{Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Int64, Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Float64, Base.Missing, Float64, Float64, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, String, String, Base.Missing}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Missing}, Type{Union{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Symbol, Base.Missing, Symbol, Symbol, Base.Missing, Symbol}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}, Base.IndexLinear, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.convert), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, V, C, U} where U where C where V}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :d), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Symbol, UInt32}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, UInt32}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalPool{Symbol, UInt32, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{typeof(Base.copy), CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Union{Base.Missing, Float64}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Union{Base.Missing, String}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, UInt32}, UInt32, Symbol})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, UInt32}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{CategoricalArrays.CategoricalValue{Symbol, UInt32}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{CategoricalArrays.CategoricalValue{Symbol, UInt32}, 1}})
precompile(Tuple{typeof(Base.length), Array{CategoricalArrays.CategoricalValue{Symbol, UInt32}, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Function})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, DataFrames.Index, Int64})
precompile(Tuple{typeof(Base.names), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Base.Regex})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#184#185")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames._names), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.mightalias), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(DataFrames, Symbol("#180#181")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#180#181")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:c, :b), T} where T<:Tuple}, Tuple{String, Float64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:c, :b), Tuple{String, Float64}}, NamedTuple{(:c, :b), Tuple{String, Float64}}})
precompile(Tuple{Type{NamedTuple{(:b, :c), T} where T<:Tuple}, Tuple{Float64, String}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:b, :c), Tuple{Float64, String}}, NamedTuple{(:b, :c), Tuple{Float64, String}}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:b, :a), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:b, :a), Tuple{Float64, Int64}}, NamedTuple{(:b, :a), Tuple{Float64, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#31#33")){Base.Regex}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#31#33")){Base.Regex}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(DataFrames, Symbol("#30#32")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#31#33")){Base.Regex}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}}, getfield(DataFrames, Symbol("#30#32")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#31#33")){Base.Regex}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}}, getfield(DataFrames, Symbol("#30#32")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Base.Regex})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Function})
precompile(Tuple{Type{Tuple}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:c, :a, :b), T} where T<:Tuple}, Tuple{String, Int64, Float64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:c, :a, :b), Tuple{String, Int64, Float64}}, NamedTuple{(:c, :a, :b), Tuple{String, Int64, Float64}}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#184#185")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Base.Colon})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Base.UnitRange{Int64}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Symbol})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Bool, Base.UnitRange{Int64}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Bool})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Bool, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Regex})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#186#187")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.isequal), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Union{Base.Missing, String}, 0, Array{Union{Base.Missing, String}, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.SubArray{Union{Base.Missing, String}, 0, Array{Union{Base.Missing, String}, 1}, Tuple{Int64}, true}, String})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:c, :a), T} where T<:Tuple}, Tuple{String, Int64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:c, :a), Tuple{String, Int64}}, NamedTuple{(:c, :a), Tuple{String, Int64}}})
precompile(Tuple{Type{NamedTuple{(:a, :c), T} where T<:Tuple}, Tuple{Int64, String}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :c), Tuple{Int64, String}}, NamedTuple{(:a, :c), Tuple{Int64, String}}})
precompile(Tuple{Type{Tuple}, Tuple{}})
precompile(Tuple{typeof(Core.Compiler.iterate), NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#180#181")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#180#181")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol, String})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#28#29")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#28#29")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#28#29")){DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Array{Bool, 1}})
precompile(Tuple{Type{Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:c,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:c,), Tuple{String}}, NamedTuple{(:c,), Tuple{String}}})
precompile(Tuple{Type{NamedTuple{(:b,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:b,), Tuple{Float64}}, NamedTuple{(:b,), Tuple{Float64}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Symbol, String})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Function})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Regex})
precompile(Tuple{typeof(Base.:(!=)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#184#185")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(DataFrames, Symbol("#184#185")), Tuple{Int64, Int64}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Base.GMP.BigInt, Function})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, DataFrames.Index, Base.GMP.BigInt})
precompile(Tuple{getfield(DataFrames, Symbol("#184#185")), Tuple{Float64, Float64}})
precompile(Tuple{getfield(DataFrames, Symbol("#184#185")), Tuple{String, String}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#184#185")), Tuple{CategoricalArrays.CategoricalValue{Symbol, UInt32}, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{getfield(DataFrames, Symbol("#184#185")), Tuple{Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#186#187")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}}, Base.Colon})
precompile(Tuple{typeof(Base.isequal), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{Base.Missing, Base.Missing}})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{String, String}})
precompile(Tuple{getfield(DataFrames, Symbol("#184#185")), Tuple{String, Base.Missing}})
precompile(Tuple{getfield(DataFrames, Symbol("#184#185")), Tuple{Base.Missing, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{getfield(Base, Symbol("#58#59")){typeof(Base.isequal)}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Vararg{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{String, Base.Missing}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#184#185")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.:(!=)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(!=)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Float64, Float64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Symbol, Base.Missing, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Symbol}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Symbol}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Symbol}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Symbol}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Symbol}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isless), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.isless), Float64, Float64})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Symbol}, 1}, Int64})
precompile(Tuple{typeof(Base.isless), Int64, Int64})
precompile(Tuple{typeof(Base.isless), Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#182#183")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#182#183")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Int64})
precompile(Tuple{typeof(Base.hash), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, UInt64})
precompile(Tuple{typeof(Base.hash), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{AbstractArray{T, 1} where T, 1}}})
precompile(Tuple{Type{Tuple}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.hash), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}, Bool})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Symbol}, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Union{Base.Missing, Float64}, 1}, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{UInt64, 1}, Array{Bool, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{UInt64, 1}, Array{Bool, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.eachrow), DataFrames.DataFrame})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.hash), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt64, 1}, UInt64, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, typeof(Base.hash)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, typeof(Base.hash)}})
precompile(Tuple{typeof(Base.:(==)), Array{UInt64, 1}, Array{UInt64, 1}})
precompile(Tuple{Type{NamedTuple{(:d1,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:d1,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:d1,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.group_rows), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.getproperty), DataFrames.RowGroupDict{DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#268#270")){DataFrames.RowGroupDict{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#269#271")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}}, Tuple{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.length), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}}, Tuple{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.isempty), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol, Int64})
precompile(Tuple{typeof(Base.keys), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Tuple}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.values), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.Pair{A, B} where B where A}, Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}})
precompile(Tuple{getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Int64}}, Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Int64}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Int64}, 1}, Base.Pair{Symbol, Int64}, Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{Symbol, Int64}, 1}, Base.Pair{Symbol, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Int64, Float64, String, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}, Tuple{Symbol, String}})
precompile(Tuple{getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}, Tuple{Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, Float64}, Base.Pair{Symbol, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, String}, Base.Pair{Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Pair{Symbol, Float64}}, Type{Base.Pair{Symbol, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Pair{Symbol, Int64}}, Type{Base.Pair{Symbol, Any}}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, Any}, 1}, Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Float64}, Base.Pair{Symbol, String}, Base.Pair{Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, Any}, 1}, Base.Pair{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, Any}, 1}, Base.Pair{Symbol, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, Any}, 1}, Base.Pair{Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Pair{Symbol, B} where B, 1}, Array{Base.Pair{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Symbol, Float64}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Symbol, String}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Symbol, UInt32}, CategoricalArrays.CategoricalValue{Symbol, UInt32}})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Bool})
precompile(Tuple{typeof(Base.names), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getindex), Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.ndims), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.ndims), Type{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.keys), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Float64})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.values), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.pairs), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.Pair{A, B} where B where A}, Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Float64, Float64, Float64, Float64}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Float64}, Vararg{Base.Pair{Symbol, Float64}, N} where N})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Pair{Symbol, Float64}, 1}, Array{Base.Pair{Symbol, Float64}, 1}})
precompile(Tuple{typeof(Base.map), Function, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Float64, String}})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}})
precompile(Tuple{typeof(Base.map), typeof(Base.identity), Tuple{Int64, Float64, String}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}})
precompile(Tuple{typeof(Base.map), Function, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, String}}})
precompile(Tuple{getfield(TestDataFrameRow, Symbol("#1#6")), Int64, Int64})
precompile(Tuple{typeof(Base.map), getfield(TestDataFrameRow, Symbol("#1#6")), Tuple{Float64, String}, Tuple{Float64, String}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{String, String}}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :b, :c), Tuple{Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{String, String}}}, NamedTuple{(:a, :b, :c), Tuple{Tuple{Int64, Int64}, Tuple{Float64, Float64}, Tuple{String, String}}}})
precompile(Tuple{typeof(Base.get), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Int64})
precompile(Tuple{typeof(Base.get), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol, Int64})
precompile(Tuple{typeof(Base.get), getfield(TestDataFrameRow, Symbol("#2#7")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.get), getfield(TestDataFrameRow, Symbol("#3#8")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{typeof(Base.get), getfield(TestDataFrameRow, Symbol("#4#9")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.get), getfield(TestDataFrameRow, Symbol("#5#10")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Base.OneTo{Int64}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Union}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{Union}}, Base.Generator{Base.OneTo{Int64}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Union{Base.Missing, Int64}}, Type{Float64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Union{Base.Missing, Float64}, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Array{Int64, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, N} where N}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Array{T, N} where N where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Array{Int64, N} where N}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Base.Missing, String}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b, :c), Tuple{Int64, Base.Missing, String}}, NamedTuple{(:a, :b, :c), Tuple{Int64, Base.Missing, String}}})
precompile(Tuple{typeof(Base.parent), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.parentindices), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Array{Int64, 1}}, Tuple{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.parentindices), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Base.OneTo{Int64}}, Tuple{Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.parent), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.parent), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.permutedims), Array{String, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{String, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{String, 2}})
precompile(Tuple{Type{Base.IteratorEltype}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.:(==)), Base.EltypeUnknown, Base.EltypeUnknown})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.EltypeUnknown, Base.HasLength})
precompile(Tuple{typeof(Base.collect), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{String}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{String, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{String, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{String, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Bool, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Bool, Float64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Int64, Bool, Float64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Int64, Bool, Float64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Int64}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Integer, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Bool, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Integer, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Real, 1}, Int64, Array{Integer, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Integer, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Int64})
precompile(Tuple{typeof(Base.eltype), Array{Real, 1}})
precompile(Tuple{typeof(Base.hcat), Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{typeof(Base.typed_hcat), Type{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{typeof(Base._typed_hcat), Type{Int64}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.pairs), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.get), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Symbol, Base.Missing})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#188")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Symbol})
precompile(Tuple{typeof(Base.get), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Symbol, Base.Missing})
precompile(Tuple{getfield(DataFrames, Symbol("##push!#188")), Symbol, Nothing, typeof(Base.push!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(TestDataFrameRow, Symbol("#11#12")){DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(TestDataFrameRow, Symbol("#11#12")){DataFrames.DataFrame}, Base.CoreLogging.LogState})
precompile(Tuple{getfield(Base, Symbol("#kw##push!")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.push!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.Pair{A, B} where B where A}, Tuple{Symbol, Symbol}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Nothing, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Nothing, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Nothing, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Nothing})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Nothing}, Int64})
precompile(Tuple{Type{Array{Nothing, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Nothing, 1}, Nothing})
precompile(Tuple{typeof(Base.copy), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{DataFrames.SubIndex{I, S, T} where T<:AbstractArray{Int64, 1} where S<:AbstractArray{Int64, 1} where I<:DataFrames.AbstractIndex}, DataFrames.Index, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.truncate), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.escape_string), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(Base.summary), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.getchunkbounds), Array{Int64, 1}, Bool, Int64})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(DataFrames.showrows), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Int64})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Int64, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#359")), Bool, Bool, Symbol, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Nothing, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Array{Nothing, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Nothing, 1, Array{Nothing, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Nothing, 1, Array{Nothing, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Nothing, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.isassigned), Base.SubArray{Nothing, 1, Array{Nothing, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Nothing, 1, Array{Nothing, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Nothing, 1, Array{Nothing, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.compacttype), Type, Int64})
precompile(Tuple{typeof(DataFrames.compacttype), Type})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isassigned), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(DataFrames.ourshow), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(Base.ismissing), Nothing})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.string), String, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Type{Int64}, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(Base.summary), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(DataFrames.showrows), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Int64})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Int64, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#359")), Bool, Bool, Symbol, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isassigned), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.link_pipe!), Base.PipeEndpoint, Bool, Base.PipeEndpoint, Bool})
precompile(Tuple{typeof(Base._redirect_stdout), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.show), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(TestDataFrameRow, Symbol("#capture_stdout#14")), getfield(TestDataFrameRow, Symbol("#13#15")){DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.get), Base.PipeEndpoint, Symbol, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##show#360")), Bool, Bool, Symbol, typeof(Base.show), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.PipeEndpoint, Symbol})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.PipeEndpoint, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Char, Char})
precompile(Tuple{typeof(Base.escape_string), Base.PipeEndpoint, String, String})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(DataFrames.showrows), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Int64})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.PipeEndpoint, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Int64, typeof(DataFrames._show), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#359")), Bool, Bool, Symbol, typeof(Base.show), Base.PipeEndpoint, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allcols, :splitcols, :rowlabel), Tuple{Bool, Bool, Symbol}}, typeof(Base.show), Base.PipeEndpoint, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.PipeEndpoint, String})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.PipeEndpoint, Int64})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String})
precompile(Tuple{typeof(DataFrames.ourshow), Base.PipeEndpoint, String})
precompile(Tuple{typeof(DataFrames.ourshow), Base.PipeEndpoint, Int64})
precompile(Tuple{typeof(Base.redirect_stdout), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Tuple{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Tuple{Int64, Int64}}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Int64, typeof(DataFrames._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##_show")), NamedTuple{(:allcols, :splitcols, :rowlabel, :summary, :rowid), Tuple{Bool, Bool, Symbol, Bool, Int64}}, typeof(DataFrames._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#359")), Bool, Bool, Symbol, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.fld), Int64, Int64})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(DataFrames.showrows), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Int64})
precompile(Tuple{typeof(DataFrames.ourshow), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getproperty), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.sprint), Function, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("text/html")}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.digitsep), Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#365")), Bool, Int64, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#366")), Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("text/latex")}}})
precompile(Tuple{getfield(Base, Symbol("##replace#337")), Int64, typeof(Base.replace), String, Base.Pair{Base.Fix2{typeof(Base.in), Array{Char, 1}}, typeof(DataFrames.latex_char_escape)}})
precompile(Tuple{typeof(DataFrames.latex_escape), String})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#374#376"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Symbol, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#374#376"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{Array{AbstractArray{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#373")), Int64, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{Array{AbstractArray{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{Array{AbstractArray{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{DataType, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#375#377")), Array{DataType, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{DataType, 1}, getfield(DataFrames, Symbol("#375#377"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{DataType, 1}, Base.Generator{Array{DataType, 1}, getfield(DataFrames, Symbol("#375#377"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataType, 1}, Base.Generator{Array{DataType, 1}, getfield(DataFrames, Symbol("#375#377"))}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/latex")}, Any})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("text/csv")}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##printtable#382")), Bool, Char, Char, String, typeof(DataFrames.printtable), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/csv")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{DataType, 1}, Int64})
precompile(Tuple{typeof(DataFrames.escapedprint), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("text/tab-separated-values")}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Float64, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Float64, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Int64, Float64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Float64, Float64, Base.Missing, Float64}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, Base.Missing, String, String}})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E, :F), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D, :E, :F), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D, :E, :F), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C, :D, :E, :F), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/latex")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/latex")}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#373")), Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Type, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{Array{AbstractArray{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{Array{AbstractArray{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Type, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#375#377")), Array{Type, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Type, 1}, getfield(DataFrames, Symbol("#375#377"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Type, 1}, Base.Generator{Array{Type, 1}, getfield(DataFrames, Symbol("#375#377"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Type, 1}, Base.Generator{Array{Type, 1}, getfield(DataFrames, Symbol("#375#377"))}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.isassigned), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base._replace), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(DataFrames.latex_char_escape), String, Int64, Function})
precompile(Tuple{typeof(Base.isassigned), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.isassigned), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(Base.sprint), Function, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{NamedTuple{(:rowid,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#373")), Int64, typeof(DataFrames._show), Base.PipeEndpoint, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##_show")), NamedTuple{(:rowid,), Tuple{Int64}}, typeof(DataFrames._show), Base.PipeEndpoint, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Tuple{Int64, Int64}}, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#373")), Nothing, typeof(DataFrames._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Printf.decode_dec), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String, Int64, Int64, Char, Array{UInt8, 1}})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.DataFrame, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.DataFrame, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Float64, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:Fish, :Mass), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:Fish, :Mass), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Fish, :Mass), Tuple{Array{String, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#365")), Bool, Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.abs), Int64})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.reverse), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#363#364")), Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#363#364")), Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#363#364"))}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{Int64, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#363#364"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#363#364"))}, Int64})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Missing})
precompile(Tuple{typeof(Base.sprint), Function, Base.Missing})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Missing})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#367")), Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#368")), Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.eachcol), DataFrames.DataFrame, Bool})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#368")), Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#365")), Bool, Int64, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.OneTo{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#366")), Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isassigned), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{Type{NamedTuple{(:summary,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:summary,), Tuple{Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:summary,), Tuple{Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:summary,), Tuple{Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:summary,), Tuple{Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.:(*)), String, String, String})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#365")), Bool, Int64, typeof(DataFrames._show), Base.PipeEndpoint, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##_show")), NamedTuple{(:rowid,), Tuple{Int64}}, typeof(DataFrames._show), Base.PipeEndpoint, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#365")), Bool, Nothing, typeof(DataFrames._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.string), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Missings.missings), Int64})
precompile(Tuple{typeof(Base.fill), Base.Missing, Int64})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C, :D, :E, :F, :G, :H), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D, :E, :F, :G, :H), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C, :D, :E, :F, :G, :H), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C, :D, :E, :F, :G, :H), Tuple{Base.UnitRange{Int64}, Base.StepRange{Char, Int64}, Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}, Array{Base.Missing, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Base.Missing, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##printtable#382")), Bool, Char, Char, String, typeof(DataFrames.printtable), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.printtable), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), Array{Type, 1}, Int64})
precompile(Tuple{typeof(Base.show_invalid), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(DataFrames.escapedprint), Base.GenericIOBuffer{Array{UInt8, 1}}, Char, String})
precompile(Tuple{typeof(DataFrames.escapedprint), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalString{UInt32}, String})
precompile(Tuple{typeof(DataFrames.escapedprint), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String})
precompile(Tuple{typeof(Base.getindex), Array{Base.Missing, 1}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.DataFrame, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.promote_type), Type{DataFrames.DataFrame}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{DataFrames.DataFrame, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/csv")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/csv")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/csv")}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#375#377")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#375#377"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#375#377"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#375#377"))}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##printtable#382")), Bool, Char, Char, String, typeof(DataFrames.printtable), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/csv")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#365")), Bool, Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#373")), Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{AssertionError}, String})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.typesof)})
precompile(Tuple{typeof(Base.isempty), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:copycols,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:copycols,), Tuple{Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.DataFrame!)})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, V, C, U, U} where U where U where C where V}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.ones), Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{Any, 1}, DataFrames.Index})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Vararg{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Float64, UInt32}, CategoricalArrays.CategoricalValue{Float64, UInt32}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tables.EmptyVector, 1}}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#455#457")), Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#34#35")){Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, Array{Any, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#111")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#116")), Bool, Type{DataFrames.DataFrame}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#115")), Bool, Bool, Type{DataFrames.DataFrame}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Int64}}, Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:x1, :x2), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x1, :x2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1, :x2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Float64, UInt32}, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:copycols,), Tuple{Bool}}}, Type{NamedTuple{(:x1, :x2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:copycols, :x1, :x2), Tuple{Bool, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##DataFrame!")), NamedTuple{(:x1, :x2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, typeof(DataFrames.DataFrame!)})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, Vararg{Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#455#457")), Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, 1}, typeof(Base.first)}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, Array{Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}}, typeof(Base.first)}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, Tuple{Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Tuple{Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.UnitRange{T} where T<:Real}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Base.UnitRange{T} where T<:Real, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Base.UnitRange{T} where T<:Real, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Base.UnitRange{T} where T<:Real, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{T, 1} where T}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#116")), Bool, Type{DataFrames.DataFrame}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#116")), Bool, Type{DataFrames.DataFrame}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._collect), Type{AbstractArray{T, 1} where T}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}, Base.HasLength})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#116")), Bool, Type{DataFrames.DataFrame}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{Type{Array{AbstractArray{Int64, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Int64, 1}, 1}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{AbstractArray{Int64, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{Int64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{AbstractArray{Int64, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#455#457")), Base.Pair{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Int64, 1}}}, typeof(Base.first)}})
precompile(Tuple{getfield(DataFrames, Symbol("#455#457")), Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Int64, 1}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{Type{Array{Base.Pair{Symbol, AbstractArray{Int64, 1}}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, AbstractArray{Int64, 1}}, 1}, Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.Pair{Symbol, AbstractArray{Int64, 1}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#455#457")), Base.Pair{Symbol, AbstractArray{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Base.Pair{Symbol, AbstractArray{Int64, 1}}, 1}, typeof(Base.first)}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, Array{Base.Pair{Symbol, AbstractArray{Int64, 1}}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Base.Pair{Symbol, AbstractArray{Int64, 1}}, 1}})
precompile(Tuple{typeof(Base.typesof), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.typesof), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.typesof), Array{Base.UnitRange{Int64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#115")), Bool, Bool, Type{DataFrames.DataFrame}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.typesof), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.typesof), Tuple{Base.Pair{Symbol, Base.UnitRange{Int64}}, Base.Pair{Symbol, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.typesof), Array{Base.Pair{Symbol, AbstractArray{Int64, 1}}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Union{Base.Missing, Float64}}, Tuple{Int64, Int64, Int64}, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Union{Base.Missing, Float64}, 2}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 2}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{Float64, UInt32}, Float64})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64}, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Array{Float64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame!#120")), Bool, typeof(DataFrames.DataFrame!), Array{Float64, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{Float64, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:x1, :x2), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Float64}, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x1, :x2), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1, :x2), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:x1, :x2, :x3), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Float64}, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x1, :x2, :x3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1, :x2, :x3), Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{DataFrames.SubDataFrame{D, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Base.UnitRange{Int64}, Function})
precompile(Tuple{Type{DataFrames.SubDataFrame{D, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Function})
precompile(Tuple{Type{DataFrames.SubDataFrame{D, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Bool, 1}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Int64, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :copycols), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Int64, 1}, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:copycols,), Tuple{Bool}}}, Type{NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:copycols, :x, :y), Tuple{Bool, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##DataFrame!")), NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, typeof(DataFrames.DataFrame!)})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:copycols,), Tuple{Bool}}}, Type{NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##DataFrame!")), NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}, typeof(DataFrames.DataFrame!)})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(DataFrames.DataFrame!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Float64, 1}}, Vararg{Base.Pair{Symbol, Array{Float64, 1}}, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#106")), Bool, Bool, Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Float64, 1}}, Vararg{Base.Pair{Symbol, Array{Float64, 1}}, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#107#108")), Tuple{Base.Pair{Symbol, Array{Float64, 1}}, Base.Pair{Symbol, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.Pair{Symbol, Array{Float64, 1}}, Base.Pair{Symbol, Array{Float64, 1}}}, getfield(DataFrames, Symbol("#107#108"))}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:makeunique,), Tuple{Bool}}, Type{DataFrames.Index}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.typesof), Base.Pair{Symbol, Array{Float64, 1}}, Vararg{Base.Pair{Symbol, Array{Float64, 1}}, N} where N})
precompile(Tuple{Type{NamedTuple{(:x1, :x2), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x1, :x2), Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1, :x2), Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Any, 1}}, Vararg{Base.Pair{Symbol, Array{Any, 1}}, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#106")), Bool, Bool, Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Any, 1}}, Vararg{Base.Pair{Symbol, Array{Any, 1}}, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#107#108")), Tuple{Base.Pair{Symbol, Array{Any, 1}}, Base.Pair{Symbol, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.Pair{Symbol, Array{Any, 1}}, Base.Pair{Symbol, Array{Any, 1}}}, getfield(DataFrames, Symbol("#107#108"))}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Int64, 1}}, Vararg{Base.Pair{Symbol, #s26} where #s26, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#106")), Bool, Bool, Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Int64, 1}}, Vararg{Base.Pair{Symbol, #s26} where #s26, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#107#108")), Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}, getfield(DataFrames, Symbol("#107#108"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#107#108")), Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}, getfield(DataFrames, Symbol("#107#108"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}, getfield(DataFrames, Symbol("#107#108"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#107#108")), Base.Pair{Symbol, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#107#108")), Base.Pair{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.UnitRange{Int64}}, Vararg{Base.Pair{Symbol, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, Base.Dict{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.Dict{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.typesof), Base.Dict{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Array{Int64, 1}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{Int64, 1}}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{Int64, 1}}, Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{Int64, 1}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Int64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#115")), Bool, Bool, Type{DataFrames.DataFrame}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{DataFrames.DataFrame}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Array{Any, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Int64, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#101#104")){Array{Int64, 1}, Array{String, 1}}, Base.Iterators.Enumerate{Array{Int64, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#101#104")){Array{Int64, 1}, Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.Iterators.Enumerate{Array{Int64, 1}}, getfield(DataFrames, Symbol("#101#104")){Array{Int64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Int64, 1}}, getfield(DataFrames, Symbol("#101#104")){Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{Type{NamedTuple{(:A,), T} where T<:Tuple}, Tuple{Array{Float64, 2}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 2}, Tuple{Symbol}, NamedTuple{(:A,), Tuple{Array{Float64, 2}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A,), Tuple{Array{Float64, 2}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#455#457")), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Int64, 1}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Tables.invalidtable), Array{Int64, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:copycols,), Tuple{Bool}}}, Type{NamedTuple{(:a, :b), Tuple{Int64, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Int64, Array{Any, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:copycols, :a, :b), Tuple{Bool, Int64, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##DataFrame!")), NamedTuple{(:a, :b), Tuple{Int64, Array{Any, 1}}}, typeof(DataFrames.DataFrame!)})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:copycols,), Tuple{Bool}}}, Type{NamedTuple{(:A,), Tuple{Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Array{Float64, 2}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:copycols, :A), Tuple{Bool, Array{Float64, 2}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##DataFrame!")), NamedTuple{(:A,), Tuple{Array{Float64, 2}}}, typeof(DataFrames.DataFrame!)})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame!#120")), Bool, typeof(DataFrames.DataFrame!), Array{Int64, 2}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##DataFrame!")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.DataFrame!), Array{Int64, 2}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##DataFrame!")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.DataFrame!), Array{Int64, 2}})
precompile(Tuple{typeof(Base.kwerr), NamedTuple{(:copycols,), Tuple{Bool}}, Function, Array{Int64, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vect), Type{Array{Int64, 1}}, Vararg{Type{Array{Int64, 1}}, N} where N})
precompile(Tuple{typeof(Base.map), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(typeof), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._collect), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(typeof)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(typeof)}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{DataType}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(typeof)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(typeof)}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(typeof)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.push!), Array{DataType, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Char})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Char, 0}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Char, 1}}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{Int64, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{Int64, 2}})
precompile(Tuple{typeof(Base.vect), Type{Union{Base.Missing, Int64}}, Vararg{Union, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, String}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#118")), Bool, Type{DataFrames.DataFrame}, Array{Union, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Union, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{typeof(Base.all), Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.ismissing), Array{Union{Base.Missing, Int64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.all), Function, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.ismissing), Array{Union{Base.Missing, String}, 1}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame!#121")), Bool, typeof(DataFrames.DataFrame!), Array{Union, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{Union, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Union, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Symbol, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Array{Any, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.convert), Type{Array{Any, N} where N}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Float64, 1}})
precompile(Tuple{Type{Array{Any, 2}}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{Float64, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, N} where N}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{T, N} where N where T}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{Any, N} where N}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{Float64, N} where N}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Base.IndexLinear, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Float64}, 1}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{Union}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.eltype)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Union{Base.Missing, Float64}, 2}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Union{Base.Missing, Float64}, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, Array{Union{Base.Missing, Float64}, 2}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Base.Missing, Float64}, 2}, Array{Union{Base.Missing, Float64}, 2}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 2}, Array{Any, 2}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{Type{Array{Int64, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.any), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Union{Base.Missing, Float64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Array{Union{Base.Missing, Int64}, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 2}, Int64, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Float64}, 2}, Array{Union{Base.Missing, Float64}, 2}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 2}, Array{Any, 2}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Int64}, 2}, Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, N} where N}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.convert), Type{Array{Union{Base.Missing, Float64}, N} where N}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{Int64, N} where N}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.convert), Type{Array{Union{Base.Missing, Int64}, N} where N}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, N} where N}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Float64}}, Float64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{Type{Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}, Array{Union{Base.Missing, Float64}, 1}, String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Vararg{Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.KeySet{String, Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{String, 1}, Type{Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, Type{Symbol}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}, String})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.collect), Base.KeySet{String, Base.Dict{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Symbol}, Array{String, 1}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Vararg{Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, N} where N})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}, Int64})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}, Array{Union{Base.Missing, Float64}, 1}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}, Array{Union{Base.Missing, Float64}, 1}, String})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}}, Tuple{Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.KeySet{String, OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}}, Type{Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.KeySet{String, OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}}, Type{Symbol}}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}, String, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.keys), OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Symbol}, Base.KeySet{String, OrderedCollections.OrderedDict{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{Type{DataStructures.SortedDict{K, D, Ord} where Ord<:Base.Order.Ordering where D where K}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Vararg{Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, N} where N})
precompile(Tuple{typeof(Base.push!), Base.BitSet, Int64, Int64})
precompile(Tuple{Type{DataStructures.BalancedTree23{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataStructures.findkey), DataStructures.BalancedTree23{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}, String})
precompile(Tuple{typeof(DataStructures.push_or_reuse!), Array{DataStructures.KDRec{String, Array{Union{Base.Missing, Float64}, 1}}, 1}, Array{Int64, 1}, DataStructures.KDRec{String, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(DataStructures.push_or_reuse!), Array{DataStructures.TreeNode{String}, 1}, Array{Int64, 1}, DataStructures.TreeNode{String}})
precompile(Tuple{typeof(Base.insert!), DataStructures.BalancedTree23{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}, String, Array{Union{Base.Missing, Float64}, 1}, Bool})
precompile(Tuple{typeof(DataStructures.not_iterator_of_pairs), Tuple{Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{Type{DataStructures.SortedDict{K, D, Ord} where Ord<:Base.Order.Ordering where D where K}, Base.Order.ForwardOrdering, Tuple{Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(DataStructures.nextloc0), DataStructures.BalancedTree23{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{DataStructures.SDMKeyIteration{DataStructures.SortedDict{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}}, Type{Symbol}}, Int64, DataStructures.SAIterationState})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataStructures.SDMKeyIteration{DataStructures.SortedDict{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}}, Type{Symbol}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, DataStructures.SortedDict{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, DataStructures.SortedDict{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Base.keys), DataStructures.SortedDict{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Symbol}, DataStructures.SDMKeyIteration{DataStructures.SortedDict{String, Array{Union{Base.Missing, Float64}, 1}, Base.Order.ForwardOrdering}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Array{Float64, 1}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Array{Float64, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Array{Float64, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Array{Float64, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{Type{Base.Dict{String, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Array{Float64, 1}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Float64, 1}}, Array{Float64, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Array{Float64, 1}}, Tuple{Base.Pair{String, Array{Float64, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Array{T, 1} where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Array{Float64, 1}}, Type{String}, Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Array{T, 1} where T}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Array{T, 1} where T}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{T, 1} where T}, Array{Float64, 1}, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Array{T, 1} where T}, Base.Dict{String, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{T, 1} where T}, Array{Union{Base.Missing, Float64}, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Array{T, 1} where T}, Tuple{Base.Pair{String, Array{Float64, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}, Base.Pair{String, Array{Union{Base.Missing, Float64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.KeySet{String, Base.Dict{String, Array{T, 1} where T}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Array{T, 1} where T}, String})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#109")), Bool, Type{DataFrames.DataFrame}, Base.Dict{String, Array{T, 1} where T}})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, Base.Dict{String, Array{T, 1} where T}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Int64, Int64, Int64, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:ordered,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ordered,), Tuple{Bool}}, Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{NamedTuple{(:dv1, :dv2, :dv3, :cv1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:dv1, :dv2, :dv3, :cv1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:dv1, :dv2, :dv3, :cv1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##sortperm#396")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.sortperm), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:alg, :cols), T} where T<:Tuple}, Tuple{Nothing, Symbol}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Symbol, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Symbol}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Type{T} where T, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Symbol, Base.Order.Perm{Base.Order.ForwardOrdering, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Symbol}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, Base.Order.Perm{Base.Order.ForwardOrdering, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Type{T} where T, Base.Order.Perm{Base.Order.ForwardOrdering, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, CategoricalArrays.CategoricalValue{Int64, UInt32}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Tuple{Symbol, Symbol}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{Type{NamedTuple{(:alg, :cols), T} where T<:Tuple}, Tuple{Nothing, Tuple{Symbol, Symbol}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Tuple{Symbol, Symbol}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Tuple{Symbol, Symbol}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:rank, :chrom, :pos), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:rank, :chrom, :pos), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:rank, :chrom, :pos), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.issorted), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##issorted#394")), Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.issorted), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(Base.sort), DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##issorted")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(Base.issorted), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##order")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(DataFrames.order), Symbol})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.vect), DataFrames.UserColOrdering{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.UserColOrdering{Symbol}, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Symbol})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.UserColOrdering{Symbol}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.pairs), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.Order.Ordering, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(DataFrames._getcol), DataFrames.UserColOrdering{Symbol}})
precompile(Tuple{typeof(DataFrames.ordering), Symbol, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames._getcol), Symbol})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:alg, :cols), T} where T<:Tuple}, Tuple{Nothing, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), DataFrames.DataFrame, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##issorted#394")), Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.issorted), DataFrames.DataFrame, Tuple{DataFrames.UserColOrdering{Symbol}, Symbol, Symbol}})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:rev,), T} where T<:Tuple}, Tuple{Tuple{Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}})
precompile(Tuple{getfield(Base, Symbol("#kw##issorted")), NamedTuple{(:rev,), Tuple{Tuple{Bool, Bool, Bool}}}, typeof(Base.issorted), DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##issorted")), NamedTuple{(:rev,), Tuple{Tuple{Bool, Bool, Bool}}}, typeof(Base.issorted), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##issorted#394")), Array{Any, 1}, Function, Function, Tuple{Bool, Bool, Bool}, Base.Order.ForwardOrdering, typeof(Base.issorted), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.fill), Function, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{Base.Order.ForwardOrdering, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Any, 1}, Function, Function, Tuple{Bool, Bool, Bool}, Base.Order.ForwardOrdering})
precompile(Tuple{Type{Array{typeof(Base.isless), 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{typeof(Base.isless), 1}, Function})
precompile(Tuple{Type{Array{typeof(Base.identity), 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Array{typeof(Base.identity), 1}, Function})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Order.ForwardOrdering, 1}, Int64, Array{Base.Order.ForwardOrdering, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Order.Ordering, 1}, Int64, Array{Base.Order.ForwardOrdering, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Order.ForwardOrdering, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}}}, getfield(DataFrames, Symbol("#386#387"))}, Int64, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, 1}, Base.Order.ForwardOrdering, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, 1}, Base.Order.ForwardOrdering, Base.Generator{Base.Iterators.Zip{Tuple{Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}}}, getfield(DataFrames, Symbol("#386#387"))}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Order.ForwardOrdering, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Order.ForwardOrdering, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Base.Generator{Base.Iterators.Zip{Tuple{Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}}}, getfield(DataFrames, Symbol("#386#387"))}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Order.Ordering, 1}, Int64, Array{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, 1}, Int64, Array{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}}}, getfield(DataFrames, Symbol("#386#387"))}, Int64, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}}}, getfield(DataFrames, Symbol("#386#387"))}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#390#391")){Array{Base.Order.Ordering, 1}}}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Any, 1}, Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Base.Iterators.Zip{Tuple{Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Order.Ordering, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}}}, getfield(DataFrames, Symbol("#386#387"))}, Int64, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort")), NamedTuple{(:rev,), Tuple{Tuple{Bool, Bool, Bool}}}, typeof(Base.sort), DataFrames.DataFrame, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Tuple{Bool, Bool, Bool}, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Tuple{Symbol, Symbol, Symbol}, Function, Function, Tuple{Bool, Bool, Bool}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Symbol, 1}, Function, Function, Tuple{Bool, Bool, Bool}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Symbol, 1}, Array{typeof(Base.isless), 1}, Array{typeof(Base.identity), 1}, Array{Bool, 1}, Array{Base.Order.ForwardOrdering, 1}})
precompile(Tuple{Type{NamedTuple{(:alg, :cols), T} where T<:Tuple}, Tuple{Nothing, Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Tuple{Symbol, Symbol, Symbol}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:rev,), Tuple{Tuple{Bool, Bool, Bool}}}, typeof(Base.sort!), DataFrames.DataFrame, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort!#397")), Array{Any, 1}, Nothing, Function, Function, Tuple{Bool, Bool, Bool}, Base.Order.ForwardOrdering, typeof(Base.sort!), DataFrames.DataFrame, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.issorted), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##issorted#394")), Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.issorted), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:lt, :by, :rev, :order), T} where T<:Tuple}, Tuple{typeof(Base.isless), typeof(Base.identity), Bool, Base.Order.ForwardOrdering}})
precompile(Tuple{getfield(Base, Symbol("#kw##issorted")), NamedTuple{(:lt, :by, :rev, :order), Tuple{typeof(Base.isless), typeof(Base.identity), Bool, Base.Order.ForwardOrdering}}, typeof(Base.issorted), Array{Int64, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##issorted#1")), Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.issorted), Array{Int64, 1}})
precompile(Tuple{typeof(Base.issorted), Array{Int64, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Symbol, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Symbol}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Type{Int64}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.OrdinalRange{Int64, Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.issorted), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##issorted#394")), Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.issorted), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Int64, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Int64, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{Type{NamedTuple{(:alg, :cols), T} where T<:Tuple}, Tuple{Nothing, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Int64, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##sort!#397")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort!), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:by,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort")), NamedTuple{(:by,), Tuple{Symbol}}, typeof(Base.sort), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort")), NamedTuple{(:by,), Tuple{Symbol}}, typeof(Base.sort), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Symbol, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Int64, 1}})
precompile(Tuple{typeof(Random.shuffle), Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("##catch_stack#43")), Bool, typeof(Base.catch_stack), Task})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Symbol, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Symbol}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.DataFrame, Type{Float64}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Float64, Float64}, 1}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.sortperm), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##issorted")), NamedTuple{(:lt, :by, :rev, :order), Tuple{typeof(Base.isless), typeof(Base.identity), Bool, Base.Order.ForwardOrdering}}, typeof(Base.issorted), Array{Float64, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##issorted#1")), Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.issorted), Array{Float64, 1}})
precompile(Tuple{typeof(Base.issorted), Array{Float64, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.DataFrame, 1}, Int64})
precompile(Tuple{typeof(Base.sortperm), Array{Int64, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{Float64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, Float64}, 1}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.sortperm), Array{Tuple{Int64, Float64}, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Tuple{Int64, Float64}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Tuple{Int64, Float64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Float64}, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Float64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Float64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Float64}, 1}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Int64}, Type{Tuple{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, Int64}, 1}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sortperm), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Float64, Int64}, 1}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sortperm), Array{Tuple{Float64, Int64}, 1}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Docs.docerror), Any})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.:(==)), Module, WeakRef})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(Base.show_call), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Expr, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, LineNumberNode, Int64, Int64})
precompile(Tuple{typeof(Base.show_linenumber), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.parent), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#192#193")), Base.Iterators.Zip{Tuple{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Base.StepRange{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base._repeat_inner_outer), Array{Union{Base.Missing, Int64}, 1}, Nothing, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Array{Int64, 1}}}, typeof(Base.repeat), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._repeat), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unalias), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._repeat_inner_outer), Array{Int64, 1}, Nothing, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Array{Int64, 1}}}, typeof(Base.repeat), Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :x), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :x), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :x), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :x), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, Int64}, 1}, Vararg{Array{Union{Base.Missing, Int64}, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.BitArray{1}, Symbol})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Union{Base.Missing, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.minimum), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators.flatten), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Array{Array{Float64, 1}, 1}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Flatten{Array{Array{Float64, 1}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Ref{T} where T}, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Array{Union{Base.Missing, Float64}, 1}, Base.Val{2}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{typeof(Base.:(^))}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Array{Union{Base.Missing, Float64}, 1}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Array{Union{Base.Missing, Float64}, 1}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Float64, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Float64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Float64, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Float64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Array{Symbol, 1}, Function})
precompile(Tuple{typeof(DataFrames.do_call), typeof(Base.identity), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{Union}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Type, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{Union, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#222#224")){Array{Type, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Float64}, 1}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_interleave), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Tuple{Int64, Nothing}}}, Tuple{}, Tuple{Base.Missing, Base.Missing}})
precompile(Tuple{typeof(DataFrames._nrow), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Base.OneTo{Int64}})
precompile(Tuple{getfield(TestGrouping, Symbol("#10#68")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#10#68")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(DataFrames._combine_with_first), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Bool, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Array{Bool, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f1#56")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f1#56")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base._maximum), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.reduce_first), Function, Float64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{NamedTuple{(:xmax,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:xmax,), Tuple{Float64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:xmax,), Tuple{Float64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Float64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.append!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f2#57")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f2#57")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:xmax,), Tuple{Float64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:xmax,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:xmax,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:xmax,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f3#58")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f3#58")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), Float64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f4#59")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f4#59")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base._minimum), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Colon})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.wrap), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Array{Float64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:x1,), Tuple{Array{Float64, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f5#60")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f5#60")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.reshape), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, 1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#197#198")){Array{Float64, 2}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#197#198")){Array{Float64, 2}}}})
precompile(Tuple{typeof(DataFrames.wrap), Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:x1,), T} where T<:Tuple}, Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1,), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Tuple{Array{Float64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:x1,), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f6#61")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f6#61")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.hcat), Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:x1, :x2), T} where T<:Tuple}, Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1, :x2), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1, :x2), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1, :x2), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:x1, :x2), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f7#62")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f7#62")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Val{2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Base.Missing, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Float64, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Float64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Float64, 1}, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Float64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:x2,), T} where T<:Tuple}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x2,), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x2,), Tuple{Array{Float64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x2,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x2,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:x2,), Tuple{Array{Float64, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#f8#63")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#f8#63")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:x2,), Tuple{Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x2,), Tuple{Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.by), DataFrames.DataFrame, Array{Symbol, 1}, Function})
precompile(Tuple{getfield(TestGrouping, Symbol("#11#69")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#11#69")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Function})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#186#187")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}}, Base.Colon})
precompile(Tuple{typeof(Base.isequal), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#2#4")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#3#5")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{Type{Base.Dict{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Nothing}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Nothing}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Nothing}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Nothing}, Nothing, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.allunique), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.println), Test.Error})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Error})
precompile(Tuple{typeof(Base.print), Test.Error})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Error})
precompile(Tuple{typeof(Test.do_test), Test.Threw, Expr})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, Int64, UInt64})
precompile(Tuple{typeof(Base.getproperty), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#251")), Bool, Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:sort,), Tuple{Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#12#70")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#12#70")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#222#224")){Array{Union, 1}, Int64}, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Float64}, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Float64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.__cat), Array{Symbol, 1}, Tuple{Int64}, Tuple{Bool}, Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Colon, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.vcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Vararg{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##vcat#76")), Symbol, typeof(Base.vcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Vararg{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, typeof(Base.names)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, typeof(Base.names)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("##_vcat#82")), Symbol, typeof(DataFrames._vcat), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.map), Function, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#86#90")){Symbol}, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#86#90")){Symbol}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.by), Function, DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}, Base.Val{true}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, Int64}, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.isequal), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}, Int64, UInt64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64}})
precompile(Tuple{typeof(Base.mightalias), Base.BitArray{1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mightalias), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Broadcast.preprocess), Base.BitArray{1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{true}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#6#64")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#7#65")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#8#66")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, getfield(TestGrouping, Symbol("#9#67")){Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Int64, UInt64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Array{Int64, 1}, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.by), DataFrames.DataFrame, Array{Int64, 1}, Function})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:sort,), Tuple{Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.by), Function, DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Array{Bool, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Array{Bool, 1}, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.by), DataFrames.DataFrame, Array{Bool, 1}, Function})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:sort,), Tuple{Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(DataFrames.by), Function, DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:v1, :v2, :v3), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:v1, :v2, :v3), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:v1, :v2, :v3), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.mapcols), Type{Array{Int64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{Type{Array{Int64, 1}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.hash), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#254#261")){Bool}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64, UInt64})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}, CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Int64, UInt64})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{Int64}, Int64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Int64, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:v1, :v2), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Symbol, Symbol}, NamedTuple{(:v1, :v2), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:v1, :v2), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.by), Function, DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt16, 1}, Base.IndexLinear, Array{UInt8, 1}})
precompile(Tuple{Type{Base.Dict{String, UInt16}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt16}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt16}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt16}, UInt8, String})
precompile(Tuple{Type{Base.Dict{String, UInt16}}, Base.Dict{String, UInt8}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, UInt16}, String})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt32, 1}, Base.IndexLinear, Array{UInt16, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt32}, UInt16, String})
precompile(Tuple{Type{Base.Dict{String, UInt32}}, Base.Dict{String, UInt16}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt64, 1}, Base.IndexLinear, Array{UInt32, 1}})
precompile(Tuple{Type{Base.Dict{String, UInt64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt64}, UInt32, String})
precompile(Tuple{Type{Base.Dict{String, UInt64}}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, UInt64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt64}, UInt64, String})
precompile(Tuple{typeof(PooledArrays._label), Array{String, 1}, Type{String}, Type{UInt64}, Int64, Array{UInt64, 1}, Base.Dict{String, UInt64}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt32}, UInt32, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt16}, UInt16, String})
precompile(Tuple{typeof(PooledArrays._label), Array{String, 1}, Type{String}, Type{UInt16}, Int64, Array{UInt16, 1}, Base.Dict{String, UInt16}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt8}, UInt8, String})
precompile(Tuple{Type{PooledArrays.PooledArray{String, R, N, RA} where RA where N where R<:Integer}, Array{String, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{String, 1}})
precompile(Tuple{Type{PooledArrays.RefArray{R} where R}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt8, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt8, 1}}, Base.Dict{String, UInt8}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{String, UInt8}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{String, UInt8}})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{String, UInt8}})
precompile(Tuple{typeof(Base.copy), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#254#261")){Bool}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{CategoricalArrays.CategoricalString{UInt32}, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{String, Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{String, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{String, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), String})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{String}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{String, 1}, String})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{String, String, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, String, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{String, String, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, String, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{String, String, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(TestGrouping._levels!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:skipmissing,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skipmissing,), Tuple{Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:skipmissing,), Tuple{Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skipmissing,), Tuple{Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:skipmissing,), Tuple{Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{String, 1}, getfield(CategoricalArrays, Symbol("#98#105")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Integer, 1}, Int64, Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{UInt32, 1}, Base.Generator{Array{String, 1}, getfield(CategoricalArrays, Symbol("#98#105")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(CategoricalArrays, Symbol("#98#105")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt32, 1}, UInt32, Base.Generator{Tuple{Base.Pair{String, String}}, getfield(CategoricalArrays, Symbol("#99#106")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Int64})
precompile(Tuple{typeof(CategoricalArrays.recode!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Nothing, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.replace!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{String, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Integer, 1}, Base.Generator{Array{String, 1}, getfield(CategoricalArrays, Symbol("#98#105")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Integer, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{String, Array{String, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Array{String, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{String, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{String, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt8, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt8, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{typeof(Base.throw_boundserror), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{String, 1, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{String, 1, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{typeof(PooledArrays.unsafe_pool_push!), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.throw_boundserror), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.unaliascopy), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.copyto!), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(TestGrouping._levels!), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.similar), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt8, 1}}, Base.Dict{String, UInt8}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{String, 1, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base._replace!), getfield(Base, Symbol("#new#252")){Tuple{Base.Pair{String, String}}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.replace!), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Base.Pair{String, String}})
precompile(Tuple{getfield(TestGrouping, Symbol("#14#72")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#14#72")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.union!), Array{String, 1}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.append!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.OneTo{Int64}})
precompile(Tuple{getfield(TestGrouping, Symbol("#15#73")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#15#73")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x,), Tuple{CategoricalArrays.CategoricalString{UInt32}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x,), Tuple{CategoricalArrays.CategoricalString{UInt32}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x,), Tuple{CategoricalArrays.CategoricalString{UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x,), Tuple{CategoricalArrays.CategoricalString{UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#16#74")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#16#74")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copy), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:x,), Tuple{String}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#17#75")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#17#75")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{String, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{String, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.OneTo{Int64}})
precompile(Tuple{getfield(TestGrouping, Symbol("#18#76")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#18#76")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x,), Tuple{String}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x,), Tuple{String}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x,), Tuple{String}}, Tuple{Array{String, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x,), Tuple{String}}, Tuple{Array{String, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#19#77")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#19#77")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#20#78")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#20#78")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#21#79")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#21#79")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#22#80")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#22#80")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), Tuple{Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Tuple{Int64}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Tuple{Int64}}, Int64})
precompile(Tuple{Type{Array{Tuple{Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Tuple{Int64}}}, Tuple{Array{Tuple{Int64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Tuple{Int64}}}, Tuple{Array{Tuple{Int64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Tuple{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Int64}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Tuple{Int64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Tuple{Int64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(tuple), Tuple{Array{Int64, 1}}})
precompile(Tuple{Type{BoundsError}, Any, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Array{Int64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:x, :x1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :x1), Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :x1), Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Int64}, 1}, Array{Tuple{Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:z,), Tuple{Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:z,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#23#81")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#23#81")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Any, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Any, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.OneTo{Int64}})
precompile(Tuple{Type{NamedTuple{(:x, :z), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :z), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :z), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#24#82")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#24#82")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{typeof(Base.vcat), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Any, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(TestGrouping, Symbol("#25#83")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#25#83")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Float64, 1}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}}, NamedTuple{(:x1,), Tuple{Float64}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}}, NamedTuple{(:x1,), Tuple{Float64}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#26#84")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#26#84")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, String}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:a, :b), Tuple{Int64, String}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:a, :b), Tuple{Int64, String}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Int64, String}}, Tuple{Array{Int64, 1}, Array{String, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:a, :b), Tuple{Int64, String}}, Tuple{Array{Int64, 1}, Array{String, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Float64, String}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:a, :b), Tuple{Float64, String}}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Float64, String}}, Tuple{Array{Int64, 1}, Array{String, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}, Array{String, 1}}, NamedTuple{(:a, :b), Tuple{Float64, String}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}, Array{String, 1}}, NamedTuple{(:a, :b), Tuple{Float64, String}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Float64, String}}, Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:a, :b), Tuple{Float64, String}}, Tuple{Array{Float64, 1}, Array{String, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Float64, Base.Missing}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}, Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Float64, 1}, Array{String, 1}}, NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Float64, 1}, Array{String, 1}}, NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#27#85")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#27#85")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, Base.Missing}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:a, :b), Tuple{Int64, Base.Missing}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:a, :b), Tuple{Int64, Base.Missing}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Int64, Base.Missing}}, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:a, :b), Tuple{Int64, Base.Missing}}, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Float64, String}}, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, NamedTuple{(:a, :b), Tuple{Float64, String}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, NamedTuple{(:a, :b), Tuple{Float64, String}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:a, :b), Tuple{Float64, String}}, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:a, :b), Tuple{Float64, String}}, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{Base.Missing, String, String}})
precompile(Tuple{getfield(TestGrouping, Symbol("#28#86")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#28#86")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:x1,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:x1,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:x1,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:x1,), Tuple{Float64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1,), Tuple{Float64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Int64, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Int64, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#29#87")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#29#87")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, String}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Int64, String}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{String, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{String, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, String}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Float64, String}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Float64, String}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Int64, 1}, Array{String, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Int64, 1}, Array{String, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{String, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Base.Missing}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Union{Base.Missing, Float64}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Float64, Base.Missing}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{String, 1}, Array{Base.Missing, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Float64, 1}, Array{String, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Float64, 1}, Array{String, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, String}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Union{Base.Missing, String}, 1}, Array{Base.Missing, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#30#88")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#30#88")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Base.Missing}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Union{Base.Missing, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Int64, Base.Missing}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Base.Missing, 1}, Array{Base.Missing, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#229#230")){Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, String}, 1}, Base.IndexLinear, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Union{Base.Missing, String}, 1}, Array{String, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#31#89")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#31#89")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x1, :x2), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1, :x2), Tuple{Int64, Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1, :x2), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1, :x2), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x2, :x1), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x2, :x1), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:x, :x1, :x2), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :x1, :x2), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :x1, :x2), Tuple{Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:x1, :x2), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:x2, :x1), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#32#90")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#32#90")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#33#91")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#33#91")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#34#92")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#34#92")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#35#93")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#35#93")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x1,), Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.fill_row!), DataFrames.DataFrame, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#36#94")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#36#94")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#37#95")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#37#95")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(), Tuple{}}, Tuple{}, Int64, Tuple{}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(), Tuple{}}, Tuple{}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(), Tuple{}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{}, Int64, Tuple{}})
precompile(Tuple{getfield(TestGrouping, Symbol("#38#96")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#38#96")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(), Tuple{}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#39#97")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#39#97")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#40#98")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#40#98")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#41#99")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#41#99")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#222#224")){Array{Any, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#222#224")){Array{Any, 1}, Int64}, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{}, Int64, Tuple{}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{}})
precompile(Tuple{getfield(TestGrouping, Symbol("#42#100")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#42#100")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#43#101")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#43#101")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Array{Int64, 1}}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#44#102")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#44#102")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Array{Int64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1,), Tuple{Array{Int64, 1}}}, Tuple{Array{Int64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Array{Int64, 1}}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#45#103")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#45#103")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#46#104")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#46#104")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#47#105")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#47#105")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#48#106")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#48#106")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1, :x2), Tuple{Array{Int64, 1}, Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{getfield(TestGrouping, Symbol("#49#107")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#49#107")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#50#108")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Any, 1}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Any, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#54#112")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:A,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:A,), Tuple{Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A,), Tuple{Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:X,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#55#113")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:A, :X), T} where T<:Tuple}, Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:A, :X), Tuple{Array{Any, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :X), Tuple{Array{Any, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, Base.Missing, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, Base.Missing, String, Base.Missing, String, String}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt8}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt8}, Base.Missing})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt16}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, String}, UInt16}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt16}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt16}, UInt8, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt16}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt16}, UInt8, String})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt16}}, Base.Dict{Union{Base.Missing, String}, UInt8}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt16}, Base.Missing})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt32}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, String}, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt32}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt32}, UInt16, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt32}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt32}, UInt16, String})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt32}}, Base.Dict{Union{Base.Missing, String}, UInt16}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt32}, Base.Missing})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, String}, UInt64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt64}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt64}, UInt32, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt64}, UInt32, String})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt64}}, Base.Dict{Union{Base.Missing, String}, UInt32}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt64}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt64}, UInt64, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt64}, UInt64, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt64}, String})
precompile(Tuple{typeof(PooledArrays._label), Array{Union{Base.Missing, String}, 1}, Type{Union{Base.Missing, String}}, Type{UInt64}, Int64, Array{UInt64, 1}, Base.Dict{Union{Base.Missing, String}, UInt64}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt32}, UInt32, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt32}, UInt32, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt32}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt16}, UInt16, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt16}, UInt16, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt16}, String})
precompile(Tuple{typeof(PooledArrays._label), Array{Union{Base.Missing, String}, 1}, Type{Union{Base.Missing, String}}, Type{UInt16}, Int64, Array{UInt16, 1}, Base.Dict{Union{Base.Missing, String}, UInt16}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, String}, UInt8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt8}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt8}, UInt8, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, UInt8}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, String}, UInt8}, UInt8, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, UInt8}, String})
precompile(Tuple{Type{PooledArrays.PooledArray{Union{Base.Missing, String}, R, N, RA} where RA where N where R<:Integer}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt8, 1}}, Base.Dict{Union{Base.Missing, String}, UInt8}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(PooledArrays.unsafe_pool_push!), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.Missing})
precompile(Tuple{typeof(PooledArrays.unsafe_pool_push!), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.throw_boundserror), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Union{Base.Missing, String}, UInt8}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Union{Base.Missing, String}, UInt8}})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{Union{Base.Missing, String}, UInt8}})
precompile(Tuple{typeof(Base.unaliascopy), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.copyto!), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(TestGrouping._levels!), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.similar), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt8, 1}}, Base.Dict{Union{Base.Missing, String}, UInt8}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{Base.Missing, String, String, String}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, Base.Missing, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{String, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{Base.Missing, String, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Missing, String, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{Base.Missing, String, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{Base.Missing, String, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(TestGrouping.isequal_unordered), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{String, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Base.Missing, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{String, Base.Missing, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:sort,), Tuple{Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:sort,), Tuple{Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(Base.issorted), Array{Union{Base.Missing, String}, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.issorted), Array{Union{Base.Missing, String}, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{getfield(Base, Symbol("#kw##issorted")), NamedTuple{(:lt, :by, :rev, :order), Tuple{typeof(Base.isless), typeof(Base.identity), Bool, Base.Order.ForwardOrdering}}, typeof(Base.issorted), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}}, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(CategoricalArrays.refs), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mightalias), Array{UInt32, 1}, Base.SubArray{UInt32, 1, Array{UInt32, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{UInt32, 1, Array{UInt32, 1}, Tuple{Array{Int64, 1}}, false}}, Array{UInt32, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt32, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt32, 1}, Base.SubArray{UInt32, 1, Array{UInt32, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, String}, 1}, Array{String, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Base.Missing, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, CategoricalArrays.CategoricalString{UInt32}, Base.Missing})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, CategoricalArrays.CategoricalString{UInt32}, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.copy), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{typeof(Base.issorted), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.issorted), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{getfield(Base, Symbol("#kw##issorted")), NamedTuple{(:lt, :by, :rev, :order), Tuple{typeof(Base.isless), typeof(Base.identity), Bool, Base.Order.ForwardOrdering}}, typeof(Base.issorted), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#254#261")){Bool}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Union{Base.Missing, String}, 1}, Random.SamplerSimple{Array{Union{Base.Missing, String}, 1}, Random.SamplerRangeFast{UInt64, Int64}, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.rand), Array{Union{Base.Missing, String}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.mapcols), Type{Array{Union{Base.Missing, String}, 1}}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, Array{String, 1}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{Base.Missing, String}})
precompile(Tuple{typeof(Base.vect), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Vararg{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, N} where N})
precompile(Tuple{typeof(Base.isequal), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(TestGrouping.isequal_unordered), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Type{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.Generator{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#86#90")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Generator{Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#79#81")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, getfield(DataFrames, Symbol("#78#80"))}})
precompile(Tuple{getfield(Base, Symbol("#kw##reduce")), NamedTuple{(:cols,), Tuple{Symbol}}, typeof(Base.reduce), typeof(Base.vcat), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, String}, 1}, Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.issorted), Base.UnitRange{Int64}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#194#195")), Base.Iterators.Zip{Tuple{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.Colon})
precompile(Tuple{typeof(Base.isequal), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:Key1, :Key2, :Key3, :Value), T} where T<:Tuple}, Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Key1, :Key2, :Key3, :Value), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Order.lt), DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}}, Int64, UInt64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Int64}, Random.SamplerType{Int64}})
precompile(Tuple{typeof(Base.rand), Type{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Type{Int64}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.sum)}}, Any, Any})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, typeof(Base.sum)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, typeof(Base.sum)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), Base.Pair{Symbol, typeof(Base.sum)}, DataFrames.DataFrame, Symbol})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Tuple{Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Int64, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Int64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:makeunique,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}})
precompile(Tuple{Type{NamedTuple{(:c_sum,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:c_sum,), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:c_sum,), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#115#195")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#115#195")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:c_sum,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:c_sum,), Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:c_sum,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:c_sum,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:c_sum,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#116#196")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#116#196")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Broadcast.preprocess), Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.exp), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(TestGrouping, Symbol("#114#194")), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#114#194")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Array{Float64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Float64, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Float64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}})
precompile(Tuple{Type{NamedTuple{(:c_function,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:c_function,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:c_function,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#117#197")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#117#197")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:c_function,), T} where T<:Tuple}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:c_function,), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:c_function,), Tuple{Array{Float64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:c_function,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:c_function,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:c_function,), Tuple{Array{Float64, 1}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#118#198")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#118#198")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, typeof(Base.sum)}, Vararg{Base.Pair{Symbol, typeof(Base.sum)}, N} where N})
precompile(Tuple{Type{NamedTuple{(:b_sum, :c_sum), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:b_sum, :c_sum), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:b_sum, :c_sum), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#119#199")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#119#199")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:b_sum, :c_sum), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:b_sum, :c_sum), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:b_sum, :c_sum), Tuple{Int64, Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:b_sum, :c_sum), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:b_sum, :c_sum), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#120#200")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#120#200")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.identity)}}, Any, Any})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, B} where B, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.identity)}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){typeof(Base.identity)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames.wrap), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:x1,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Int64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:x1,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Int64, Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}})
precompile(Tuple{typeof(Base._collect), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base._similar_for), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Type{Array{Float64, 1}}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Int64, Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Float64, 1}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64, Int64})
precompile(Tuple{typeof(Base.all), Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{T, 1} where T, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}})
precompile(Tuple{Type{Array{Base.Pair{Symbol, Function}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, Function}, 1}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, Function}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, Function}, 1}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Array{Base.Pair{Symbol, Function}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, Function}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:b_function, :c_identity), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:b_function, :c_identity), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:b_function, :c_identity), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:b_function, :c_identity), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#121#201")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#121#201")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:b_function, :c_identity), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:b_function, :c_identity), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:b_function, :c_identity), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:b_function, :c_identity), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:b_function, :c_identity), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:b_function, :c_identity), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#122#202")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#122#202")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:c_sum,), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#123#203"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#123#203"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#123#203"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#123#203")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:c_sum,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:c_sum,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#124#204"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#124#204"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#124#204"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#124#204"))}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#124#204")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#125#205")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#125#205")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Function})
precompile(Tuple{getfield(TestGrouping, Symbol("#126#206")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#126#206")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:c_function,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#127#207"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#127#207"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#127#207"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#127#207")), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#127#207")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:c_function,), Tuple{Array{Float64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:c_function,), Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#128#208"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#128#208"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#128#208"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#128#208"))}})
precompile(Tuple{getfield(TestGrouping, Symbol("#128#208")), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#128#208")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#129#209")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#129#209")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.exp), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.exp), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#130#210")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#130#210")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:b_sum, :c_sum), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Tuple{Symbol, Symbol}, Function})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#131#211"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#131#211"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#131#211"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:b, :c), T} where T<:Tuple}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{NamedTuple{(:b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#199#200")){Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#131#211")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:b_sum, :c_sum), Tuple{Int64, Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:b_sum, :c_sum), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#132#212"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#132#212"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#132#212"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#132#212"))}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#132#212")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#133#213")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#133#213")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#134#214")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#134#214")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Pair{Symbol, Function}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:b_function, :c_identity), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.identity)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#135#215")){getfield(TestGrouping, Symbol("#114#194"))}}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#135#215")){getfield(TestGrouping, Symbol("#114#194"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#135#215")){getfield(TestGrouping, Symbol("#114#194"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#135#215")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:b_function, :c_identity), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:b_function, :c_identity), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#136#216")){getfield(TestGrouping, Symbol("#114#194"))}}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#136#216")){getfield(TestGrouping, Symbol("#114#194"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#136#216")){getfield(TestGrouping, Symbol("#114#194"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#136#216")){getfield(TestGrouping, Symbol("#114#194"))}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#136#216")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#137#217")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#137#217")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#138#218")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#138#218")){getfield(TestGrouping, Symbol("#114#194"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.map), Base.Pair{Symbol, typeof(Base.sum)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#139#219")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#139#219")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#140#220"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#140#220"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#140#220"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#140#220")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#141#221")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#141#221")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:c_function,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:c_function,), Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:c_function,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:c_function,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:c_function,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#142#222"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#142#222"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#142#222"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#142#222")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:z,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:z,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:z,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:z,), Tuple{Int64}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#143#223")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#143#223")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:z,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:z,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:z,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#144#224"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#144#224"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#144#224"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#144#224")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), DataFrames.DataFrame, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#145#225")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#145#225")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, typeof(Base.identity)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Symbol, typeof(Base.identity)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), typeof(Base.identity), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#146#226")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#146#226")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:c_identity,), T} where T<:Tuple}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:c_identity,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:c_identity,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:c_identity,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Int64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:c_identity,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:c_identity,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#147#227"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#147#227"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#147#227"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#147#227")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:z,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:z,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Int64, 1}}, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:z,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:z,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:z,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#148#228")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#148#228")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:z,), T} where T<:Tuple}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:z,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:z,), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#149#229")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#149#229")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:xyz,), Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:xyz,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:xyz,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:xyz,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#150#230"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#151#231")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#151#231")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#152#232"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Tuple{Int64}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Tuple{Int64}}}, Tuple{Array{Tuple{Int64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Tuple{Int64}, 1}, 1}, Array{Tuple{Int64}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Tuple{Int64}, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Tuple{Int64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Tuple{Int64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Tuple{Int64}, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Array{Tuple{Int64}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Tuple{Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Tuple{Int64}, 1}, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("#153#233")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#153#233")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:xyz,), Tuple{Tuple{Int64}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:xyz,), Tuple{Tuple{Int64}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:xyz,), Tuple{Tuple{Int64}}}, Tuple{Array{Tuple{Int64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:xyz,), Tuple{Tuple{Int64}}}, Tuple{Array{Tuple{Int64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Tuple{Int64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Array{Tuple{Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Tuple{Int64}, 1, Array{Tuple{Int64}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Tuple{Int64}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Tuple{Int64}, 1, Array{Tuple{Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Tuple{Int64}, 1, Array{Tuple{Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#154#234"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#154#234"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#154#234"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._combine), NamedTuple{#s35, #s34} where #s34<:Tuple{Vararg{Base.Pair{A, B} where B where A, N} where N} where #s35, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#154#234"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#154#234"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#154#234"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#154#234"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#155#235"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#155#235"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#155#235"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#155#235"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#155#235"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#155#235"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#155#235"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#156#236"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#156#236"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#156#236"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#156#236"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#156#236"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#156#236"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#156#236"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#157#237"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#157#237"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#157#237"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#157#237")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:z, :xzz), Tuple{Int64, Array{Int64, 1}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#158#238")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#158#238")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#159#239"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#160#240")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#160#240")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#161#241"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#162#242")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#162#242")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:c_function,), T} where T<:Tuple}, Tuple{Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:c_function,), Tuple{Tuple{Int64}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:c_function,), Tuple{Tuple{Int64}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:c_function,), Tuple{Tuple{Int64}}}, Tuple{Array{Tuple{Int64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:c_function,), Tuple{Tuple{Int64}}}, Tuple{Array{Tuple{Int64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#163#243"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#164#244"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#165#245"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#166#246"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._combine), Tuple{Vararg{Base.Pair{A, B} where B where A, N} where N}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Function})
precompile(Tuple{Type{Base.Pair{Int64, typeof(Base.sum)}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Int64, typeof(Base.sum)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Int64, typeof(Base.sum)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#140#220"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#140#220"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Int64, getfield(TestGrouping, Symbol("#140#220"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#142#222"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#142#222"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Int64, getfield(TestGrouping, Symbol("#142#222"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#144#224"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#144#224"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Int64, getfield(TestGrouping, Symbol("#144#224"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, typeof(Base.identity)}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Int64, typeof(Base.identity)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Int64, typeof(Base.identity)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#147#227"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#147#227"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Int64, getfield(TestGrouping, Symbol("#147#227"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Int64, typeof(Base.sum)}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, typeof(Base.sum)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, Base.Generator{Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#154#234"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#154#234"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#154#234"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#154#234"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#154#234"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#154#234"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#155#235"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#155#235"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#155#235"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#155#235"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#155#235"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#155#235"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#156#236"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#156#236"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#156#236"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#156#236"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#156#236"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#156#236"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#157#237"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#157#237"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Int64, getfield(TestGrouping, Symbol("#157#237"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, typeof(Base.sum)}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Tuple{Int64}, 1}}, Base.Generator{Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#167#247"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#167#247")), NamedTuple{(:b, :c), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#167#247")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames.append_rows!), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames._nrow), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#168#248")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#168#248")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:y, :z), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Tuple{Array{Float64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#169#249"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 2}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._typed_hcat), Type{Float64}, Tuple{Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(TestGrouping, Symbol("#169#249")), NamedTuple{(:b, :c), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#169#249")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.size), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1, :x2), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1, :x2), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#170#250")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#170#250")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#171#251"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#172#252")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#172#252")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#174#254")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#174#254")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:xyz, :xzz), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:xyz, :xzz), Tuple{Int64, Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:xyz, :xzz), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:xyz, :xzz), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#175#255")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#175#255")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#176#256"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#176#256"))}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#176#256"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#176#256"))}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#176#256"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, B} where B, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#176#256"))}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#176#256"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#177#257")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#177#257")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.first), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#178#258"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#178#258")), NamedTuple{(:b, :c), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#178#258")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#179#259"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#179#259"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#179#259"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#179#259"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#179#259"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:y, :z), Tuple{Array{Float64, 1}, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#179#259")), NamedTuple{(:b, :c), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#179#259"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#180#260")), NamedTuple{(:b, :c), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#180#260"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#181#261"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#182#262")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#182#262")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{getfield(TestGrouping, Symbol("#189#269")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#189#269")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{Symbol, Function}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Pair{Symbol, Function}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Pair{Symbol, Function}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Pair{Symbol, typeof(Base.sum)}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Base.Pair{Symbol, Function}, 1, Array{Base.Pair{Symbol, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Base.Pair{Symbol, Function}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Symbol, Function}, 1, Array{Base.Pair{Symbol, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Symbol, Function}, 1, Array{Base.Pair{Symbol, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Symbol, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, Function}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#190#270"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#191#271")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#191#271")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:b_sum, :c_function), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:b_sum, :c_function), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:b_sum, :c_function), Tuple{Int64, Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:b_sum, :c_function), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:b_sum, :c_function), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Pair{Symbol, Function}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Symbol, Function}, 1, Array{Base.Pair{Symbol, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#192#272")), NamedTuple{(:b, :c), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#192#272"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#193#273")), NamedTuple{(:b, :c), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#193#273"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :c), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Array{Symbol, 1}, Function})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#167#247"))}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Array{Symbol, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#169#249"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#178#258"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#179#259"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#179#259"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#179#259"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#179#259"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, Base.Generator{Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Tuple{Int64, Int64}, Function})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#167#247"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#169#249"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#176#256"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#176#256"))}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#176#256"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#176#256"))}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Int64, B} where B, 1}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#176#256"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, B} where B, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#176#256"))}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, B} where B, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Base.Generator{Array{Base.Pair{Int64, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#178#258"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#179#259"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#179#259"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#179#259"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#179#259"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#179#259"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, typeof(Base.sum)}})
precompile(Tuple{Type{Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{Int64, Function}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Pair{Int64, Function}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Pair{Int64, Function}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Pair{Int64, typeof(Base.sum)}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Base.Pair{Int64, Function}, 1, Array{Base.Pair{Int64, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Base.Pair{Int64, Function}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Int64, Function}, 1, Array{Base.Pair{Int64, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Int64, typeof(Base.sum)}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Int64, Function}, 1, Array{Base.Pair{Int64, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, Function}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Int64, Function}, 1}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Int64, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Int64, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Int64, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, Function}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Pair{Int64, Function}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Int64, Function}, 1, Array{Base.Pair{Int64, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Int64, Function}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Base.Generator{Array{Base.Pair{Int64, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, Base.Generator{Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.UnitRange{Int64}, Function})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#167#247"))}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#169#249"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#178#258"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#179#259"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#179#259"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#179#259"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#179#259"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#179#259"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, Base.Generator{Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Array{Int64, 1}, Function})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#167#247"))}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#169#249"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#178#258"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#179#259"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#179#259"))}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#179#259"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#179#259"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, Base.Generator{Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Array{Bool, 1}, Function})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#167#247"))}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Array{Bool, 1}}, Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#169#249"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.vect), Array{Bool, 1}, Vararg{Array{Bool, 1}, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Bool, Function})
precompile(Tuple{Type{Base.Pair{Bool, typeof(Base.sum)}}, Any, Any})
precompile(Tuple{typeof(Base.getindex), Array{Array{Bool, 1}, 1}, Int64})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, typeof(Base.sum)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, typeof(Base.sum)}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, typeof(Base.sum)}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{A, typeof(Base.sum)} where A, 1}, Base.Generator{Array{Base.Pair{A, typeof(Base.sum)} where A, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{A, typeof(Base.sum)} where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{A, typeof(Base.sum)} where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{A, typeof(Base.sum)} where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{A, typeof(Base.sum)} where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Bool, typeof(Base.sum)}})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#173#253"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz, :xzz), T} where T<:Tuple}, Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#173#253"))}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#173#253"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#173#253"))}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{A, B} where B where A, 1}, Base.Generator{Array{Base.Pair{A, B} where B where A, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{A, B} where B where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{A, B} where B where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{A, B} where B where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{A, B} where B where A, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#173#253"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#178#258"))}}, Any, Any})
precompile(Tuple{typeof(DataFrames._combine), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Array{Array{Bool, 1}, 1}, Function})
precompile(Tuple{Type{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#179#259"))}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Array{Array{Bool, 1}, 1}}, Array{Array{Bool, 1}, 1}})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#179#259"))}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{Bool, 1}, 1}, Int64, Array{Array{Bool, 1}, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Array{Array{Bool, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#179#259"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#179#259"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:xyz,), T} where T<:Tuple}, Tuple{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, Base.Generator{Array{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{Array{Bool, 1}, Function}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Base.Pair{Array{Bool, 1}, Function}, 1, Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Array{Bool, 1}, Function}, 1, Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Array{Bool, 1}, Function}, 1, Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, Function}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:b,), T} where T<:Tuple}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{NamedTuple{(:b,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#183#263"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b,), Tuple{Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b,), Tuple{Array{Int64, 1}}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, Function}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:c,), T} where T<:Tuple}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{NamedTuple{(:c,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#184#264"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:c,), Tuple{Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:c,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:c,), Tuple{Array{Int64, 1}}}, Tuple{Symbol}})
precompile(Tuple{getfield(TestGrouping, Symbol("#185#265")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#185#265")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:x1, :x2), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}})
precompile(Tuple{typeof(Base.__cat), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Array{Bool, 1}, Function}, 1, Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.Pair{Array{Bool, 1}, Function}, 1, Array{Base.Pair{Array{Bool, 1}, Function}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#186#266"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b,), Tuple{Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#187#267"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:c,), Tuple{Array{Int64, 1}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#188#268")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#188#268")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, Any, Any})
precompile(Tuple{typeof(Base.vcat), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Array{Bool, 1}, B} where B, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}}})
precompile(Tuple{typeof(Base.map), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#140#220"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#142#222"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#144#224"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, typeof(Base.identity)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#147#227"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#150#230"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#152#232"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#154#234"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#155#235"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#156#236"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Symbol, getfield(TestGrouping, Symbol("#157#237"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#159#239"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#161#241"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#163#243"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#164#244"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#165#245"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#166#246"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Int64, typeof(Base.sum)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#140#220"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#142#222"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#144#224"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Int64, typeof(Base.identity)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#147#227"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#150#230"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#152#232"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#154#234"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#155#235"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#156#236"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Int64, getfield(TestGrouping, Symbol("#157#237"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, typeof(Base.sum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#159#239"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#161#241"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#163#243"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#164#244"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#165#245"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#166#246"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#176#256"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#190#270"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Symbol, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Tuple{Symbol, Symbol}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Symbol, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#176#256"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Int64, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, typeof(Base.sum)}, Base.Pair{Int64, getfield(TestGrouping, Symbol("#190#270"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Int64, getfield(TestGrouping, Symbol("#114#194"))}, Base.Pair{Int64, typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Tuple{Int64, Int64}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Base.UnitRange{Int64}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Int64, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#167#247"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#169#249"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#171#251"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz, :xzz), Tuple{Base.Pair{Bool, typeof(Base.sum)}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#173#253"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#178#258"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#179#259"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:xyz,), Tuple{Base.Pair{Array{Array{Bool, 1}, 1}, getfield(TestGrouping, Symbol("#180#260"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Bool, 1}, Function}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Array{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#181#261"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#183#263"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#184#264"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#186#266"))}, Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#187#267"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#192#272"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Tuple{Base.Pair{Array{Bool, 1}, getfield(TestGrouping, Symbol("#193#273"))}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Expr}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Expr, 1}, typeof(Base.esc)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Expr, 1}, typeof(Base.esc)}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Expr, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Test.testset_forloop), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Base.push!), Array{Expr, 1}, Expr})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Union{Base.Missing, Int64}, 1}, Random.SamplerSimple{Array{Union{Base.Missing, Int64}, 1}, Random.SamplerRangeFast{UInt64, Int64}, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.rand), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.rand), Random.MersenneTwister, Random.SamplerType{Base.Complex{Int64}}})
precompile(Tuple{typeof(Base.rand), Random.MersenneTwister, Type{Base.Complex{Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Type{Base.Complex{Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :x1, :x2), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :x1, :x2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :x1, :x2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :x1, :x2), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Base.Complex{Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:skipmissing, :sort), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:skipmissing, :sort), Tuple{Bool, Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:skipmissing, :sort), Tuple{Bool, Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.length), Array{Base.Complex{Int64}, 1}})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.sum)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.add_sum), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.add_sum), typeof(Base.zero), typeof(Base.sum), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.reducedim_initarray), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Int64, Int8}, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{Type{Array{Union{Int64, Int8}, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Int64, Int8}, 1}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Union{Int64, Int8}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Int64, Int8}, 1}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.add_sum), Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.add_sum), typeof(Base.zero), typeof(Base.sum), Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Int64, Int8}, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64, Int8}, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Base.Missing, Int64, Int8}, 1}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Union{Base.Missing, Int64, Int8}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Int64, Int8}, 1}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.add_sum), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.add_sum), typeof(Base.zero), typeof(Base.sum), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.reducedim_initarray), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.add_sum), Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.convert), Type{Base.Missing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Base.Missing}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.wrap), Base.Missing})
precompile(Tuple{typeof(Core.Compiler.iterate), NamedTuple{(:x1,), Tuple{Base.Missing}}})
precompile(Tuple{typeof(Core.Compiler.iterate), NamedTuple{(:x1,), Tuple{Base.Missing}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Base.Missing}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Base.Missing, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Base.Missing, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Base.Missing, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Union{Base.Missing, Int64}, 1}, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Base.Missing, 1}}, NamedTuple{(:x1,), Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Base.Missing, 1}}, NamedTuple{(:x1,), Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Base.sum), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##fillfirst!#201")), Bool, typeof(DataFrames.fillfirst!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.SkipMissing{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.prod)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.prod)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.prod)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.prod)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.prod)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), Nothing, Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), typeof(Base.identity), typeof(Base.mul_prod), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.mul_prod), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.mul_prod), Base.IndexLinear, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.mul_prod), typeof(Base.one), typeof(Base.prod), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), Nothing, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.mul_prod), Base.IndexLinear, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.mul_prod), typeof(Base.one), typeof(Base.prod), Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), Nothing, Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.mul_prod), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.mul_prod), Base.IndexLinear, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.mul_prod), typeof(Base.one), typeof(Base.prod), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), Nothing, Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mul_prod), Int64, Int64})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Base.prod), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.mul_prod), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.maximum)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.maximum)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.maximum)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.reduce_first), Function, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Int64, Int8}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Array{Union{Int64, Int8}, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64, Int8}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64, Int8}, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Array{Union{Base.Missing, Int64, Int8}, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Base.maximum), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.minimum)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.minimum)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.minimum)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.minimum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.minimum)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Int64, Int8}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64, Int8}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Base.minimum), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Statistics.mean)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Statistics.mean)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Statistics.mean)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Statistics.mean)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Statistics.mean)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getproperty), Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Function, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getproperty), Array{Union{Base.Missing, Int64}, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Base.Missing, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Base.Missing}, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getproperty), Array{Union{Int64, Int8}, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Function, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Tuple{Symbol}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Function, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getproperty), Array{Union{Base.Missing, Int64, Int8}, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Function, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._mean), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.first), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Base.Missing, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Union{Base.Missing, Float64}, 1}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Base.Missing, 1}}, NamedTuple{(:x1,), Tuple{Float64}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Base.Missing, 1}}, NamedTuple{(:x1,), Tuple{Float64}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Union{Base.Missing, Float64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Union{Base.Missing, Float64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Statistics.mean), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Reduce{typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, typeof(Base.:(/))}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, typeof(Base.:(/))}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.mean), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Statistics.var)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Statistics.var)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Statistics.var)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Statistics.var)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Statistics.var)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), Nothing, Function, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Float64, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._var), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_first), getfield(Statistics, Symbol("#8#9")){Float64}, Function, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), Nothing, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.zeros), Type{Float64}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Float64, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._var), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.something), Nothing, Float64})
precompile(Tuple{typeof(Statistics._varm), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Float64, Bool, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("#kw##varm")), NamedTuple{(:corrected,), Tuple{Bool}}, typeof(Statistics.varm), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Float64})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.real), Float64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), Nothing, Function, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Float64, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Statistics._var), Base.SubArray{Union{Int64, Int8}, 1, Array{Union{Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Int64}, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), Nothing, Function, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Float64, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._var), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Statistics._varm), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Float64, Bool, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("#kw##varm")), NamedTuple{(:corrected,), Tuple{Bool}}, typeof(Statistics.varm), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Float64})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.real), Type{T} where T})
precompile(Tuple{typeof(Base.zero), Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Float64}, 1}, Float64})
precompile(Tuple{typeof(Base.zeros), Type{Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Union{Base.Missing, Float64}, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Base.Missing, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(DataFrames, Symbol("#206#209"))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.var)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.something), Nothing, Base.Missing})
precompile(Tuple{getfield(Statistics, Symbol("#kw##varm")), NamedTuple{(:corrected,), Tuple{Bool}}, typeof(Statistics.varm), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Missing})
precompile(Tuple{typeof(Base.mapreduce_first), getfield(Statistics, Symbol("#8#9")){Base.Missing}, Function, Base.Missing})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Base.Missing}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.real), Base.Missing})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Statistics.var), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Statistics.var), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Int64, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Float64, 1}}, typeof(Base.:(+)), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.var), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Statistics.std)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Statistics.std)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Statistics.std)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Statistics.std)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map!), typeof(Base.sqrt), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._std), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sqrt), Tuple{Float64}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sqrt), Tuple{Float64}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sqrt), Tuple{Float64}}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._std), Base.SubArray{Union{Union{Base.Missing, Int64}, Int8}, 1, Array{Union{Base.Missing, Int64, Int8}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.map!), typeof(Base.sqrt), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.std)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Missing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sqrt), Tuple{Base.RefValue{Base.Missing}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sqrt), Tuple{Base.RefValue{Base.Missing}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sqrt), Tuple{Base.RefValue{Base.Missing}}}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Statistics.std), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Statistics.std), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Statistics.std), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.first)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.first)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Base.first), Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.first)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.first)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.first)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, Array{Union{Int64, Int8}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, Array{Union{Base.Missing, Int64, Int8}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Base.first), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Base.first), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##fillfirst!#201")), Bool, typeof(DataFrames.fillfirst!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.last)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.last)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Base.last), Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.last)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.last)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.last)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#276#290")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(∘)), typeof(Base.last), Function})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Base.last), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#277#291")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, typeof(Base.length)}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.length)}}})
precompile(Tuple{Type{Core.Compiler.Signature}, DataFrames.Aggregate{typeof(Base.length), Nothing}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, typeof(Base.length)}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.length)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, typeof(Base.length)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Tuple{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.length)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#274#288")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, Array{Union{Base.Missing, Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, Array{Union{Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Int64, Int8}, 1}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, Array{Union{Base.Missing, Int64, Int8}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#275#289")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64, Int8}, 1}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Nothing, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Complex{Int64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Nothing, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.fill!), Array{Base.Complex{Int64}, 1}, Base.Complex{Int64}})
precompile(Tuple{typeof(Base.reducedim_init), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Base.Complex{Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Nothing, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Base.Complex{Int64}, 1}, 1}, Array{Base.Complex{Int64}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Base.Complex{Int64}, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Base.Complex{Int64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Base.Complex{Int64}, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Array{Base.Complex{Int64}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Base.Complex{Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Base.Complex{Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.Complex{Int64}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Base.Complex{Int64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Base.Complex{Int64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Base.Complex{Int64}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Base.Complex{Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Base.Complex{Int64}}}, Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.wrap), Base.Complex{Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Base.Complex{Int64}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Base.Complex{Int64}}, Int64})
precompile(Tuple{Type{Array{Base.Complex{Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Complex{Int64}}}, Tuple{Array{Base.Complex{Int64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Complex{Int64}}}, Tuple{Array{Base.Complex{Int64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Base.Complex{Int64}, 1}, Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Base.Complex{Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), Nothing, Nothing, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), typeof(Base.identity), typeof(Base.mul_prod), Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Base.Complex{Int64}}}, Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Base.Complex{Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Complex{Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getproperty), Array{Base.Complex{Int64}, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Base.Complex{Int64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Function, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}, Base.Iterators.Zip{Tuple{Array{Base.Complex{Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Complex{Float64}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Complex{Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Complex{Int64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Statistics.mean)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Base.Complex{Float64}, 1}, 1}, Array{Base.Complex{Float64}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Base.Complex{Float64}, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Base.Complex{Float64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Base.Complex{Float64}, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Array{Base.Complex{Float64}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Array{Base.Complex{Float64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Base.Complex{Float64}, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Base.Complex{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.Complex{Float64}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Base.Complex{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Base.Complex{Float64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames.wrap), Base.Complex{Float64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Base.Complex{Float64}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Base.Complex{Float64}}, Int64})
precompile(Tuple{Type{Array{Base.Complex{Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Complex{Float64}}}, Tuple{Array{Base.Complex{Float64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Complex{Float64}}}, Tuple{Array{Base.Complex{Float64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Base.Complex{Float64}, 1}, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Base.Complex{Int64}, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), Nothing, Function, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Base.Complex{Float64}, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Base.Complex{Float64}}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Statistics._var), Base.SubArray{Base.Complex{Int64}, 1, Array{Base.Complex{Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, Array{Base.Complex{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, Array{Base.Complex{Int64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#278#292")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Bool}, Int64, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Int64, 1, V, C, U, U} where U where U where C where V}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Generator{Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Int64})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(DataFrames.wrap), CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.fillfirst!), Function, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Function, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##fillfirst!#201")), Bool, typeof(DataFrames.fillfirst!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.SkipMissing{Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.throw_boundserror), Array{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Union, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Union, Bool}, Int64, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.reduce_first), Function, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Int64})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{Int64, 1, R, V, C, U} where U where C where V where R<:Integer}, Array{UInt32, 1}, CategoricalArrays.CategoricalPool{Int64, UInt32, CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(DataFrames.fillfirst!), Function, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##fillfirst!#201")), Bool, typeof(DataFrames.fillfirst!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.SkipMissing{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.Generator{Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}, Int64})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Base.Missing}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Base.Missing, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Tuple{Array{Base.Missing, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, 1}}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Base.Missing, 1}}, NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Base.Missing, 1}}, NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalValue{Int64, UInt32}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Function, Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Function, Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Function, Symbol})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Function})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.RefValue{Base.Missing}}})
precompile(Tuple{typeof(CategoricalArrays.refs), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.Missing})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{Base.Missing}}}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Function, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{CategoricalArrays.CategoricalValue{Int64, UInt32}}}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.groupreduce!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##fillfirst!#201")), Bool, typeof(DataFrames.fillfirst!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, 1}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#280#294")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#279#293")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:y, :z), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.maximum)}, Base.Pair{Symbol, typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, typeof(Base.maximum)}, Base.Pair{Symbol, typeof(Base.sum)}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:y, :z), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y, :z), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y, :z), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}, Base.Pair{Symbol, typeof(Base.sum)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Int64, Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Base.Complex{Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, Type{Array{Int64, 1}}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{T, 1} where T}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Int64, 1}, 1}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#281#295"))}}, Any, Any})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#282#296"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y, :z), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#281#295"))}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#282#296"))}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#281#295"))}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#282#296"))}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:y, :z), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#281#295"))}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#282#296"))}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y, :z), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#281#295"))}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#282#296"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y, :z), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#281#295"))}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#282#296"))}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#281#295"))}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#281#295"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#282#296"))}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#282#296"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Base.Complex{Int64}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :x1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :x1), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :x1), Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.min), Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.add_sum), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.add_sum), typeof(Base.zero), typeof(Base.sum), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.reducedim_initarray), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Float64, Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.sum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Base.Missing}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Base.Missing, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Union{Base.Missing, Float64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##fillfirst!#201")), Bool, typeof(DataFrames.fillfirst!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce_init), Function, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.sum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.SkipMissing{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.sum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), Nothing, Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), typeof(Base.identity), typeof(Base.mul_prod), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), Nothing, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.mul_prod), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.mul_prod), Base.IndexLinear, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._reducedim_init), typeof(Base.identity), typeof(Base.mul_prod), typeof(Base.one), typeof(Base.prod), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), Nothing, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.prod)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.mul_prod), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.mul_prod), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.mul_prod), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.prod), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.mul_prod), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.prod)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Missings.disallowmissing), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.maximum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.maximum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), Nothing, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), Nothing, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.minimum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.min), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Nothing, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.minimum), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.minimum)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getproperty), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Function, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, typeof(Base.:(/))}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, Nothing, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getproperty), Array{Union{Base.Missing, Float64}, 1}, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), Nothing, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Base.Missing, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Float64, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(/))}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._mean), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, typeof(Base.:(/))}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce), Function, Function, getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._mean), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.mean)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), Nothing, Function, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Float64, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._var), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_first), getfield(Statistics, Symbol("#8#9")){Float64}, Function, Float64})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), Nothing, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Union{Base.Missing, Float64}, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Union{Base.Missing, Float64}, 1}}, typeof(Base.:(+)), Nothing, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._var), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{getfield(Statistics, Symbol("#kw##varm")), NamedTuple{(:corrected,), Tuple{Bool}}, typeof(Statistics.varm), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.Missing})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Base.Missing}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Base.Missing}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Statistics._varm), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Float64, Bool, Base.Colon})
precompile(Tuple{getfield(Statistics, Symbol("#kw##varm")), NamedTuple{(:corrected,), Tuple{Bool}}, typeof(Statistics.varm), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Float64})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.var), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#204#207")), typeof(Base.add_sum), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Float64, 1}, getfield(DataFrames, Symbol("#205#208")){Array{Float64, 1}}, typeof(Base.:(+)), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Function, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.var)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Statistics._std), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Bool, Nothing, Base.Colon})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Statistics.std), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Statistics.std)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.map!), getfield(DataFrames, Symbol("#210#211")){Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}}, Array{Union{Base.Missing, Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.first)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##fillfirst!#201")), Bool, typeof(DataFrames.fillfirst!), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.first), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.first)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.last)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), Nothing}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#284#298")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.last), getfield(Base, Symbol("#58#59")){typeof(Base.ismissing)}}, Array{Union{Base.Missing, Float64}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(Base, Symbol("#56#57")){typeof(Base.last), typeof(Base.skipmissing)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#285#299")){typeof(Base.last)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.length), Nothing}, Array{Float64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:y,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Float64, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, Type{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Int64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#283#297")){typeof(Base.length)}}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:z,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.maximum)}}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:z,), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:z,), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.groupreduce_init), typeof(Base.max), Nothing, Array{Any, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!), Array{Any, 1}, getfield(DataFrames, Symbol("#202#203")), typeof(Base.max), Nothing, Nothing, Array{Any, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Any, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:z,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:z,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:z,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#286#300"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Float64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Any, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Float64}}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#286#300"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{Type{TestGrouping.TestType}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, TestGrouping.TestType, Vararg{TestGrouping.TestType, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), TestGrouping.TestType, TestGrouping.TestType, Vararg{TestGrouping.TestType, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, TestGrouping.TestType, TestGrouping.TestType, TestGrouping.TestType}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##combine")), NamedTuple{(:z,), Tuple{Base.Pair{Symbol, typeof(Base.maximum)}}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.max), Int64, TestGrouping.TestType})
precompile(Tuple{typeof(Base.max), TestGrouping.TestType, TestGrouping.TestType})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{TestGrouping.TestType}, Type{Int64}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, Type{Tuple{Array{Int64, 1}, Array{Any, 1}}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Any, 1}}, Base.Generator{Array{Base.Pair{Symbol, typeof(Base.maximum)}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#214#218")), Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Any, 1}, 1}, Array{Any, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, Base.Generator{Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, getfield(DataFrames, Symbol("#214#218"))}})
precompile(Tuple{typeof(Base.all), Function, Array{Array{Any, 1}, 1}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, Array{Array{Any, 1}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#215#219")), Array{Any, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#215#219")), Array{Array{Any, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect), Type{AbstractArray{T, 1} where T}, Array{Array{Any, 1}, 1}})
precompile(Tuple{Type{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:z,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}}})
precompile(Tuple{getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}})
precompile(Tuple{typeof(Base._collect), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#216#220")){Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames._combine), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:z,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:z,), Tuple{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.do_call), getfield(DataFrames, Symbol("#fun#212")){getfield(TestGrouping, Symbol("#287#301"))}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(DataFrames._combine_with_first), NamedTuple{(:x1,), Tuple{Int64}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Any, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, TestGrouping.TestType})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{TestGrouping.TestType}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{TestGrouping.TestType}}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.wrap), TestGrouping.TestType})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{TestGrouping.TestType}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Any, 1}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}}, NamedTuple{(:x1,), Tuple{TestGrouping.TestType}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}}, NamedTuple{(:x1,), Tuple{TestGrouping.TestType}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{TestGrouping.TestType}}, Tuple{Array{Any, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{TestGrouping.TestType}}, Tuple{Array{Any, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Any, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, Type{Tuple{Array{Int64, 1}, Array{Any, 1}}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Array{Int64, 1}, Array{Any, 1}}, 1}, Tuple{Array{Int64, 1}, Array{Any, 1}}, Base.Generator{Array{Base.Pair{Symbol, getfield(TestGrouping, Symbol("#287#301"))}, 1}, getfield(DataFrames, Symbol("#213#217")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.:(==)), TestGrouping.TestType, TestGrouping.TestType})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}}, NamedTuple{(:x1,), Tuple{Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Int64, 1}}, NamedTuple{(:x1,), Tuple{Base.Missing}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Float64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Float64, 1}}, NamedTuple{(:x1,), Tuple{Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{Array{Float64, 1}}, NamedTuple{(:x1,), Tuple{Base.Missing}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Union{Base.Missing, Float64}, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{Array{Union{Base.Missing, Float64}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Int64, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, NamedTuple{(:x1,), Tuple{Base.Missing}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#227#228")){Int64, Int64, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, NamedTuple{(:x1,), Tuple{Base.Missing}}}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), NamedTuple{(:x1,), Tuple{Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Symbol}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Union{Base.Missing, String}, 1}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, String}, 1}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(TestGrouping, Symbol("#302#310")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#302#310")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.do_append!), Bool, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :z), Tuple{Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#303#311")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#303#311")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{String, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{String, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.isequal), Array{String, 1}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(TestGrouping, Symbol("#304#312")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#304#312")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#305#313")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#305#313")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##groupby")), NamedTuple{(:skipmissing,), Tuple{Bool}}, typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#306#314")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#306#314")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#307#315")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#307#315")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{getfield(TestGrouping, Symbol("#308#316")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#308#316")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#309#317")), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.do_call), getfield(TestGrouping, Symbol("#309#317")), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Symbol, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Symbol, 1}}, Int64, UInt64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.to_index), Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Bool, 1}})
precompile(Tuple{Type{BoundsError}, Any, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.UnitRange{Int64}})
precompile(Tuple{Type{BoundsError}, Any, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.:(!=)), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Type{Float32}, Float64, Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Float32, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{String, 1}, Array{Float32, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Float32, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Float32, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Float32, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Float32, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Float32, 1}})
precompile(Tuple{typeof(Base.copy), Array{Float32, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Float32, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#352#355")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#352#355")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#352#355")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}, Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:summary, :allrows, :allcols, :rowlabel), Tuple{Bool, Bool, Bool, Symbol}}, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#353#356")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#353#356")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#353#356")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#354#357")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#354#357")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#354#357")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#351")), Bool, Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.print_to_string), Core.TypeName, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.repr), Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Nothing, typeof(DataFrames._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#349")), Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float32, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Array{Float32, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Float32, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.isassigned), Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.oftype), UInt32, Int64})
precompile(Tuple{typeof(Base.Grisu.normalizedbound), Float32})
precompile(Tuple{typeof(Base.Grisu.fastshortest), Float32, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.init3!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init1!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init2!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.initialscaledstartvalues!), UInt32, Int32, Bool, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.bignumdtoa), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float32, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.fastprecision), Float32, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float32, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float32})
precompile(Tuple{typeof(DataFrames.ourshow), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float32})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float32})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.summary), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{typeof(Base.getindex), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.ismissing), Float32})
precompile(Tuple{Type{NamedTuple{(:allgroups,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allgroups,), Tuple{Bool}}, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestGrouping, Symbol("#318#320"))})
precompile(Tuple{getfield(TestGrouping, Symbol("#capture_stdout#319")), getfield(TestGrouping, Symbol("#318#320"))})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#358")), Bool, Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.show), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.join), Base.PipeEndpoint, Array{String, 1}, String})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.PipeEndpoint, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Nothing, typeof(DataFrames._show), Base.PipeEndpoint, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#351")), Bool, Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.PipeEndpoint, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allrows, :allcols, :allgroups, :splitcols, :rowlabel, :summary), Tuple{Bool, Bool, Bool, Bool, Symbol, Bool}}, typeof(Base.show), Base.PipeEndpoint, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.PipeEndpoint, Float32})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{Base.PipeEndpoint}, Float32, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.PipeEndpoint}, Float32})
precompile(Tuple{typeof(DataFrames.ourshow), Base.PipeEndpoint, Float32})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, String, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#369#371")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#369#371")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#369#371")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#365")), Bool, Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#370#372")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#370#372")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#370#372")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Float32})
precompile(Tuple{typeof(Base.sprint), Function, Float32})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, Float32})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(DataFrames.latex_escape), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#378#380")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#378#380")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#378#380")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#373")), Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#379#381")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#379#381")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#379#381")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Symbol, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Symbol, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Symbol, 1}, Array{String, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Symbol, 1}, Array{String, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#351")), Bool, Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.repr), Symbol})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64})
precompile(Tuple{typeof(Base.view), Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isassigned), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.first), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.first), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##printtable#382")), Bool, Char, Char, String, typeof(DataFrames.printtable), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/csv")}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.Missing, Symbol, Symbol, Symbol, Symbol, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Symbol}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Symbol}, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Union}, Type{Union{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{Union, DataType}})
precompile(Tuple{typeof(DataFrames._nonmissing!), Base.BitArray{1}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(DataFrames.DataFrame!), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#266#267")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#266#267")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(DataFrames.group_rows), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Bool, Bool, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#2#4")){DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#3#5")){DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.similar), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#251")), Bool, Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.sort), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol, Base.Order.Perm{Base.Order.ForwardOrdering, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#kw##defalg")), NamedTuple{(:alg, :cols), Tuple{Nothing, Symbol}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Order.Perm{Base.Order.ForwardOrdering, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}})
precompile(Tuple{typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Type{Int64}, Base.Order.Perm{Base.Order.ForwardOrdering, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Sort.MergeSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}, Base.Colon})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skipmissing,), Tuple{Bool}}}, typeof(TestGrouping.groupby_checked), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#kw##groupby_checked")), NamedTuple{(:skipmissing,), Tuple{Bool}}, typeof(TestGrouping.groupby_checked), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(DataFrames._nonmissing!), Base.BitArray{1}, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(DataFrames._nonmissing!), Base.BitArray{1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(DataFrames.DataFrame!), DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, String}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Any, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Any, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Any, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Any, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Any, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{DataType, DataType, Union}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#266#267")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#266#267")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(DataFrames.group_rows), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Bool, Bool, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{getfield(TestGrouping, Symbol("#2#4")){DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("#3#5")){DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Symbol}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.similar), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#251")), Bool, Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Base, Symbol("#new#252")){Tuple{Base.Pair{Int64, Base.Missing}}}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataFrames.groupindices), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.typesof), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupvars), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Int64, Base.Missing}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base.vcat), Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner,), Tuple{Int64}}, typeof(Base.repeat), Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}}, Int64, UInt64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Int64, Base.Missing, Base.Missing, Int64, Base.Missing, Int64, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Int64, Base.Missing, Base.Missing, Int64, Int64, Int64, Int64, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64, Int64, Int64, Base.Missing, Base.Missing, Base.Missing, Int64, Base.Missing, Int64, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}, typeof(DataFrames.by), DataFrames.DataFrame, Symbol, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{Type{NamedTuple{(:x1, :x2, :y), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x1, :x2, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1, :x2, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{getfield(TestGrouping, Symbol("##groupby_checked#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(TestGrouping.groupby_checked), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.length)}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.length)}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:a, :b), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.length)}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(DataFrames.combine), NamedTuple{(:a, :b), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.length)}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##by")), NamedTuple{(:a, :b), Tuple{Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.length)}}}, typeof(DataFrames.by), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.do_call), typeof(DataFrames.nrow), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Int64})
precompile(Tuple{Type{NamedTuple{(:x2_identity,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:x2_identity,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x2_identity,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.aggregate), DataFrames.DataFrame, Array{Any, 1}, Function})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.aggregate), DataFrames.DataFrame, Base.UnitRange{Int64}, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##aggregate")), NamedTuple{(:sort, :skipmissing), Tuple{Bool, Bool}}, typeof(DataFrames.aggregate), DataFrames.DataFrame, Array{Any, 1}, Function})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Symbol, Symbol, Base.Missing}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.repeat), Array{Union{Base.Missing, Symbol}, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Int64, 1}}, Int64, UInt64})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{Base.Missing, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#186#187")), Tuple{Symbol, Base.Missing}})
precompile(Tuple{typeof(Base.keys), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Type{T} where T, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{NamedTuple{names, T} where T<:Tuple where names}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames._groupvalues), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64})
precompile(Tuple{Type{NamedTuple{names, T} where T<:Tuple where names}, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._collect), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.EltypeUnknown, Base.HasLength})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Symbol}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, 1}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, 1}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Base.Missing}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Int64}, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.Missing, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}, Int64, Array{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, 1}, NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}}, Type{NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}}, Type{NamedTuple{(:a, :b), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}}, Type{NamedTuple{(:a, :b), T} where T<:Tuple}})
precompile(Tuple{Type{Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}, Tuple{NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.isequal), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}, Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.pairs), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, 1}, Base.Pair{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, Base.Generator{Base.Iterators.Zip{Tuple{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}, Tuple{Tuple{Base.OneTo{Int64}, Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}})
precompile(Tuple{typeof(Base.map), Type{T} where T, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.Pair{A, B} where B where A}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), Array{Base.Pair{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, 1}, Array{Base.Pair{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, 1}})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Iterators.enumerate), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{Symbol, Int64}})
precompile(Tuple{Type{Tuple}, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Tuple{Int64, Tuple{Base.OneTo{Int64}, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Base.Missing, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{Base.Missing, Int64}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Int64}, Tuple{Base.Missing, Int64}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Int64}, Tuple{Symbol, Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Symbol, Float64}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{Symbol, Float64}})
precompile(Tuple{typeof(Base.get), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}, Nothing})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Symbol, String}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Int64}, Tuple{Symbol, String}})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Int64}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Symbol, Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Symbol, Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a, :b, :c), Tuple{Symbol, Int64, Int64}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{Symbol, Int64, Int64}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Int64}, Tuple{Symbol, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:b, :a), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:b, :a), Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Int64}, Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Int64}, Tuple{}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Int64}, Tuple{}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(), Tuple{}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Symbol, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.Missing, Symbol}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}}, Type{NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}}})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}}, Type{NamedTuple{(:a, :b), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}}, Type{NamedTuple{(:a, :b), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}, Tuple{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}}})
precompile(Tuple{Type{Base.IndexStyle}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.length), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.length), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}})
precompile(Tuple{typeof(Base.size), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.size), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}})
precompile(Tuple{typeof(Base.eltype), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.parent), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.length), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.names), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.keys), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Bool})
precompile(Tuple{typeof(Base.values), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.values), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(DataFrames._groupvalues), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.collect), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, Int64})
precompile(Tuple{typeof(DataFrames._groupvalues), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Symbol})
precompile(Tuple{typeof(Base.print_to_string), Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Missing, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Symbol}, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.values), NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, Symbol}, Tuple{Base.Missing, Symbol}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}, NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.collect), NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##groupby")), NamedTuple{(:skipmissing,), Tuple{Bool}}, typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Union{Base.Missing, Symbol}, 1, Array{Union{Base.Missing, Symbol}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.first), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.copymutable), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.copy), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.unalias), Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.collect), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.:(==)), Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{Type{Ref{T} where T}, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.RefValue{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!=)), Tuple{Base.RefValue{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.RefValue{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Base.Broadcast.Extruded{Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.RefValue{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, 1}, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Base._repeat_inner_outer), Array{Symbol, 1}, Nothing, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Array{Int64, 1}}}, typeof(Base.repeat), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._repeat_inner_outer), Base.UnitRange{Int64}, Nothing, Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:outer,), Tuple{Array{Int64, 1}}}, typeof(Base.repeat), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Symbol, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Symbol, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Symbol, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Symbol, 1}, Array{Int64, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Symbol, 1}, Array{Int64, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Symbol, 1}, Array{Int64, 1}}, Base.Val{false}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Base.map), Function, DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.repr), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, typeof(Base.repr)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._collect), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, typeof(Base.repr)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, typeof(Base.repr)}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.GroupKey{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Int64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, String})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:a, :b), Tuple{Symbol, Int64}}})
precompile(Tuple{typeof(Base.names), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, 1}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, 1}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:a, :b), T} where T<:Tuple, 1}, Int64, Array{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, 1}, NamedTuple{(:a, :b), Tuple{Base.Missing, Symbol}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}, NamedTuple{(:a, :b), Tuple{Symbol, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:d, :e), T} where T<:Tuple}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:d, :e), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, 1}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, 1}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{NamedTuple{(:d, :e), T} where T<:Tuple}, Tuple{Base.Missing, Symbol}})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:d, :e), T} where T<:Tuple, 1}, Int64, Array{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, 1}, NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:d, :e), T} where T<:Tuple, 1}, Base.Generator{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Type{NamedTuple{names, T} where T<:Tuple where names}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}}, Type{NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}}})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}}, Type{NamedTuple{(:d, :e), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.promote_type), Type{NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}}, Type{NamedTuple{(:d, :e), T} where T<:Tuple}})
precompile(Tuple{Type{Array{NamedTuple{(:d, :e), T} where T<:Tuple, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:d, :e), T} where T<:Tuple, 1}, Tuple{NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}}})
precompile(Tuple{typeof(Base.isequal), Array{NamedTuple{(:d, :e), T} where T<:Tuple, 1}, Array{NamedTuple{(:d, :e), T} where T<:Tuple, 1}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.isequal), NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}, NamedTuple{(:d, :e), Tuple{Base.Missing, Symbol}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}, NamedTuple{(:d, :e), Tuple{Symbol, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:ID, :Name), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:ID, :Job), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:ID, :Job), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Job), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, String, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name, :Job), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Name, :Job), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name, :Job), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Array{Union{Base.Missing, String}, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Bool, 1}, Bool, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Bool, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Bool, 1}, Base.Colon})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}}, Base.Val{true}})
precompile(Tuple{typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#295#299")), Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#295#299")), Int64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#297#301")), Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#297#301")), Int64})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :D), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :D), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :D), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Char, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Char, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Char, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Int64, 1}, Array{Char, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:kind,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:kind,), Tuple{Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#305#307")){Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._repeat), Array{Char, 1}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#305#307")){Int64}, Array{Char, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Int64, 1}, 1}, Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#306#308")){Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Array{T, 1} where T, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Array{T, 1} where T, 1}, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Array{T, 1} where T, 1}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{Type{NamedTuple{(:kind, :makeunique), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:kind, :makeunique), Tuple{Symbol, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.repeat), Array{Char, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#306#308")){Int64}, Array{Char, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Array{T, 1} where T, 1}, Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Array{T, 1} where T, 1}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{getfield(TestJoin, Symbol("#simple_df#1")), Int64, Symbol})
precompile(Tuple{getfield(TestJoin, Symbol("#simple_df#1")), Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#305#307")){Int64}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Union{Base.Missing, Int64}, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#306#308")){Int64}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{getfield(TestJoin, Symbol("#simple_df#2")), Int64, Symbol})
precompile(Tuple{getfield(TestJoin, Symbol("#simple_df#2")), Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}, Base.IndexCartesian, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :kind, :makeunique), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Symbol, Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind, :makeunique), Tuple{Array{Symbol, 1}, Symbol, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(CategoricalArrays.refs), Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:Name, :Mass), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:Name, :Mass), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Name, :Mass), Tuple{Array{Union{Base.Missing, String}, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:Name, :Quantity), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:Name, :Quantity), Tuple{Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Name, :Quantity), Tuple{Array{String, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, String}, 1}}, Tuple{Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, String}, 1}}, Tuple{Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Base.IndexCartesian, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:Name, :Quantity, :Mass), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Name, :Quantity, :Mass), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:Name, :Quantity, :Mass), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:Name, :Quantity, :Mass), Tuple{Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:x, :z), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Int64}, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :z), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :z), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Tuple{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Tuple{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}}, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Array{Array{Union{Base.Missing, Int64}, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._repeat), Array{Float64, 1}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#305#307")){Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float64})
precompile(Tuple{typeof(Base.repeat), Array{Float64, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#306#308")){Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner,), Tuple{Int64}}, typeof(Base.repeat), Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), Type{Array{Int64, 1}}, Vararg{DataType, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind, :makeunique), Tuple{Symbol, Symbol, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(TestJoin, Symbol("#s#7")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Float64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Float64, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Float64, 1}}, Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#s#7")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Int64, 1}, Array{Float64, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{Float64, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Int64, 1}, Array{Float64, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#a#8")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{getfield(TestJoin, Symbol("#a#8")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{getfield(TestJoin, Symbol("#i#3")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{getfield(TestJoin, Symbol("#l#4")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{Type{NamedTuple{(:id, :fid, :fid_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :fid, :fid_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :fid, :fid_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{getfield(TestJoin, Symbol("#r#5")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:id, :fid, :fid_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :fid, :fid_1), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :fid, :fid_1), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestJoin, Symbol("#o#6")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Base.Missing, Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:id, :fid, :fid_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :fid, :fid_1), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :fid, :fid_1), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Float64, 1}}, Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Int64, 1}}, Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Array{Float64, 1}, 1}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{Type{NamedTuple{(:id, :fid, :id_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :fid, :id_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :fid, :id_1), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:id, :fid, :id_1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :fid, :id_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :fid, :id_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vect), Type{Array{Union{Base.Missing, Int64}, 1}}, Vararg{DataType, N} where N})
precompile(Tuple{Type{NamedTuple{(:id, :fid, :id_1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :fid, :id_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :fid, :id_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestJoin, Symbol("#i#3")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Tuple{Array{Int64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#l#4")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:id, :fid), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:id, :fid), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :fid), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(TestJoin, Symbol("#r#5")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{getfield(TestJoin, Symbol("#o#6")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base._repeat), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#305#307")){Int64}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.UnitRange{Int64}}, true}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base._array_for), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.unaliascopy), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base._repeat), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#305#307")){Int64}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.UnitRange{Int64}}, true}, CategoricalArrays.CategoricalValue{Float64, UInt32}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#305#307")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.repeat), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#306#308")){Int64}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.repeat), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#306#308")){Int64}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{Type{Base.Dict{Float64, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, Int64}, Float64})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Float64, Int64}, Float64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, Int64}, Float64})
precompile(Tuple{typeof(Base.indexin), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.findfirst), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._all), getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#306#308")){Int64}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}, Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, Union{}} where C where V where T, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#9#24")), Tuple{DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType}, getfield(TestJoin, Symbol("#9#24"))}})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType, DataType, DataType}, getfield(TestJoin, Symbol("#9#24"))}, Int64})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{CategoricalArrays.CategoricalArray{Int64, 1, V, C, U, U} where U where U where C where V}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{UnionAll, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(isa), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{UnionAll, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(isa), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{UnionAll, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(isa), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{UnionAll, 1}}}})
precompile(Tuple{getfield(TestJoin, Symbol("#s#29")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.hash), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#s#29")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#10#31")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#10#31"))}})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#10#31"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#a#30")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{getfield(TestJoin, Symbol("#a#30")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#11#32")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#11#32"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#11#32"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#i#25")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.refs), Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Int64, Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#12#33")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(TestJoin, Symbol("#12#33"))}})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(TestJoin, Symbol("#12#33"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#l#26")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalPool{Float64, UInt32, CategoricalArrays.CategoricalValue{Float64, UInt32}}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Int64, Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.findfirst), getfield(Base, Symbol("#58#59")){typeof(Base.isempty)}, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._all), getfield(CategoricalArrays, Symbol("#1#4")){Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Int64}, Tuple{Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.permute!!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalValue{Float64, UInt32}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#13#34")), Tuple{DataType, DataType, Union}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, Union}, getfield(TestJoin, Symbol("#13#34"))}})
precompile(Tuple{getfield(TestJoin, Symbol("#13#34")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{DataType, DataType, Union}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType, Union}, getfield(TestJoin, Symbol("#13#34"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#r#27")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(DataFrames.similar_missing), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.similar_missing), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.indexin), Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Nothing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.insert!), Array{Union{Base.Missing, Int64}, 1}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#14#35")), Tuple{DataType, Union, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, Union, DataType}, getfield(TestJoin, Symbol("#14#35"))}})
precompile(Tuple{getfield(TestJoin, Symbol("#14#35")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{DataType, Union, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, Union, DataType}, getfield(TestJoin, Symbol("#14#35"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#o#28")){DataFrames.DataFrame, DataFrames.DataFrame}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#15#36")), Tuple{DataType, Union, Union}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, Union, Union}, getfield(TestJoin, Symbol("#15#36"))}})
precompile(Tuple{getfield(TestJoin, Symbol("#15#36")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{DataType, Union, Union}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, Union, Union}, getfield(TestJoin, Symbol("#15#36"))}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#16#37")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(TestJoin, Symbol("#16#37"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(TestJoin, Symbol("#16#37"))}, Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.permute!!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#17#38")), Tuple{DataType, DataType, Union}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, Union}, getfield(TestJoin, Symbol("#17#38"))}})
precompile(Tuple{getfield(TestJoin, Symbol("#17#38")), Type{T} where T})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType, Union}, getfield(TestJoin, Symbol("#17#38"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Int64, Base.SubArray{CategoricalArrays.CategoricalValue{Float64, UInt32}, 1, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Float64}, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Float64}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Union{Base.Missing, Float64}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Float64}, Int64}, Float64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Float64}, Int64}, Float64})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Union{Base.Missing, Float64}, Int64}, Float64})
precompile(Tuple{typeof(Base.indexin), Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.insert!), Array{Union{Base.Missing, Float64}, 1}, Int64, Float64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Float64}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.indexin), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Int64, CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}, Int64, Int64})
precompile(Tuple{typeof(Missings.disallowmissing), CategoricalArrays.CategoricalArray{Union{Base.Missing, Float64}, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#18#39")), Tuple{Union, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Union, DataType, DataType}, getfield(TestJoin, Symbol("#18#39"))}})
precompile(Tuple{getfield(TestJoin, Symbol("#18#39")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{Union, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{Union, DataType, DataType}, getfield(TestJoin, Symbol("#18#39"))}, Int64})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, V, C, U, U} where U where U where C where V}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#19#40")), Tuple{Union, DataType, Union}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Union, DataType, Union}, getfield(TestJoin, Symbol("#19#40"))}})
precompile(Tuple{getfield(TestJoin, Symbol("#19#40")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{UnionAll}, Tuple{Union, DataType, Union}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{Union, DataType, Union}, getfield(TestJoin, Symbol("#19#40"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#i#25")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Float64, 1, UInt32, Float64, CategoricalArrays.CategoricalValue{Float64, UInt32}, Union{}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#20#41")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#20#41"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#20#41"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#l#26")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#21#42")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#21#42"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#21#42"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#r#27")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#22#43")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#22#43"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#22#43"))}, Int64})
precompile(Tuple{getfield(TestJoin, Symbol("#o#28")){DataFrames.DataFrame, DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestJoin, Symbol("#23#44")), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#23#44"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UnionAll, 1}, Type{T} where T, Base.Generator{Tuple{DataType, DataType}, getfield(TestJoin, Symbol("#23#44"))}, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{CategoricalArrays.CategoricalArray{T, 1, V, C, U, U} where U where U where C where V where T}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:b, :c), T} where T<:Tuple}, Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:b, :c), Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :c), Tuple{Array{String, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(CategoricalArrays.levels!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{String, 1}})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(CategoricalArrays.refs), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.permute!!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataAPI.levels), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.permute!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, String}, 1}, Base.IndexCartesian, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:b, :c), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:b, :c), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :c), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, String}, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Union{Base.Missing, String}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, Int64}, String})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, String}, Int64}, String})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Union{Base.Missing, String}, Int64}, String})
precompile(Tuple{typeof(Base.indexin), Array{String, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.insert!), Array{Union{Base.Missing, String}, 1}, Int64, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, String}, Int64}, Base.Missing})
precompile(Tuple{typeof(Base.indexin), Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{NamedTuple{(:b, :c), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:b, :c), Tuple{Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :c), Tuple{Array{String, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{String, 1}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{String, 1}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataAPI.levels), Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{CategoricalArrays.CategoricalString{UInt32}, 1, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:id, :sid), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:id, :sid), Tuple{Base.UnitRange{Int64}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :sid), Tuple{Base.UnitRange{Int64}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:ID, :SID), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:ID, :SID), Tuple{Base.UnitRange{Int64}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :SID), Tuple{Base.UnitRange{Int64}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :kind), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, Symbol}, Symbol}})
precompile(Tuple{Type{DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}}, DataFrames.DataFrame, DataFrames.DataFrame, Base.Pair{Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##join#294")), Base.Pair{Symbol, Symbol}, Symbol, Bool, Nothing, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind), Tuple{Base.Pair{Symbol, Symbol}, Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:id, :sid, :SID), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :kind), T} where T<:Tuple}, Tuple{Array{Base.Pair{Symbol, Symbol}, 1}, Symbol}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Pair{Symbol, Symbol}, 1}, Array{Any, 1}})
precompile(Tuple{Type{DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}}, DataFrames.DataFrame, DataFrames.DataFrame, Array{Base.Pair{Symbol, Symbol}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##join#294")), Array{Base.Pair{Symbol, Symbol}, 1}, Symbol, Bool, Nothing, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind), Tuple{Array{Base.Pair{Symbol, Symbol}, 1}, Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Int64, 1}, Array{String, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{String, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Int64, 1}, Array{String, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{String, 1}}, Tuple{Array{Int64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, Array{String, 1}}, Tuple{Array{Int64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{Base.Missing, Base.Missing, String, String, String, String, String}})
precompile(Tuple{Type{NamedTuple{(:id, :sid, :SID), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, String, String, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:id, :sid, :SID), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, String, String, String, String, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{Base.Missing, Base.Missing, String, String, String, String, String, String, String, String}})
precompile(Tuple{Type{NamedTuple{(:id, :sid, :SID), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :sid, :SID), Tuple{Base.UnitRange{Int64}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Any, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Any, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Any, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Any, 1}, Array{Int64, 1}}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Array{Any, 1}, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Any, 1}, Array{Int64, 1}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Any, 1}, Array{Int64, 1}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Array{Any, 1}, Array{Int64, 1}}, Int64, Tuple{Array{Any, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Any, 1}, Array{Int64, 1}}, Tuple{Array{Any, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Any, 1}, Array{Int64, 1}}, Tuple{Array{Any, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.mightalias), Array{Any, 1}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Any, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Any, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Any, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vect), Type{Any}, Vararg{DataType, N} where N})
precompile(Tuple{typeof(DataFrames.similar_missing), Array{Any, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:on, :kind, :makeunique), T} where T<:Tuple}, Tuple{Symbol, Symbol, Bool}})
precompile(Tuple{typeof(Base.view), Array{Any, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.similar), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Any, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Any, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Base.Missing, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Tuple{Array{Base.Missing, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.vcat), Array{Base.Missing, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Tuple{Base.UnitRange{Int64}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Array{Base.Missing, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Any, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.hashrows), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Base.Val{true}, Array{Int64, 1}, Bool})
precompile(Tuple{typeof(DataFrames.rowhash), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64, UInt64})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), Type{Int64}, Vararg{DataType, N} where N})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{UInt32, 1}, getfield(CategoricalArrays, Symbol("#50#53")){Array{Int64, 1}}}, Int64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("#49#52")){Array{String, 1}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{UInt32}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(CategoricalArrays.buildinvindex), Array{String, 1}, Type{UInt32}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt32, 1}, Base.IndexLinear, Base.UnitRange{Int64}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{T, R, V} where V where R<:Integer where T}, Array{String, 1}, Bool})
precompile(Tuple{typeof(Base.vcat), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :b_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :b_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :b_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.unaliascopy), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.vcat), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}}, Tuple{Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.vcat), Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :b_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :b_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_type), Type{Union}, Type{Union}})
precompile(Tuple{typeof(Base.copyto!), Array{Type, 1}, Tuple{DataType, Union, Union}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Int64, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Base.Missing, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Int64}, 1}, Array{Base.Missing, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Base.Missing, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Tuple{Array{Int64, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Union{Base.Missing, Int64}}, Tuple{Array{Base.Missing, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Base.Missing, 1}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :a_1), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :a_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :a_1), Tuple{Array{Union{Base.Missing, Int64}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name, :Job, :_merge), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Name, :Job, :_merge), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Name, :Job, :_merge), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name, :Job, :_merge), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :kind, :indicator, :makeunique), T} where T<:Tuple}, Tuple{Symbol, Symbol, Symbol, Bool}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Base.BitArray{1}, Symbol})
precompile(Tuple{typeof(CategoricalArrays.buildinvindex), Array{String, 1}, Type{UInt8}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt8, 1}, Base.IndexLinear, Base.UnitRange{Int64}})
precompile(Tuple{Type{CategoricalArrays.CategoricalPool{String, UInt8, V} where V}, Array{String, 1}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##join#294")), Symbol, Symbol, Bool, Symbol, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind, :indicator, :makeunique), Tuple{Symbol, Symbol, Symbol, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Bool}, 1}, Base.Missing})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Bool}, 1}, Int64})
precompile(Tuple{typeof(Base.view), Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Base.Missing, Bool}, 1}, Base.IndexCartesian, Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Bool}, 1}, Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.BitArray{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), Base.BitArray{1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.similar_missing), Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.OneTo{Int64}}, true}}, Base.BitArray{1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Bool, 1, Base.BitArray{1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Union{Base.Missing, Bool}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!), Array{Union{Base.Missing, Bool}, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Union{Base.Missing, Bool}, 1}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Union{Base.Missing, Bool}, 1}, Bool})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{UInt8}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{UInt8}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}}}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{UInt8}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Bool}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Bool}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{UInt8}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}}}}}}}})
precompile(Tuple{typeof(Base.isequal), CategoricalArrays.CategoricalArray{String, 1, UInt8, String, CategoricalArrays.CategoricalString{UInt8}, Union{}}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name, :_left), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Name, :_left), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name, :_left), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:ID, :Job, :_left), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Job, :_left), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Job, :_left), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Int64}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name, :_left, :Job, :_left_1, :_left_2), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Name, :_left, :Job, :_left_1, :_left_2), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Name, :_left, :Job, :_left_1, :_left_2), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name, :_left, :Job, :_left_1, :_left_2), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :validate), T} where T<:Tuple}, Tuple{Symbol, Tuple{Bool, Bool}}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :validate), Tuple{Symbol, Tuple{Bool, Bool}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:on, :kind, :validate), T} where T<:Tuple}, Tuple{Symbol, Symbol, Tuple{Bool, Bool}}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind, :validate), Tuple{Symbol, Symbol, Tuple{Bool, Bool}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.Missing, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:ID, :Name), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Int64, Int64, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Int64, Int64, Float64}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:ID, :Name), Tuple{Array{Float64, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name), Tuple{Array{Float64, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Float64, 1}}, Base.Val{true}})
precompile(Tuple{typeof(DataFrames.findrow), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.findrows), DataFrames.RowGroupDict{DataFrames.DataFrame}, DataFrames.DataFrame, Tuple{Array{Union{Base.Missing, Int64}, 1}}, Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Int64, Int64, Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:ID, :Name, :Name_1), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:ID, :Name, :Name_1), Tuple{Array{Float64, 1}, Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID, :Name, :Name_1), Tuple{Array{Float64, 1}, Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :validate, :makeunique), T} where T<:Tuple}, Tuple{Symbol, Tuple{Bool, Bool}, Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :validate, :makeunique), Tuple{Symbol, Tuple{Bool, Bool}, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:ID1, :ID2, :Name), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:ID1, :ID2, :Name), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID1, :ID2, :Name), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:ID1, :ID2, :Job), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:ID1, :ID2, :Job), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID1, :ID2, :Job), Tuple{Array{Int64, 1}, Array{String, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, String, Base.Missing, Base.Missing, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, Base.Missing, Base.Missing, String, String, String}})
precompile(Tuple{Type{NamedTuple{(:ID1, :ID2, :Name, :Job), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:ID1, :ID2, :Name, :Job), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:ID1, :ID2, :Name, :Job), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ID1, :ID2, :Name, :Job), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:on, :kind, :validate), T} where T<:Tuple}, Tuple{Array{Symbol, 1}, Symbol, Tuple{Bool, Bool}}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind, :validate), Tuple{Array{Symbol, 1}, Symbol, Tuple{Bool, Bool}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}, Array{String, 1}}, Base.Val{true}})
precompile(Tuple{typeof(Base.push!), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:id, :x), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:id, :x), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :x), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:id, :y), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:id, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:id, :z), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:id, :z), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :z), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind, :makeunique, :validate), Tuple{Symbol, Symbol, Bool, Tuple{Bool, Bool}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##join#303")), Symbol, Symbol, Bool, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on,), Tuple{Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:id, :x, :y, :z), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :x, :y, :z), Tuple{Int64, Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :x, :y, :z), Tuple{Int64, Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind), Tuple{Symbol, Symbol}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:id, :x, :y, :z), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :x, :y, :z), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :x, :y, :z), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :kind, :makeunique, :validate), Tuple{Array{Symbol, 1}, Symbol, Bool, Tuple{Bool, Bool}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##join#303")), Array{Symbol, 1}, Symbol, Bool, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:kind, :makeunique), Tuple{Symbol, Bool}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##repeat")), NamedTuple{(:inner, :outer), Tuple{Int64, Int64}}, typeof(Base.repeat), Array{Int64, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on, :validate), Tuple{Symbol, Tuple{Bool, Bool}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}}, Base.Val{true}})
precompile(Tuple{Type{NamedTuple{(:id, :id2, :x), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :id2, :x), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :id2, :x), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:id, :ID2, :y), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :ID2, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :ID2, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_typeof), Symbol, Base.Pair{Symbol, Symbol}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Symbol, Base.Pair{Symbol, Symbol}}})
precompile(Tuple{Type{NamedTuple{(:on,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{Type{DataFrames.DataFrameJoiner{DataFrames.DataFrame, DataFrames.DataFrame}}, DataFrames.DataFrame, DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##join#294")), Array{Any, 1}, Symbol, Bool, Nothing, Tuple{Bool, Bool}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on,), Tuple{Array{Any, 1}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:id, :id2, :x, :y), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:id, :id2, :x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :id2, :x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.Pair{Symbol, Symbol}, Symbol}})
precompile(Tuple{Type{NamedTuple{(:on,), T} where T<:Tuple}, Tuple{Array{Base.Pair{Symbol, Symbol}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##join")), NamedTuple{(:on,), Tuple{Array{Base.Pair{Symbol, Symbol}, 1}}}, typeof(Base.join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Base.IndexStyle}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.summary), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Array{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.unalias), Array{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, 1}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, 1}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.collect), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol}, Tuple{Int64, Int64}}}, getfield(Base, Symbol("#5#6")){Base.Pair{A, B} where B where A}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{Type{Base.IndexStyle}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.length), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.length), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Array{Base.Pair{Symbol, AbstractArray{T, 1} where T}, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.unalias), Array{Base.Pair{Symbol, AbstractArray{T, 1} where T}, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Pair{Symbol, AbstractArray{T, 1} where T}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, AbstractArray{T, 1} where T}, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.collect), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Symbol, AbstractArray{T, 1} where T}, 1}, Base.Pair{Symbol, Array{Union{Base.Missing, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Pair{Symbol, Array{Int64, 1}}, Vararg{Base.Pair{Symbol, Array{Int64, 1}}, N} where N})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Pair{Symbol, AbstractArray{T, 1} where T}, 1}, Array{Base.Pair{Symbol, Array{Int64, 1}}, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Symbol, AbstractArray{T, 1} where T}, Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.:(==)), Array{AbstractArray{T, 1} where T, 1}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.map), Function, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestIteration, Symbol("#1#2")), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(TestIteration, Symbol("#1#2")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base._collect), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(TestIteration, Symbol("#1#2"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(TestIteration, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.convert), Type{Array{Union{Base.Missing, Int64}, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Union{Base.Missing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.minimum), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Type{Int64}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(TestIteration, Symbol("#1#2"))}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(TestIteration, Symbol("#1#2"))}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, getfield(TestIteration, Symbol("#1#2"))}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.map), Type{T} where T, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Array{T, 1} where T}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base._collect), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Type{Array{T, 1} where T}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Type{Array{T, 1} where T}}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Type{Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Type{Array{T, 1} where T}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Type{Array{T, 1} where T}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Type{Array{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(DataFrames.mapcols), typeof(Base.minimum), DataFrames.DataFrame})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.minimum), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._collect), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.minimum)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.minimum)}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{Int64}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.minimum)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.minimum)}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.minimum)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.mapcols), Type{Array{Float64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Array{Float64, 1}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.vect), Type{Float64}, Vararg{Type{Float64}, N} where N})
precompile(Tuple{typeof(Base.map), Type{T} where T, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Array{Float64, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._collect), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base._similar_for), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{Array{Float64, 1}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{Array{Float64, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{Array{Float64, 1}}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Type{Array{Float64, 1}}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.eltype), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, String}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Base.Missing, String}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.StepRange{Int64, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.StepRange{Int64, Int64}}, String, Int64, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRange{Int64, Int64}, Tuple{Base.StepRange{Int64, Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.StepRange{Int64, Int64}}, Base.StepRange{Int64, Int64}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.StepRange{Int64, Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.StepRange{Int64, Int64}}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Int64}, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}}, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.StepRange{Int64, Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, String}, 1}, Tuple{Base.StepRange{Int64, Int64}}})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, String}, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}}, Array{Union{Base.Missing, String}, 1}, Tuple{Base.StepRange{Int64, Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Base.StepRange{Int64, Int64}}, true}, Base.SubArray{Union{Base.Missing, String}, 1, Array{Union{Base.Missing, String}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames.mapcols), typeof(Base.sum), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(TestIteration, Symbol("#3#8")), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(TestIteration, Symbol("#4#9")), DataFrames.DataFrame})
precompile(Tuple{getfield(TestIteration, Symbol("#4#9")), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(TestIteration, Symbol("#5#10")), DataFrames.DataFrame})
precompile(Tuple{getfield(TestIteration, Symbol("#5#10")), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(TestIteration, Symbol("#6#11")), DataFrames.DataFrame})
precompile(Tuple{getfield(TestIteration, Symbol("#6#11")), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.mapcols), getfield(TestIteration, Symbol("#7#12")), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.eachrow), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameRows{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.eachcol), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.:(==)), Base.Pair{Symbol, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameRows{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.size), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.UnitRange{Int64}}}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRows{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:y3, :y1, :y4), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:y3, :y1, :y4), Tuple{Int64, Int64, Int64}}, NamedTuple{(:y3, :y1, :y4), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.length), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{NamedTuple{(:y1, :y2, :y3), T} where T<:Tuple}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:y1, :y2, :y3), Tuple{Int64, Int64, Int64}}, NamedTuple{(:y1, :y2, :y3), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Symbol})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Symbol})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{typeof(Base.eachcol), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.eachcol), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{typeof(Base.eachrow), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Symbol})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Symbol})
precompile(Tuple{typeof(Base.propertynames), DataFrames.DataFrameRows{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameRows{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.unique!), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Bool})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame, Bool})
precompile(Tuple{typeof(Base.unique), DataFrames.DataFrame, Bool})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing, Base.Missing, String, Base.Missing, String, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing, Base.Missing, String, String, String, String}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing, String, Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{String, String, Base.Missing, String, String}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Base.Val{true}})
precompile(Tuple{typeof(Base._deleteat!), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#126#127")){Array{Int64, 1}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{getfield(DataFrames, Symbol("#68#69")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#68#69")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}}, Base.Val{true}})
precompile(Tuple{typeof(Base.unique), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.deleterows!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unique!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Bool})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Bool})
precompile(Tuple{typeof(Base.unique), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, true}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, true}, Bool})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, true}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.isequal_row), Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, true}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.OneTo{Int64}}, true}}, Base.Val{true}})
precompile(Tuple{Type{NamedTuple{(:allcols, :allrows), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.DataFrame, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(Base.summary), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allcols, :allrows), Tuple{Bool, Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float32, 1}})
precompile(Tuple{typeof(Base.isassigned), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, Float32})
precompile(Tuple{typeof(Base.eltype), Array{Float32, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allcols, :allrows), Tuple{Bool, Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/plain")}, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:A,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:A,), Tuple{Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A,), Tuple{Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Int64, 2}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Nothing, typeof(DataFrames._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##show#349")), Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{Type{NamedTuple{(:allcols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allcols,), Tuple{Bool}}, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:allrows, :allcols), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allrows, :allcols), Tuple{Bool, Bool}}, typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.show), DataFrames.DataFrame})
precompile(Tuple{typeof(TestShow.capture_stdout), getfield(TestShow, Symbol("#1#3")){DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#350")), Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.DataFrame, Base.PipeEndpoint, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.PipeEndpoint, DataFrames.DataFrame, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.PipeEndpoint, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Nothing, typeof(DataFrames._show), Base.PipeEndpoint, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allrows, :allcols, :splitcols, :rowlabel, :summary), Tuple{Bool, Bool, Bool, Symbol, Bool}}, typeof(Base.show), Base.PipeEndpoint, DataFrames.DataFrame})
precompile(Tuple{typeof(TestShow.capture_stdout), getfield(TestShow, Symbol("#2#4")){DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(DataFrames.ourshow), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.PipeEndpoint, Float64})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{Base.PipeEndpoint}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.PipeEndpoint}, Float64})
precompile(Tuple{typeof(DataFrames.ourshow), Base.PipeEndpoint, Float64})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allrows, :allcols), Tuple{Bool, Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:allrows,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allrows,), Tuple{Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allcols,), Tuple{Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), NamedTuple{(:allcols, :allrows), Tuple{Bool, Bool}}, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.StackedVector}, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.StackedVector})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.StackedVector})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Nothing})
precompile(Tuple{typeof(Base.isempty), DataFrames.StackedVector})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.StackedVector})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, DataFrames.StackedVector})
precompile(Tuple{typeof(Base.isassigned), DataFrames.StackedVector, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.StackedVector, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.StackedVector, Char, Char})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.StackedVector})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{DataType}, Base.Generator{Array{Any, 1}, typeof(Base.eltype)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{DataType, 1}, Base.Generator{Array{Any, 1}, typeof(Base.eltype)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Array{Any, 1}, typeof(Base.eltype)}, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T, Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Nothing})
precompile(Tuple{typeof(Base.in), Type, Tuple{DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, DataType}})
precompile(Tuple{getfield(DataFrames, Symbol("#338#339")), Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.RepeatedVector{T} where T}, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.RepeatedVector{Int64}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.RepeatedVector{Int64}})
precompile(Tuple{typeof(Base.length), DataFrames.RepeatedVector{Int64}})
precompile(Tuple{typeof(Base.isempty), DataFrames.RepeatedVector{Int64}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.RepeatedVector{Int64}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, DataFrames.RepeatedVector{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.RepeatedVector{Int64}, Int64})
precompile(Tuple{typeof(Base.isassigned), DataFrames.RepeatedVector{Int64}, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataFrames.RepeatedVector{Int64}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.RepeatedVector{Int64}, Char, Char})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.RepeatedVector{Int64}})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Base.Pair{Symbol, Bool}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.Pair{Symbol, Bool}, Int64, typeof(Base.sprint), Function, DataFrames.DataFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##sprint")), NamedTuple{(:context,), Tuple{Base.Pair{Symbol, Bool}}}, typeof(Base.sprint), Function, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.ourshow), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Missing})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Missing})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Missing})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Missing})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Missing})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Tuple{Symbol, Base.Missing, Symbol}})
precompile(Tuple{typeof(Base.promote_typeof), Symbol, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Symbol}, Type{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Symbol, String, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:A, :B, :C), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Any, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B, :C), Tuple{Array{Union{Base.Missing, Symbol}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Union{Base.Missing, Symbol}, 1}})
precompile(Tuple{typeof(Base.isassigned), Array{Union{Base.Missing, Symbol}, 1}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.isassigned), Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), String, Nothing})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{Union{Nothing, String}}})
precompile(Tuple{Type{Array{Union{Nothing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Tuple{String, String, Nothing}})
precompile(Tuple{Type{NamedTuple{(:A, :B), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Union{Nothing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Array{Union{Nothing, String}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Float64, 1}, Array{Union{Nothing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Float64, 1}, Array{Union{Nothing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Nothing, String}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Nothing, String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Nothing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{Nothing, String}, 1}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Union{Nothing, String}, 1}})
precompile(Tuple{typeof(Base.isassigned), Array{Union{Nothing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{Nothing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Vararg{String, N} where N})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Array{String, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.isassigned), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(DataFrames.ourshow), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Missing})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Missing})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Missing})
precompile(Tuple{typeof(Base.big), Float64})
precompile(Tuple{typeof(Base.vect), Base.MPFR.BigFloat, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.MPFR.BigFloat, Base.Missing})
precompile(Tuple{Type{Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}, Tuple{Base.MPFR.BigFloat, Base.Missing}})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}})
precompile(Tuple{typeof(Base.isassigned), Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}, Int64})
precompile(Tuple{typeof(Base.isfinite), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.MPFR._calculate_buffer_size!), Array{UInt8, 1}, String, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.MPFR._fill_buffer!), Array{UInt8, 1}, String, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.MPFR.string_mpfr), Base.MPFR.BigFloat, String})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, Char})
precompile(Tuple{typeof(Base.first), Base.SubString{String}})
precompile(Tuple{typeof(Base.rstrip), Base.Fix2{typeof(Base.in), Char}, String})
precompile(Tuple{typeof(Base.MPFR._prettify_bigfloat), String})
precompile(Tuple{typeof(Base.print_to_string), Float64})
precompile(Tuple{typeof(Base.MPFR._string), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(DataFrames.ourshow), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(DataFrames.ourstrwidth), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, Base.MPFR.BigFloat}, 1}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Base.MPFR.BigFloat}}})
precompile(Tuple{typeof(Base.ismissing), Base.MPFR.BigFloat})
precompile(Tuple{typeof(DataFrames.ourshow), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.float), Base.Irrational{:π}})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#280")), Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(TestShow, Symbol("#5#8")), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#283")), Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(TestShow, Symbol("#6#9")), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{getfield(DataFrames, Symbol("##show#283")), Bool, Bool, Bool, Symbol, Bool, typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{getfield(TestShow, Symbol("#7#10")), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.sprint), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames.getmaxwidths), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Symbol, Nothing})
precompile(Tuple{typeof(Base.summary), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.showrowindices), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.UnitRange{Int64}, Array{Int64, 1}, Int64, Int64, Nothing})
precompile(Tuple{typeof(DataFrames.showrows), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Int64, 1}, Bool, Bool, Symbol, Bool, Nothing})
precompile(Tuple{getfield(DataFrames, Symbol("##_show#348")), Bool, Bool, Bool, Symbol, Bool, Nothing, typeof(DataFrames._show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.UnitRange{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.AbstractRange{T} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.UnitRange{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Base.UnitRange{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.copy), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("#30#32")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#31#33")){Base.Regex}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}, getfield(DataFrames, Symbol("#30#32")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#31#33")){Base.Regex}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}, getfield(DataFrames, Symbol("#30#32")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, UInt64, Base.Colon})
precompile(Tuple{Type{Base.GMP.BigInt}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.GMP.BigInt, Base.Colon})
precompile(Tuple{Base.Colon, UInt64, UInt64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{UInt64}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Base.UnitRange{UInt64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{UInt64}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._any), getfield(DataFrames, Symbol("#158#159")), Base.UnitRange{Base.GMP.BigInt}, Base.Colon})
precompile(Tuple{Type{Array{Int64, 1}}, Base.UnitRange{Base.GMP.BigInt}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Base.GMP.BigInt}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, UInt64, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.GMP.BigInt, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{UInt64}, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Base.GMP.BigInt}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.BitArray{1}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Base.Regex})
precompile(Tuple{Type{DataFrames.SubDataFrame{D, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}}, Array{Int64, 1}, Tuple{Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}, Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.BitArray{1}, Symbol})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, Base.LogicalIndex{Int64, Base.BitArray{1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copymutable), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base._unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("#409#410"))}, Int64, Tuple{Int64, UInt64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("#409#410"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.BitArray{1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#184#185")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.BitArray{1}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrame, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Type{Integer}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Integer, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Integer, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Type{Base.GMP.BigInt}, Int64, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Base.GMP.BigInt, 1}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Integer}}, Int64, Int64})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#160#161")), Array{Union{Base.Missing, Integer}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Union{Base.Missing, Integer}, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Union{Base.Missing, Integer}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, UInt64}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Int64, 1}, Base.IndexLinear, Array{Union{Base.Missing, UInt64}, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Union{Base.Missing, UInt64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Type{Union{Base.Missing, Base.GMP.BigInt}}, Int64, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Union{Base.Missing, Base.GMP.BigInt}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Int64})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Function})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Base.Regex})
precompile(Tuple{typeof(Base.size), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.size), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.Colon})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Function})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, UInt64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, UInt64, Base.Colon})
precompile(Tuple{typeof(Base._in_unit_range), Base.UnitRange{Int64}, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.GMP.BigInt, Base.Colon})
precompile(Tuple{typeof(Base.first), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.BitArray{1}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, UInt64, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.GMP.BigInt, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.BitArray{1}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Base.Regex})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Symbol})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.BitArray{1}, Symbol})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Colon, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.BitArray{1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Colon, Base.BitArray{1}})
precompile(Tuple{Type{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Array{Integer, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Integer, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Integer, 1}, Base.Colon})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{UInt64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Base.GMP.BigInt, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Base.GMP.BigInt, 1}, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.checkindex), Type{Bool}, Base.OneTo{Int64}, Base.Missing})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Union{Base.Missing, Int64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.to_index), Base.Missing})
precompile(Tuple{typeof(Base.to_index), Base.UnitRange{Int64}, Base.Missing})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Union{Base.Missing, Integer}, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Union{Base.Missing, Integer}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Integer}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Union{Base.Missing, UInt64}, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Union{Base.Missing, UInt64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, UInt64}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Union{Base.Missing, Base.GMP.BigInt}, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Union{Base.Missing, Base.GMP.BigInt}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Array{Union{Base.Missing, Base.GMP.BigInt}, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Int64})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Function})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Union{Base.Missing, Int64}, 1}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Bool})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#107#108")), Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Array{Float64, 1}}}, getfield(DataFrames, Symbol("#107#108"))}})
precompile(Tuple{typeof(Base.propertynames), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.vcat), Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{1}, typeof(Base.cat_t), Type{Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.cat_similar), Int64, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Int64, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.view), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Function})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Int64, Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##cat")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat), Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat#104")), Base.Val{1}, typeof(Base.cat), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{NamedTuple{(:y,), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Symbol}, NamedTuple{(:y,), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:y,), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.index), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.index), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.Index, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.haskey), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.haskey), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.haskey), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{typeof(DataFrames.deleterows!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.parentindices), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Array{Int64, 1}, Base.OneTo{Int64}}, Tuple{Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.parentindices), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._eq), Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.parentindices), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}, Tuple{Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.unalias), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#162")), Bool, Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._all), getfield(TestSubDataFrame, Symbol("#1#3")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._all), getfield(TestSubDataFrame, Symbol("#2#4")), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.Colon})
precompile(Tuple{Type{NamedTuple{(:x, :y, :z), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :z), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.unalias), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#162")), Bool, Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.in), Expr, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Symbol, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Tables.istable), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rowaccess), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.columnaccess), DataFrames.DataFrame})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Symbol}}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol}, Type{Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Tables.columntable), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), DataFrames.DataFrame})
precompile(Tuple{getfield(Tables, Symbol("##s19#18")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#19#21")){Tuple{Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b), Tuple{Int64, Symbol}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Tables.columns), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Tables.Schema{(:a, :b), Tuple{Int64, Symbol}}, Tables.Schema{(:a, :b), Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Tables.materializer), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.first), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base.propertynames), Tables.ColumnsRow{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.ColumnsRow{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), Tables.ColumnsRow{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), Tables.ColumnsRow{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}, Int64})
precompile(Tuple{typeof(Tables.columnnames), Tables.ColumnsRow{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Tables.getcolumn), Tables.ColumnsRow{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}, Type{Int64}, Int64, Symbol})
precompile(Tuple{typeof(Tables.rowtable), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.eltype), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}})
precompile(Tuple{typeof(Tables.namedtupleiterator), Type{T} where T, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#11")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tables.NamedTupleIterator{Tables.Schema{(:a, :b), Tuple{Int64, Symbol}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.collect), Tables.NamedTupleIterator{Tables.Schema{(:a, :b), Tuple{Int64, Symbol}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, 1}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, 1}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, 1}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}}, Tuple{Int64, Tuple{Base.OneTo{Int64}, Int64}}})
precompile(Tuple{typeof(Tables.nondatavaluenamedtuple), Type{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#27")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#28#30")){DataType}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#28#30")){DataType}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#28#30")){DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#28#30")){DataType}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#9")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}}, Type{Int64}, Int64, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}}, Type{Symbol}, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#451")), Bool, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Symbol, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#459")), Bool, Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Int64, Symbol}}, 1}})
precompile(Tuple{typeof(Tables.undatavalue), Int64})
precompile(Tuple{typeof(Tables.undatavalue), Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#452")), Bool, typeof(DataFrames.fromcolumns), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Tables.getcolumn), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Char, String})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.Missing, Char, String}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.eltype), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Tables.namedtupleiterator), Type{T} where T, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tables.NamedTupleIterator{Tables.Schema{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.collect), Tables.NamedTupleIterator{Tables.Schema{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}}}})
precompile(Tuple{typeof(Tables.nondatavaluenamedtuple), Type{NamedTuple{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}}})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}}, Type{Union{Base.Missing, Int64}}, Int64, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}}, Type{Any}, Int64, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#451")), Bool, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#459")), Bool, Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Union{Base.Missing, Int64}, Any}}, 1}})
precompile(Tuple{typeof(Tables.undatavalue), Base.Missing})
precompile(Tuple{typeof(Tables.undatavalue), Char})
precompile(Tuple{typeof(Tables.undatavalue), String})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#452")), Bool, typeof(DataFrames.fromcolumns), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Any, 1}}}})
precompile(Tuple{Type{TestTables.DuplicateNamesTable}})
precompile(Tuple{typeof(Base.:(|>)), TestTables.DuplicateNamesTable, Type{T} where T})
precompile(Tuple{Type{Union{}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:a, :a, :b), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, TestTables.DuplicateNamesTable})
precompile(Tuple{Type{DataFrames.DataFrame}, TestTables.DuplicateNamesTable})
precompile(Tuple{Type{TestTables.DuplicateNamesColumnTable}})
precompile(Tuple{typeof(Base.:(|>)), TestTables.DuplicateNamesColumnTable, Type{T} where T})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#452")), Bool, typeof(DataFrames.fromcolumns), TestTables.DuplicateNamesColumnTable, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, TestTables.DuplicateNamesColumnTable})
precompile(Tuple{Type{DataFrames.DataFrame}, TestTables.DuplicateNamesColumnTable})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a,), Tuple{Int64}}, Vararg{NamedTuple{(:a,), Tuple{Int64}}, N} where N})
precompile(Tuple{typeof(Tables.nondatavaluenamedtuple), Type{NamedTuple{(:a,), Tuple{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#451")), Bool, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a,), Tuple{Array{Int64, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#459")), Bool, Type{DataFrames.DataFrame}, Array{NamedTuple{(:a,), Tuple{Int64}}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{NamedTuple{(:a,), Tuple{Int64}}, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Int64, Symbol, Base.Missing}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}, Vararg{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}, N} where N})
precompile(Tuple{Type{TestTables.NamedTupleIterator{T} where T<:(NamedTuple{names, T} where T<:Tuple where names)}, Array{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}, 1}})
precompile(Tuple{typeof(Tables.nondatavaluenamedtuple), Type{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}, Type{Int64}, Int64, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}, Type{Symbol}, Int64, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}, Type{Base.Missing}, Int64, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#451")), Bool, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{}}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Base.Missing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, Symbol, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, TestTables.NamedTupleIterator{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, TestTables.NamedTupleIterator{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}})
precompile(Tuple{typeof(DataFrames.getvector), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.getvector), Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.getvector), Array{Base.Missing, 1}})
precompile(Tuple{Type{TestTables.EltypeUnknownIterator}, Array{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}, 1}})
precompile(Tuple{typeof(Base.iterate), TestTables.EltypeUnknownIterator, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, TestTables.EltypeUnknownIterator})
precompile(Tuple{Type{DataFrames.DataFrame}, TestTables.EltypeUnknownIterator})
precompile(Tuple{typeof(Base.length), Array{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}, 1}, Int64})
precompile(Tuple{typeof(Tables.columnnames), NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}})
precompile(Tuple{Type{Tables.IteratorRow{T} where T}, NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}})
precompile(Tuple{typeof(Tables.columnnames), Tables.IteratorRow{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol, Symbol}, Nothing})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c), nothing}}})
precompile(Tuple{typeof(Base.map), Type{T} where T, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Symbol}, Symbol})
precompile(Tuple{getfield(Tables, Symbol("##s19#10")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Tables.EmptyVector, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Missing, 1}, Int64, Tables.EmptyVector, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Tables.EmptyVector, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Tables.EmptyVector, Int64, Int64})
precompile(Tuple{typeof(Tables._buildcolumns), Tables.IteratorWrapper{TestTables.EltypeUnknownIterator}, Tables.IteratorRow{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}, Int64, Tables.Schema{(:a, :b, :c), nothing}, Tuple{Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tables.EmptyVector}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{Array{Int64, 1}, Array{Symbol, 1}, Tables.EmptyVector}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Int64, 1}, Array{Symbol, 1}, Tables.EmptyVector}, Int64, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{typeof(Tables.__buildcolumns), Tables.IteratorWrapper{TestTables.EltypeUnknownIterator}, Int64, Tables.Schema{(:a, :b, :c), nothing}, Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Symbol}, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Tables.eachcolumns), typeof(Tables.add_or_widen!), Tables.Schema{(:a, :b, :c), nothing}, Tables.IteratorRow{NamedTuple{(:a, :b, :c), Tuple{Int64, Symbol, Base.Missing}}}, Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}, Int64, Base.RefValue{Any}, Base.SizeUnknown})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Tables.columnnames), Tables.CopiedColumns{NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##fromcolumns")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Symbol, 1}, Array{Base.Missing, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.append!), DataFrames.DataFrame, TestTables.EltypeUnknownIterator})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.append!), Array{Base.Missing, 1}, Array{Base.Missing, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestTables, Symbol("#1#2")), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{CategoricalArrays.CategoricalString{UInt32}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Generator{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, getfield(TestTables, Symbol("#1#2"))}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalString{UInt32}, Base.Generator{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, getfield(TestTables, Symbol("#1#2"))}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, getfield(TestTables, Symbol("#1#2"))}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#452")), Bool, typeof(DataFrames.fromcolumns), NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Tables.buildcolumns), Nothing, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, Tables.EmptyVector, Int64, Int64})
precompile(Tuple{typeof(Tables._buildcolumns), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Tables.ColumnsRow{NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Int64, Tables.Schema{(:a, :b), nothing}, Tuple{Tables.EmptyVector, Tables.EmptyVector}, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.allocatedinline), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Tables.EmptyVector, Tables.EmptyVector}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tables.EmptyVector}})
precompile(Tuple{typeof(Tables.replacex), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tables.EmptyVector}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Tables.__buildcolumns), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Int64, Tables.Schema{(:a, :b), nothing}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:a, :b), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(DataFrames.DataFrame!), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(DataFrames.DataFrame!), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Vararg{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, N} where N})
precompile(Tuple{typeof(Tables.nondatavaluenamedtuple), Type{NamedTuple{(:a, :b), Tuple{Int64, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#451")), Bool, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#459")), Bool, Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{typeof(DataFrames.DataFrame!), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{Type{Ref{T} where T}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.RefValue{DataFrames.DataFrame}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Tables.columnindex), Tuple{Base.RefValue{DataFrames.DataFrame}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Tables.columnindex), Tuple{Base.RefValue{DataFrames.DataFrame}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Tables.columnindex), Tuple{Base.RefValue{DataFrames.DataFrame}, Array{Symbol, 1}}}})
precompile(Tuple{Type{Tables.Schema{(:x1, :x2, :x3, :x4), Tuple{Float64, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Tables.columnindex), Tables.Schema{(:x1, :x2, :x3, :x4), Tuple{Float64, Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{Type{Array{AbstractArray{T, 1} where T, 1}}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(DataFrames, Symbol("#455#457")), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.last), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, typeof(Base.first)}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol, Symbol, Symbol}, Nothing})
precompile(Tuple{Type{Tables.Schema{(:a, :b, :c, :d), nothing}}})
precompile(Tuple{typeof(Base.map), Type{T} where T, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Tables.getcolumn), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{typeof(Tables.getcolumn), Tables.IteratorRow{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Symbol})
precompile(Tuple{typeof(Tables._buildcolumns), Tables.IteratorWrapper{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}, Tables.IteratorRow{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}}, Tuple{Base.OneTo{Int64}, Int64}, Tables.Schema{(:a, :b, :c, :d), nothing}, Tuple{Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Base.RefValue{Any}})
precompile(Tuple{typeof(Tables.undatavalue), Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Tables.EmptyVector, Int64, Int64})
precompile(Tuple{typeof(Tables.add_or_widen!), Float64, Int64, Symbol, Tables.EmptyVector, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{Array{Float64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Float64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Tables.EmptyVector, Tables.EmptyVector}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Float64, 1}, Array{Float64, 1}, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Tables.EmptyVector}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Tables.EmptyVector}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Tables.__buildcolumns), Tables.IteratorWrapper{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}, Tuple{Base.OneTo{Int64}, Int64}, Tables.Schema{(:a, :b, :c, :d), nothing}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Tables.add_or_widen!), Float64, Int64, Symbol, Array{Float64, 1}, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:a, :b, :c, :d), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Tables.columnnames), Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :d), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#451")), Bool, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :d), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##fromcolumns")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b, :c, :d), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Vararg{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.any), Function, Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}})
precompile(Tuple{typeof(Base._any), getfield(TestTables, Symbol("#3#10")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.DataFrame!), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base._any), getfield(TestTables, Symbol("#4#11")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.Colon})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#455#457")), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Base.Colon})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, typeof(Base.first)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{getfield(DataFrames, Symbol("#455#457")), Base.Pair{Symbol, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._any), getfield(TestTables, Symbol("#5#12")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.DataFrame!), DataFrames.DataFrameColumns{DataFrames.DataFrame, Base.Pair{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{typeof(Base.all), Function, Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}})
precompile(Tuple{typeof(Base._all), getfield(TestTables, Symbol("#6#13")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.Colon})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._all), getfield(TestTables, Symbol("#7#14")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.Colon})
precompile(Tuple{getfield(TestTables, Symbol("#7#14")), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._any), getfield(TestTables, Symbol("#8#15")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.Colon})
precompile(Tuple{typeof(Base._any), getfield(TestTables, Symbol("#9#16")), Base.Iterators.Zip{Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.Colon})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.print_to_string), Array{String, 1}})
precompile(Tuple{typeof(Base.arg_gen), Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.PipeEndpoint, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.PipeEndpoint}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Base.PkgId}, Any, Any})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
precompile(Tuple{typeof(Base.pipeline_error), Base.ProcessChain})
precompile(Tuple{typeof(Base.read), Base.OrCmds})
precompile(Tuple{typeof(Base.read), Base.OrCmds, Type{String}})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Float64, Base.Missing, Float64}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#99#102")), Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(IteratorInterfaceExtensions.isiterable), DataFrames.DataFrame})
precompile(Tuple{typeof(TableTraits.isiterabletable), DataFrames.DataFrame})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.eltype)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Tables.schema), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.columntable), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.datavaluerows), DataFrames.DataFrame})
precompile(Tuple{typeof(IteratorInterfaceExtensions.getiterator), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Type, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{typeof(Tables.datavaluenamedtuple), Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}})
precompile(Tuple{Type{Tables.DataValueRowIterator{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#36")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tables.DataValueRowIterator{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.collect), Tables.DataValueRowIterator{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Union{Base.Missing, Float64}, 1}}}}}})
precompile(Tuple{Type{DataValues.DataValue{T} where T}, Float64})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Int64, DataValues.DataValue{Float64}}})
precompile(Tuple{Type{DataValues.DataValue{Float64}}})
precompile(Tuple{typeof(Base.vect), NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, Vararg{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, N} where N})
precompile(Tuple{typeof(Base.:(==)), Array{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, 1}, Array{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, 1}})
precompile(Tuple{typeof(IteratorInterfaceExtensions.isiterable), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(TableTraits.isiterabletable), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Tables.schema), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Tables.columntable), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Tables.rows), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Tables.datavaluerows), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(IteratorInterfaceExtensions.getiterator), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Type, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{T} where T, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Tables.getcolumn), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:a, :b), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}})
precompile(Tuple{typeof(Tables._eltypes), Type{NamedTuple{(:a, :b), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}})
precompile(Tuple{Type{Tables.DataValueRowIterator{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}})
precompile(Tuple{typeof(Base.copyto!), Array{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, 1}, Tables.DataValueRowIterator{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}}})
precompile(Tuple{typeof(Base.collect), Tables.DataValueRowIterator{NamedTuple{(:a, :b), Tuple{Int64, DataValues.DataValue{Float64}}}, Tables.Schema{(:a, :b), Tuple{Int64, Union{Base.Missing, Float64}}}, Tables.RowIterator{NamedTuple{(:a, :b), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}}}})
precompile(Tuple{Type{TestTableTraits.ColumnSource}})
precompile(Tuple{typeof(TableTraits.get_columns_copy_using_missing), TestTableTraits.ColumnSource})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#99#102")), Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, DataFrames.Index})
precompile(Tuple{getfield(DataFrames, Symbol("##fromcolumns#451")), Bool, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{String, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#453")), Bool, Type{DataFrames.DataFrame}, TestTableTraits.ColumnSource})
precompile(Tuple{Type{DataFrames.DataFrame}, TestTableTraits.ColumnSource})
precompile(Tuple{typeof(DataFrames.getvector), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.getvector), Array{String, 1}})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_typeof), Base.UnitRange{Int64}, Base.Regex, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Regex, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}, InvertedIndices.InvertedIndex{Base.Regex}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), InvertedIndices.InvertedIndex{Base.Regex}, InvertedIndices.InvertedIndex{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), InvertedIndices.InvertedIndex{Int64}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Function})
precompile(Tuple{typeof(Base.promote_type), Type{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Type{Base.Colon}})
precompile(Tuple{typeof(Base.promote_type), Type{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{InvertedIndices.InvertedIndex{Int64}}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{InvertedIndices.InvertedIndex{Base.Regex}}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Regex}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.UnitRange{Int64}}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.UnitRange{Int64}, Base.Regex, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}, InvertedIndices.InvertedIndex{Base.Regex}, InvertedIndices.InvertedIndex{Int64}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Base.Colon}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#130")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#130")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#130")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Function})
precompile(Tuple{typeof(Base.last), Base.Pair{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :b), Tuple{Int64, Int64}}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.:(==)), NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Bool, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Bool})
precompile(Tuple{typeof(Test.do_test_throws), Test.Threw, Any, Any})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.issorted), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.Order.Lt{typeof(Base.:(<=))}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.copymutable), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(Base, Symbol("#56#57")){typeof(Base.unique), typeof(Base.sort)}, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Tuple{Nothing, Nothing}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, Tuple{Tuple{Int64, Tuple{Nothing, Nothing}}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(Base._groupedunique!), Array{Int64, 1}})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Int64, 1}, Base.Set{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.unique!), Array{Int64, 1}})
precompile(Tuple{typeof(InvertedIndices.uniquesort), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}, Tuple{Nothing, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}, Tuple{Nothing, Nothing}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Int64, 1}}, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:x, :copycols), Tuple{Array{Int64, 1}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :copycols), Tuple{Array{Int64, 1}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.parent), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, typeof(Base.:(!)), Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copymutable), InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, getfield(InvertedIndices, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}, getfield(InvertedIndices, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copymutable), InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, getfield(InvertedIndices, Symbol("#1#2"))}, Int64, Tuple{Tuple{Int64, Tuple{Nothing, Nothing}}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, getfield(InvertedIndices, Symbol("#1#2"))}, Tuple{Tuple{Int64, Tuple{Nothing, Nothing}}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.SubArray{T, N, P, I, L} where L where I where P where N where T}, Base.IndexCartesian, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Tuple{Bool}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Array{Int64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, getfield(InvertedIndices, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Tuple{Nothing, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, getfield(InvertedIndices, Symbol("#1#2"))}, Int64, Tuple{Nothing, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, getfield(InvertedIndices, Symbol("#1#2"))}, Tuple{Nothing, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{Type{NamedTuple{(:x, :a, :b, :c, :d), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:x, :a, :b, :c, :d), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :a, :b, :c, :d), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.isequal), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.parent), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.filter), getfield(DataFrames, Symbol("#13#14")){Base.Regex}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#34#35")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#34#35")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Bool, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Bool, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.issorted), InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Base.Order.Lt{typeof(Base.:(<=))}})
precompile(Tuple{typeof(Base.copymutable), InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copy), InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(InvertedIndices.uniquesort), InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}, Int64})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, Tuple{Nothing, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.Slice{Base.OneTo{Int64}}, Base.OneTo{Int64}}, Base.OneTo{Int64}}, Tuple{Nothing, Nothing}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{InvertedIndices.InvertedIndexIterator{Int64, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{InvertedIndices.InvertedIndexIterator{Int64, Array{Int64, 1}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.view), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, InvertedIndices.InvertedIndex{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Int64, 1}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Colon}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(Base.replace_ref_end_!), QuoteNode, Expr})
precompile(Tuple{typeof(Base.replace_ref_end_!), LineNumberNode, Expr})
precompile(Tuple{typeof(Base.replace_ref_end_!), String, Expr})
precompile(Tuple{typeof(Base.replace_ref_end_!), Int64, Nothing})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.reshape), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndex{N} where N}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndex{N} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Base.OneTo{Int64}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{Base.OneTo{Int64}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Float64, Float64, Float64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Array{T, 1} where T}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#178#179")){DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.select), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.size), Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.parent), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function, Symbol})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Function})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.parent), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.parent), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexCartesian, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Float64, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, InvertedIndices.InvertedIndexIterator{Int64, Base.UnitRange{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Regex})
precompile(Tuple{typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.view), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.view), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.parent), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Function, Symbol})
precompile(Tuple{typeof(Base.view), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Function})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Function, Base.Colon})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##select")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{Int64, 1}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Int64, Bool, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Bool, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Int64, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Int64, Base.GMP.BigInt})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Char, Base.GMP.BigInt, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Char, Base.GMP.BigInt, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Char, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndex{N} where N}, Base.GMP.BigInt, Vararg{Integer, N} where N})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndex{N} where N}, Tuple{Base.GMP.BigInt, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, String, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Array{Int64, 1}, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Array{Int64, 1}, 1}, Array{Array{Int64, 1}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Int64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Int64, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Tuple{Int64, Int64}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Tuple{Int64, Int64}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Int64, Int64}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.Dict{Symbol, Int64}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Int64, Base.Colon})
precompile(Tuple{Type{NamedTuple{(:a, :c), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :c), Tuple{Int64, Int64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:b, :a), Tuple{Int64, Int64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.Iterators.zip), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.all), Function, Base.Iterators.Zip{Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#176#177")), Base.Iterators.Zip{Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Symbol, Symbol}}}, Base.Colon})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:a, :c), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :c), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:b, :a), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :a), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copy_to_bitarray_chunks!), Array{UInt64, 1}, Int64, Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{String, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{String, 1}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Base.BitArray{1}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{String, 1}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, Base.Colon, Symbol})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{String, 1}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{String, 1}, Function})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 2} where T}, DataFrames.DataFrame})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.eltype)}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.eltype)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 2}}, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{String, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{String, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Base.StepRange{Char, Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StepRange{Char, Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.OrdinalRange{T, Int64} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Base.StepRange{Char, Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Base.StepRange{Char, Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_typeof), String, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, String, Int64}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :z), T} where T<:Tuple}, Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :z), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :z), Tuple{Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.vect), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}}, Type{DataFrames.SubDataFrame{DataFrames.DataFrame, S, Base.UnitRange{Int64}} where S<:DataFrames.AbstractIndex}})
precompile(Tuple{typeof(Base.promote_type), Type{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}, Type{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex}})
precompile(Tuple{Type{Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}, Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Bool, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, String, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.SubDataFrame{DataFrames.DataFrame, S, T} where T<:AbstractArray{Int64, 1} where S<:DataFrames.AbstractIndex, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Int64, Bool, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, String, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Bool, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, String, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Bool, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, String, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, String, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Int64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, String, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, String, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, String, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Int64, 1}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.view), Array{Array{Int64, 1}, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Array{Int64, 1}, 1, Array{Array{Int64, 1}, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Array{Int64, 1}, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Array{Int64, 1}, 1, Array{Array{Int64, 1}, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Tuple{Int64, Int64}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, String, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.Dict{Symbol, Int64}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Dict{Symbol, Int64}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :c), Tuple{Int64, Int64}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, NamedTuple{(:a, :c), Tuple{Int64, Int64}}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:b, :a), Tuple{Int64, Int64}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, NamedTuple{(:b, :a), Tuple{Int64, Int64}}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Int64, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Function})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#166#167")), Base.Iterators.Zip{Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Symbol, Symbol}}}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{String, 1}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.UnitRange{Int64}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{String, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{String, 1}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{String, 1}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.UnitRange{Int64}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{String, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{String, 1}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{String, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{String, 1}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{String, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{String, 1}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Colon, Base.Colon}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.Colon, Base.Colon}, Tuple{Base.Colon, Base.UnitRange{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.Colon, Base.UnitRange{Int64}}, Tuple{Base.UnitRange{Int64}, Base.Colon}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Base.UnitRange{Int64}, Base.Colon}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.Colon, Base.UnitRange{Int64}}}, Type{Tuple{Base.UnitRange{Int64}, Any}}})
precompile(Tuple{typeof(Base.promote_type), Type{Tuple{Base.Colon, Base.Colon}}, Type{Tuple{Any, Any}}})
precompile(Tuple{Type{Array{Tuple{Any, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any}, 1}, Tuple{Tuple{Base.Colon, Base.Colon}, Tuple{Base.Colon, Base.UnitRange{Int64}}, Tuple{Base.UnitRange{Int64}, Base.Colon}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Colon, Base.Colon}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Colon, Base.Colon}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Any, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Colon, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Colon, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Base.Colon}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Base.Colon}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.fill!), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.ones), Type{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Int64, 2}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 2}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{Int64, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Array{Int64, 2}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vect), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Array{DataFrames.DataFrameRow{DataFrames.DataFrame, S} where S<:DataFrames.AbstractIndex, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.DataFrameRow{DataFrames.DataFrame, S} where S<:DataFrames.AbstractIndex, 1}, Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.DataFrameRow{DataFrames.DataFrame, S} where S<:DataFrames.AbstractIndex, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Base.GMP.BigInt})
precompile(Tuple{typeof(DataFrames.insert_single_entry!), DataFrames.DataFrame, Char, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Char, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Char, Int64})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Symbol, Char})
precompile(Tuple{typeof(Base.iterate), Array{DataFrames.DataFrameRow{DataFrames.DataFrame, S} where S<:DataFrames.AbstractIndex, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Tuple{Int64, Int64, Int64}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Int64, Int64, Int64}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Int64, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Int64, 2}, Function})
precompile(Tuple{typeof(Base.hcat), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestIndexing, Symbol("#1#3")), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(TestIndexing, Symbol("#1#3"))}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Dict{Symbol, Int64}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :c), Tuple{Int64, Int64}}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:b, :a), Tuple{Int64, Int64}}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Tuple{Int64, Int64}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Int64, Int64}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Tuple{Int64, Int64, Int64}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Int64, Int64, Int64}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Int64, 1}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Array{Int64, 2}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestIndexing, Symbol("#2#4")), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(TestIndexing, Symbol("#2#4"))}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.Dict{Symbol, Int64}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Dict{Symbol, Int64}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.mightalias), Base.BitArray{1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Broadcast.preprocess), Base.BitArray{1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :c), Tuple{Int64, Int64}}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :c), Tuple{Int64, Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:b, :a), Tuple{Int64, Int64}}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:b, :a), Tuple{Int64, Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, Int64}}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.Iterators.zip), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.all), Function, Base.Iterators.Zip{Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Symbol, Symbol}}}})
precompile(Tuple{typeof(Base._all), getfield(DataFrames, Symbol("#166#167")), Base.Iterators.Zip{Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Symbol, Symbol}}}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, String, Function})
precompile(Tuple{typeof(Base.fill!), Array{String, 2}, String})
precompile(Tuple{typeof(Base.fill), String, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{String, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{String, 2}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Base.UnitRange{Int64}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.UnitRange{Int64}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.UnitRange{Int64}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, typeof(Base.:(!)), Base.Colon})
precompile(Tuple{typeof(Base.fill), Int64, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{Int64, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, typeof(Base.:(!)), Base.Colon})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Int64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 2}, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame, typeof(Base.:(!)), Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, typeof(Base.:(!)), Function})
precompile(Tuple{typeof(Base.promote_typeof), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.Colon}, Type{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.Colon, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.promote_typeof), Function, Base.Regex, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), InvertedIndices.InvertedIndex{Base.Regex}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.Colon, Base.Regex, InvertedIndices.InvertedIndex{Base.Regex}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{Float64, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.Colon, Base.Regex})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.Colon, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Base.BitArray{1}, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 1}, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Function})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.Colon, Base.Regex})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.Colon, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Base.BitArray{1}, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Base.SubArray{Int64, 1, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.UnitRange{Int64}, Base.Regex})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64, Int64}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Array{Bool, 1}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.OneTo{Int64}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 1}, Array{Int64, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{Int64, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Int64, Base.Colon})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.copy_to_bitarray_chunks!), Array{UInt64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{Float64, 1}, Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 1}, Array{Float64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Array{Float64, 1}, Function})
precompile(Tuple{typeof(Base.fill), Float64, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{Test.Threw}, InexactError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#28#29")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#28#29")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#28#29")){DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.rand), Int64, Int64})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Float64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{getfield(DataFrames, Symbol("#272#273")){Int64}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.similar), Type{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Array{Float64, 2}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Array{Float64, 2}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.DataFrame, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.DataFrame, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Array{Float64, 2}, DataFrames.DataFrame, Int64, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.DataFrame}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.similar), Type{Array{Bool, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.trues), Tuple{Int64, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Base.BitArray{2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.BitArray{2}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.ones), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.OneTo{Int64}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.OneTo{Int64}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.OneTo{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.OneTo{Int64}}}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Float64, 2}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.permutedims), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{getfield(DataFrames, Symbol("#272#273")){Int64}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#1#3")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#2#4")), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 2} where T}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, typeof(Base.eltype)}})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, typeof(Base.eltype)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 2}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 2}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(==))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.size), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.axes), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.OneTo{Int64}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.OneTo{Int64}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.ReshapedArray{Int64, 2, Base.OneTo{Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.zeros), Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, DataFrames.DataFrame, Base.Val{2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, DataFrames.DataFrame, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#274#275")), Base.RefValue{typeof(Base.:(^))}})
precompile(Tuple{getfield(DataFrames, Symbol("#274#275")), Base.RefValue{Base.Val{2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Union{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Symbol, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{getfield(DataFrames, Symbol("#272#273")){Int64}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Array{Int64, 1}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Array{Int64, 1}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Array{Int64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Array{Int64, 2}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Array{Int64, 2}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 2}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Dict{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Nothing}}})
precompile(Tuple{typeof(Base.hash), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Nothing}, Int64})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Nothing}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Nothing}, Nothing, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Nothing}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Set{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Int64, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 2}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 2}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Float64, 2}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:nms,), Tuple{Array{Symbol, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##rename!#4")), Bool, typeof(DataFrames.rename!), DataFrames.Index, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{DataFrames.DataFrame, Int64, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.similar), Type{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.DataFrame, Array{Int64, 1}, DataFrames.DataFrame, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Union{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Symbol, 1}}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#272#273")){Int64}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(-)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.empty), Array{Union{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Symbol, 1}}, 1}, Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.push!), Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Symbol, 1}, 1}, Int64, Array{Array{Symbol, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{Symbol, 1}, 1}, Int64, Array{Array{Symbol, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{AbstractArray{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.unique!), typeof(Base.identity), Array{AbstractArray{Symbol, 1}, 1}})
precompile(Tuple{typeof(Base.unique!), Array{AbstractArray{Symbol, 1}, 1}})
precompile(Tuple{Type{Base.Set{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Array{Symbol, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{AbstractArray{Symbol, 1}, 1}, Base.Set{Array{Symbol, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Array{Symbol, 1}, Nothing}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.:(∉)), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Set{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{Symbol, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.:(!=)), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Tuple{Base.Missing, String}})
precompile(Tuple{Type{Base.Dict{Int64, UInt16}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, UInt16}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, UInt16}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt16}, UInt8, Int64})
precompile(Tuple{Type{Base.Dict{Int64, UInt16}}, Base.Dict{Int64, UInt8}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, UInt16}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt32}, UInt16, Int64})
precompile(Tuple{Type{Base.Dict{Int64, UInt32}}, Base.Dict{Int64, UInt16}})
precompile(Tuple{Type{Base.Dict{Int64, UInt64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, UInt64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, UInt64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt64}, UInt32, Int64})
precompile(Tuple{Type{Base.Dict{Int64, UInt64}}, Base.Dict{Int64, UInt32}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, UInt64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt64}, UInt64, Int64})
precompile(Tuple{typeof(PooledArrays._label), Array{Int64, 1}, Type{Int64}, Type{UInt64}, Int64, Array{UInt64, 1}, Base.Dict{Int64, UInt64}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt32}, UInt32, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt16}, UInt16, Int64})
precompile(Tuple{typeof(PooledArrays._label), Array{Int64, 1}, Type{Int64}, Type{UInt16}, Int64, Array{UInt16, 1}, Base.Dict{Int64, UInt16}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, UInt8}, UInt8, Int64})
precompile(Tuple{Type{PooledArrays.PooledArray{Int64, R, N, RA} where RA where N where R<:Integer}, Array{Int64, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{Int64, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt8, 1}}, Base.Dict{Int64, UInt8}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, UInt8}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt8}, Base.Missing})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, UInt16}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, Int64}, UInt16}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt16}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt16}, UInt8, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt16}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt16}, UInt8, Int64})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, UInt16}}, Base.Dict{Union{Base.Missing, Int64}, UInt8}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt16}, Base.Missing})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, UInt32}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, Int64}, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt32}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt32}, UInt16, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt32}, UInt16, Int64})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, UInt32}}, Base.Dict{Union{Base.Missing, Int64}, UInt16}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt32}, Base.Missing})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, UInt64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, Int64}, UInt64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt64}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt64}, UInt32, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt64}, UInt32, Int64})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, Int64}, UInt64}}, Base.Dict{Union{Base.Missing, Int64}, UInt32}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt64}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt64}, UInt64, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt64}, UInt64, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt64}, Int64})
precompile(Tuple{typeof(PooledArrays._label), Array{Union{Base.Missing, Int64}, 1}, Type{Union{Base.Missing, Int64}}, Type{UInt64}, Int64, Array{UInt64, 1}, Base.Dict{Union{Base.Missing, Int64}, UInt64}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt32}, UInt32, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt32}, UInt32, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt16}, UInt16, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt16}, UInt16, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt16}, Int64})
precompile(Tuple{typeof(PooledArrays._label), Array{Union{Base.Missing, Int64}, 1}, Type{Union{Base.Missing, Int64}}, Type{UInt16}, Int64, Array{UInt16, 1}, Base.Dict{Union{Base.Missing, Int64}, UInt16}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Base.Missing, Int64}, UInt8}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt8}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt8}, UInt8, Base.Missing})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Base.Missing, Int64}, UInt8}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Base.Missing, Int64}, UInt8}, UInt8, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Base.Missing, Int64}, UInt8}, Int64})
precompile(Tuple{Type{PooledArrays.PooledArray{Union{Base.Missing, Int64}, R, N, RA} where RA where N where R<:Integer}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt8, 1}}, Base.Dict{Union{Base.Missing, Int64}, UInt8}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Bool})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Bool}, 1}, Tuple{Base.Missing, Bool}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.Missing, Float64}})
precompile(Tuple{Type{NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Array{Bool, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Array{Bool, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Array{Bool, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Array{Bool, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Union{Base.Missing, Bool}, 1}, Array{Float64, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Int64, UInt8}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Int64, UInt8}})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{Int64, UInt8}})
precompile(Tuple{typeof(Base.copy), PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Union{Base.Missing, Int64}, UInt8}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Union{Base.Missing, Int64}, UInt8}})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{Union{Base.Missing, Int64}, UInt8}})
precompile(Tuple{typeof(Base.copy), PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Nothing}, Type{String}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Tuple{Nothing, String}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Tuple{String, Nothing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int64}, 1}, Tuple{Nothing, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int64}, 1}, Tuple{Int64, Nothing}})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, Bool})
precompile(Tuple{Type{Array{Union{Nothing, Bool}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Bool}, 1}, Tuple{Nothing, Bool}})
precompile(Tuple{typeof(Base.promote_typeof), Bool, Nothing})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Bool}, 1}, Tuple{Bool, Nothing}})
precompile(Tuple{typeof(Base.promote_typeof), Nothing, Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Float64}, 1}, Tuple{Nothing, Float64}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Float64}, 1}, Tuple{Float64, Nothing}})
precompile(Tuple{Type{NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, Array{Int64, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Bool, 1}, Array{Union{Nothing, Bool}, 1}, Array{Union{Nothing, Bool}, 1}, Array{Float64, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, Array{Int64, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Bool, 1}, Array{Union{Nothing, Bool}, 1}, Array{Union{Nothing, Bool}, 1}, Array{Float64, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, Array{Int64, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Bool, 1}, Array{Union{Nothing, Bool}, 1}, Array{Union{Nothing, Bool}, 1}, Array{Float64, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:c11, :c12, :c13, :c21, :c22, :c23, :p11, :p12, :p13, :p21, :p22, :p23, :b1, :b2, :b3, :f1, :f2, :f3, :s1, :s2, :s3), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}, Array{Int64, 1}, Array{Union{Nothing, Int64}, 1}, Array{Union{Nothing, Int64}, 1}, Array{Bool, 1}, Array{Union{Nothing, Bool}, 1}, Array{Union{Nothing, Bool}, 1}, Array{Float64, 1}, Array{Union{Nothing, Float64}, 1}, Array{Union{Nothing, Float64}, 1}, Array{String, 1}, Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Nothing, String}, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Nothing, Bool}, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{T, 1} where T}, Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Union{Nothing, Bool}, 1}})
precompile(Tuple{typeof(Base.copy), Array{Union{Nothing, Bool}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Nothing, Bool}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.similar), Type{Array{CategoricalArrays.CategoricalString{UInt32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalString{UInt32}, Int64})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{String, 1}, Vararg{Array{String, 1}, N} where N})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.similar), Type{Array{Base.Missing, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, CategoricalArrays.CategoricalString{UInt32}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalString{UInt32}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Broadcast.extrude), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Type{Array{CategoricalArrays.CategoricalValue{Int64, UInt32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{getfield(CategoricalArrays, Symbol("##_#14")), Bool, Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1, UInt32, V, C, U} where U where C where V}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(CategoricalArrays.mergelevels), Bool, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Broadcast.extrude), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.similar), Type{Array{String, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Base.Missing, String}, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, String}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Base.Missing, Int64}, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Int64}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Bool, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Base.Missing, Bool}, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Bool}, 1}, Int64, Array{Base.Missing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Bool}, 1}, Bool, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Base.Missing, Bool}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, Bool}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Bool}, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Base.Missing, Float64}, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Float64}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, String}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.isequal), PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.isequal), PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.isequal), PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isequal), PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Bool}, 1}, Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, String}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Int64}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, Float64}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Base.Missing, String}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#5#9")), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.coalesce), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.similar), Type{Array{Nothing, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, CategoricalArrays.CategoricalString{UInt32}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalString{UInt32}}, Type{Nothing}})
precompile(Tuple{typeof(Base.promote_result), Type{T} where T, Type{T} where T, Type{Union{}}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.promote_result), Type{T} where T, Type{T} where T, Type{Union{Nothing, String}}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Nothing, String}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, String}, 1}, CategoricalArrays.CategoricalString{UInt32}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Int64, Array{Union{Nothing, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Nothing, String}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Nothing, String}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Nothing, String}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Nothing}, Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, String}, 1}, Nothing, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}, Type{Nothing}})
precompile(Tuple{typeof(Base.promote_result), Type{T} where T, Type{T} where T, Type{Union{}}, Type{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.promote_result), Type{T} where T, Type{T} where T, Type{Union{Nothing, Int64}}, Type{Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Nothing, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Int64}, 1}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Union{Nothing, Int64}, 1}, Int64, Array{Union{Nothing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Nothing, Int64}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Nothing}, Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int64}, 1}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Int64}, 1}, Nothing, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, String}, 1}, String, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Nothing, String}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Nothing, Int64}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int64}, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Bool, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Nothing, Bool}, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Bool}, 1}, Int64, Array{Nothing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Bool}, 1}, Bool, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Nothing, Bool}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Union{Nothing, Bool}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Nothing, Bool}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Bool, 1}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Bool}, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Bool}, 1}, Nothing, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Float64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Type{Array{Union{Nothing, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Float64}, 1}, Int64, Array{Nothing, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Float64}, 1}, Float64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Nothing, Float64}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Nothing, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Float64}, 1}, Nothing, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Union{Nothing, String}, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{String, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.coalesce), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Nothing, String}, 1}, Array{Union{Nothing, String}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Union{Nothing, Bool}, 1}, Array{Union{Nothing, Bool}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.eltype), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}})
precompile(Tuple{typeof(Base.eltype), Array{Union{Nothing, Bool}, 1}})
precompile(Tuple{typeof(Base.eltype), Array{Union{Nothing, Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Base.Missing})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, String}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Int64, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{PooledArrays.PooledArray{Union{Base.Missing, Int64}, UInt8, 1, Array{UInt8, 1}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Bool})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#6#10")){DataFrames.DataFrame}, Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Ref{T} where T}, Type{T} where T})
precompile(Tuple{Type{Base.RefValue{T} where T}, Type{CategoricalArrays.CategoricalArray{T, N, R, V, C, U} where U where C where V where R<:Integer where N where T}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.RefValue{UnionAll}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(isa), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.RefValue{UnionAll}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(isa), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{UnionAll}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(isa), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.RefValue{UnionAll}}}})
precompile(Tuple{Type{Ref{T} where T}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Any, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Any, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Any, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Base.GMP.BigInt}, Type{Float64}})
precompile(Tuple{typeof(Base.similar), Type{Array{Base.MPFR.BigFloat, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.MPFR.BigFloat, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.MPFR.BigFloat, 1}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.MPFR.BigFloat, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Base.MPFR.BigFloat, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Base.MPFR.BigFloat, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.MPFR.BigFloat, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.cmp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.cmp), Base.MPFR.BigFloat, Float64})
precompile(Tuple{typeof(Base.:(==)), Base.MPFR.BigFloat, Float64})
precompile(Tuple{typeof(Base.cmp), Base.MPFR.BigFloat, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.:(==)), Base.MPFR.BigFloat, Base.GMP.BigInt})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.MPFR.BigFloat, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#7#11")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.MPFR.BigFloat, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Any, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Any, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Any, 2}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Any, 2}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Any, 2}, Int64}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 2}, Int64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Int64, 2}, Type{T} where T})
precompile(Tuple{Type{Array{Real, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Real, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Real, 2}, Array{Int64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Float64, Base.IteratorsMD.CartesianIndex{2}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Real}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Real, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Real, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Real, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{Real, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Real, 2}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{Real, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Real, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.MPFR.BigFloat, 1}, Array{Real, 1}})
precompile(Tuple{typeof(Base.eltype), Array{Base.MPFR.BigFloat, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.MPFR.BigFloat, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#8#12")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Base.Colon, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.check_broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.check_broadcast_shape), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Array{Float64, 1}, Tuple{Base.Colon, Int64}})
precompile(Tuple{typeof(Base.reshape), Array{Float64, 1}, Tuple{Base.Colon, Int64}})
precompile(Tuple{typeof(Base.reshape), Array{Float64, 1}, Base.Colon, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}})
precompile(Tuple{typeof(Base.push!), Array{Union{}, 1}, Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Float64, 2}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Array{Int64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 2}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Int64, 2}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.reshape), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Float64, 2}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(==)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.all), Base.BitArray{2}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Function, Function})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Function, Function})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Function})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function, Function})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Function})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Symbol})
precompile(Tuple{Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Math.sin_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
precompile(Tuple{typeof(Base.sin), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sin), Tuple{Int64}}})
precompile(Tuple{typeof(Base.sin), Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Float64, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Float64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:b, :c), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:b, :c), Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b, :c), Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base.Broadcast, Symbol("#@__dot__")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.Broadcast.__dot__), Expr})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Int64})
precompile(Tuple{typeof(Base.Broadcast.__dot__), QuoteNode})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, QuoteNode, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Int64, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, typeof(Base.Broadcast.__dot__)}, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, typeof(Base.:(!)), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sin), Tuple{Int64}}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sin), Tuple{Int64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sin), Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sin), Tuple{Int64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sin), Tuple{Int64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, Array{Int64, 1}, Array{Int64, 1}, String, Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Int64}}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Int64}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Int64}}, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Int64, 1}}}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Int64, 1}}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Int64, 1}}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.RefValue{String}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Base.RefValue{String}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Base.RefValue{String}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Base.RefValue{String}}}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Base.RefValue{String}}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Base.RefValue{String}}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.length), Tuple{Base.RefValue{String}}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}, Int64}}})
precompile(Tuple{typeof(Base.push!), Array{Union{}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Array{Float64, 2}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.ones), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Float64, 3}}})
precompile(Tuple{typeof(Base.Broadcast.check_broadcast_shape), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 3}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.RefValue{CategoricalArrays.CategoricalString{UInt32}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{CategoricalArrays.CategoricalString{UInt32}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{CategoricalArrays.CategoricalString{UInt32}}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.Missing, Int64, Int64}})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Vararg{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Type{CategoricalArrays.CategoricalArray{T, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, U} where U where T}})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Type{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T}})
precompile(Tuple{typeof(Base.promote_type), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Type{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T}})
precompile(Tuple{Type{Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.setindex!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.copyto!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{typeof(DataAPI.levels), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.RefValue{CategoricalArrays.CategoricalValue{Int64, UInt32}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{CategoricalArrays.CategoricalValue{Int64, UInt32}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{CategoricalArrays.CategoricalValue{Int64, UInt32}}}}})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalValue{Int64, UInt32}, Vararg{CategoricalArrays.CategoricalValue{Int64, UInt32}, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.get), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.get), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.get), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.:(!=)), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.unique), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.get), CategoricalArrays.CategoricalValue{Int64, UInt32}})
precompile(Tuple{typeof(Base.iterate), Array{CategoricalArrays.CategoricalArray{T, 1, UInt32, V, C, U} where U where C where V where T, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Type{Union{Base.Missing, CategoricalArrays.CategoricalValue{Int64, UInt32}}}})
precompile(Tuple{typeof(DataAPI.levels), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{CategoricalArrays.CategoricalValue{Int64, UInt32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Base.Missing, 1}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Base.Missing, 1}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalValue{Int64, UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), CategoricalArrays.CategoricalString{UInt32}, Vararg{CategoricalArrays.CategoricalString{UInt32}, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.get), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.get), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.get), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{String, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.unique), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}})
precompile(Tuple{typeof(Base.get), CategoricalArrays.CategoricalString{UInt32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Type{Union{Base.Missing, CategoricalArrays.CategoricalString{UInt32}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{CategoricalArrays.CategoricalString{UInt32}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#14#16")){CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}}, Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Base.Missing, 1}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Type{Base.Missing}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Base.Missing, 1}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Array{Base.Missing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#13#15")), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Tuple{Bool}, Tuple{Int64}}}}, CategoricalArrays.CategoricalString{UInt32}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Int64, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Int64, Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(+)), Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(/))}, Tuple{Int64, Int64, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(/))}, Tuple{Int64, Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sqrt), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sqrt), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.sqrt), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(/)), Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, typeof(Base.sqrt)}, Tuple{Int64, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, typeof(Base.sqrt)}, Tuple{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.sqrt), Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.identity), Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Tuple{Int64, Int64}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Int64, Int64}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Tuple{Int64, Int64}, Int64, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Tuple{Int64, Int64}, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(-))}, Tuple{Tuple{Int64, Int64}, Int64, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames._names), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Tuple{Int64, Int64}, Int64, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Tuple{Int64, Int64}, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.unique!), Array{Array{Symbol, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Symbol, 1}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.DataFrame, Array{Float64, 1}, DataFrames.DataFrame, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(-))}, Tuple{Tuple{Int64, Int64}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(-))}, Tuple{Tuple{Int64, Int64}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(-))}, Tuple{Tuple{Int64, Int64}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Tuple{Int64, Int64}, Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Tuple{Int64, Int64}, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{DataFrames.DataFrame, Tuple{Int64, Int64}, Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(+)), Tuple{Tuple{Int64, Int64}, Int64}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Tuple{Int64, Int64}, Int64}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Tuple{Int64, Int64}, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64, Int64}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64, Int64}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64, Int64}, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Tuple{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame, Tuple{Int64}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame, Tuple{Int64}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}}, typeof(Base.floor)}, Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame, Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}}, typeof(Base.floor)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}}, typeof(Base.floor)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}}, typeof(Base.floor)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}}, typeof(Base.floor)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame, Tuple{Int64}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame, Tuple{Int64}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.RefValue{Type{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.floor), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Tuple{Int64}}}}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}}, typeof(Base.floor)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Tuple{Int64}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Type{Int64}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.floor), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.floor), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.floor), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.floor), Tuple{DataFrames.DataFrame}}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.floor)}}, typeof(Base.convert)}, Tuple{Base.RefValue{Type{Int64}}, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.floor), Tuple{DataFrames.DataFrame}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.floor), Tuple{DataFrames.DataFrame}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.floor)}}, typeof(Base.convert)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.floor)}}, typeof(Base.convert)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.floor)}}, typeof(Base.convert)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.floor)}}, typeof(Base.convert)}, Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Float64, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Any}, Tuple{Int64, Int64}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Any, 2}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{Any, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Any, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.RefValue{Nothing}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.fill!), Array{Any, 1}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(==)), Tuple{DataFrames.DataFrame, Base.RefValue{Nothing}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.trues), Int64, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.fill!), Array{Int64, 1}, Nothing})
precompile(Tuple{getfield(TestBroadcasting, Symbol("#17#18")), Int64})
precompile(Tuple{typeof(Base.foreach), getfield(TestBroadcasting, Symbol("#17#18")), Base.OneTo{Int64}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Array{Nothing, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Bool, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :z), Tuple{Int64, Int64, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :z), Tuple{Int64, Int64, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}}}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.SubArray{Int64, 0, Array{Int64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.:(!=)), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.DataFrame, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Array{Float64, 1}, DataFrames.DataFrame, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_axes), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_axes), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.DataFrame, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.DataFrame, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.DataFrame, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}}, Array{Float64, 1}, Tuple{Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.DataFrame, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.DataFrame, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, DataFrames.DataFrame, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}}}}}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_axes), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}}}}}})
precompile(Tuple{typeof(DataFrames._names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Array{Float64, 1}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#276#277")), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}}}}}}}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 0, Array{Float64, 1}, Tuple{Int64}, true}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 2} where T}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, typeof(Base.eltype)}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, AbstractArray{T, 1} where T}, typeof(Base.eltype)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{getfield(DataFrames, Symbol("#272#273")){Int64}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}}, typeof(Base.:(+))}, typeof(Base.:(/))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, typeof(Base.sin)}, Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}}}}}})
precompile(Tuple{typeof(DataFrames._broadcast_unalias_helper), DataFrames.DataFrame, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64, Bool})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, typeof(Base.sin)}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.transpose), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Int64}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Extruded{LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, LinearAlgebra.Transpose{Int64, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, Array{Float64, 2}, Int64}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#276#277")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, Array{Float64, 2}, Int64}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}}}}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), Array{Float64, 2}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, DataFrames.DataFrame}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}, Array{Float64, 2}}}, Int64}}}}})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.view), Array{Float64, 2}, Function, Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c, :d, :copycols), T} where T<:Tuple}, Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Bool}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d, :copycols), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :d, :copycols), Tuple{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64})
precompile(Tuple{typeof(Base.copy), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.length), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}}}, Int64}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}}}, Int64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.DataFrame, Int64, Array{Float64, 2}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.DataFrame, Int64, Array{Float64, 2}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Array{Float64, 2}, DataFrames.DataFrame, Int64, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}}}, Int64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.DataFrame}}}}, Int64}}, Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_axes), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Array{Float64, 2}, DataFrames.DataFrame, Int64, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.DataFrame, Int64}}, DataFrames.DataFrame}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Int64}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Int64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Int64}}, Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Int64}}, Array{Float64, 2}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Int64}}, Array{Float64, 2}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}}}})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 2}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 2}, Base.IndexLinear, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Function, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copy), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 2} where T}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, typeof(Base.eltype)}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.eltype), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.promote_type), NamedTuple{(:init,), Tuple{DataType}}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, typeof(Base.eltype)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Pair{Symbol, AbstractArray{T, 1} where T}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}}, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, typeof(DataFrames._names)}})
precompile(Tuple{getfield(DataFrames, Symbol("#272#273")){Int64}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.extrude), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}}}, Int64}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}}}, Int64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64, Array{Float64, 2}}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64, Array{Float64, 2}}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64, Array{Float64, 2}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}}}, Int64}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}}}, Int64}}, Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#1#3"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#7#9")), getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}, typeof(Base.sin)}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(+))}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64}}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64}}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64}}, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64}}, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64, DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64}}, DataFrames.DataFrame}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64}}, DataFrames.DataFrame}}}}})
precompile(Tuple{typeof(DataFrames._names), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#274#275")), Tuple{Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Int64, DataFrames.DataFrame}}, typeof(DataFrames._names)}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(Base.Broadcast, Symbol("#2#4")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#1#3")), getfield(Base.Broadcast, Symbol("#8#10")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}, getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#5#6")){getfield(Base.Broadcast, Symbol("#7#9"))}}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(/))}, getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#11#12")){getfield(Base.Broadcast, Symbol("#13#14"))}}, getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#15#16")){getfield(Base.Broadcast, Symbol("#17#18"))}}, typeof(Base.:(*))}}, typeof(Base.:(+))}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), Array{Float64, 2}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 2}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(/)), Tuple{Int64, DataFrames.DataFrame}}}}}}})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 2}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}})
precompile(Tuple{typeof(Base.eachcol), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.StepRange{Int64, Int64}, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.zeros), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, DataFrames.DataFrame, Array{Float64, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 3}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 3}, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 3}, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Float64, 3}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 3}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{DataFrames.DataFrame, Array{Float64, 3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), Array{Float64, 3}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 3}, Tuple{Bool, Bool, Bool}, Tuple{Int64, Int64, Int64}}, DataFrames.DataFrame}}, Tuple{Base.IteratorsMD.CartesianIndex{3}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 3}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 3}, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.mightalias), Array{Float64, 3}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 3}, Array{Float64, 3}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Array{Char, 0}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Array{Char, 0}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Char, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.RefValue{String}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{String}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, String, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.StepRange{Char, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.DataFrame, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.Broadcast.preprocess), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.StepRange{Char, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Base.hcat), Char, Char})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Char, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Char, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Char, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, String})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.IndexLinear, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.StepRange{Char, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Char})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, String})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.Broadcast.preprocess), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.StepRange{Char, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.StepRange{Char, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Array{String, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.permutedims), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}}}})
precompile(Tuple{typeof(Base.unalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames._copyto_helper!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.ReshapedArray{Char, 2, Base.StepRange{Char, Int64}, Tuple{}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Int64})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Base.StepRange{Char, Int64}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.StepRange{Char, Int64}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Base.StepRange{Char, Int64}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.reshape), Base.StepRange{Char, Int64}, Int64, Base.Colon, Vararg{Union{Base.Colon, Int64}, N} where N})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._reshape), Base.StepRange{Char, Int64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Base.StepRange{Char, Int64}, Tuple{Int64, Base.Colon, Int64}})
precompile(Tuple{typeof(Base.reshape), Base.StepRange{Char, Int64}, Tuple{Int64, Base.Colon, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.ReshapedArray{Char, 3, Base.StepRange{Char, Int64}, Tuple{}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.ReshapedArray{Char, 3, Base.StepRange{Char, Int64}, Tuple{}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.identity), Tuple{Base.ReshapedArray{Char, 3, Base.StepRange{Char, Int64}, Tuple{}}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.promote_type), Type{Char}, Type{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Char, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Char, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Char, 1}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64}, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Char, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Char, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Float64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Float64, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Float64})
precompile(Tuple{typeof(Base.promote_type), Type{Char}, Type{Any}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Any}, Tuple{Int64, Int64, Int64}, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Char, Char, Float64, Float64, Float64, Char, Char, Float64, Float64, Float64, Char, Char, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.getindex), Tuple{Char, Char, Float64, Float64, Float64, Char, Char, Float64, Float64, Float64, Char, Char, Float64, Float64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, Char, Char, Float64, Vararg{Float64, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Any}, Char, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{2}, typeof(Base.cat_t), Type{Any}, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Char, Char, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{}, Tuple{Int64}, Tuple{Int64}, Vararg{Tuple{Int64}, N} where N})
precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{Int64, Int64}, Tuple{Int64}, Tuple{Int64}, Vararg{Tuple{Int64}, N} where N})
precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{Int64, Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.cat_similar), Char, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Any, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Char})
precompile(Tuple{typeof(Base.cat_indices), Float64, Int64})
precompile(Tuple{typeof(Base.cat_size), Float64, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Float64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Any, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{Any, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Any, 2}, Array{Any, 2}, Array{Any, 2}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Char})
precompile(Tuple{typeof(Base.convert), Type{Any}, Float64})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 2}, Array{Any, 2}})
precompile(Tuple{typeof(Base.fill!), Array{Float64, 1}, Char})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Symbol})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Int64})
precompile(Tuple{typeof(Base.view), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Function})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, String})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Symbol})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.IndexLinear, Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Base.StepRange{Char, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.maybeview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, typeof(Base.:(!)), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Array{Char, 0}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{Type{NamedTuple{(:a,), T} where T<:Tuple}, Tuple{Array{Array{Int64, 1}, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Array{Int64, 1}, 1}, Tuple{Symbol}, NamedTuple{(:a,), Tuple{Array{Array{Int64, 1}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a,), Tuple{Array{Array{Int64, 1}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.promote_typeof), Base.UnitRange{Int64}, DataAPI.Between{Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DataAPI.Between{Symbol, Symbol}, InvertedIndices.InvertedIndex{Base.Regex}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), InvertedIndices.InvertedIndex{Base.Regex}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{DataAPI.Between{Symbol, Symbol}}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Base.UnitRange{Int64}, DataAPI.Between{Symbol, Symbol}, InvertedIndices.InvertedIndex{Base.Regex}, Array{Symbol, 1}}})
precompile(Tuple{Type{NamedTuple{(:x1, :x2), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:x1, :x2), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1, :x2), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{String}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{String}}}})
precompile(Tuple{Type{Ref{T} where T}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.RefValue{NamedTuple{(:a, :b), Tuple{Int64, Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.RefValue{NamedTuple{(:a, :b), Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Base.fill!), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{NamedTuple{(:a, :b), Tuple{Int64, Int64}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.RefValue{NamedTuple{(:a, :b), Tuple{Int64, Int64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Base.RefValue{NamedTuple{(:a, :b), Tuple{Int64, Int64}}}}}})
precompile(Tuple{typeof(Base.length), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{typeof(Base.fill!), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 2}, NamedTuple{(:a, :b), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.fill), NamedTuple{(:a, :b), Tuple{Int64, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#117")), Bool, Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 2}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 2}})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{typeof(Base.hcat), String, String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{String, 2}}})
precompile(Tuple{typeof(Base.Broadcast.check_broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{String, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{String, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.identity), Tuple{Array{String, 2}}}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String})
precompile(Tuple{typeof(Base.typed_hvcat), Type{String}, Tuple{Int64, Int64, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{String}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{2}, typeof(Base.cat_t), Type{String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.cat_similar), String, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{String, 2, Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{String, 2, Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, String})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{String, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{String, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{String}, Tuple{Array{String, 2}, Array{String, 2}, Array{String, 2}}})
precompile(Tuple{typeof(Base.typed_vcat), Type{String}, Array{String, 2}, Array{String, 2}, Array{String, 2}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Array{Symbol, 1}, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#278#279")), Tuple{DataFrames.DataFrame}}, typeof(DataFrames._names)}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_unalias), DataFrames.ColReplaceDataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.ColReplaceDataFrame, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, typeof(Base.identity), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{NamedTuple{(:x1, :x2, :x3), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x1, :x2, :x3), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x1, :x2, :x3), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64, Int64}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Any}, Tuple{Int64, Int64, Int64}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Int64, String, String, Int64, String, String, Int64}}})
precompile(Tuple{typeof(Base.getindex), Tuple{String, String, Int64, String, String, Int64, String, String, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, String, String, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Any}, String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Base.Val{2}, typeof(Base.cat_t), Type{Any}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__cat), Array{Any, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, String})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.copy), Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{NamedTuple{(:a, :b), Tuple{Int64, Int64}}, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Union{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, typeof(Base.:(!)), DataAPI.Between{Symbol, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, typeof(Base.:(!)), InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Base.GMP.BigInt, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.GMP.BigInt, String})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, Float64, Base.GMP.BigInt, String}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.getcolbc), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Nothing, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{DataFrames.DataFrame}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Float64, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Base.MPFR.BigFloat, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{String}, Type{Base.MPFR.BigFloat}})
precompile(Tuple{typeof(Base.similar), Type{Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.MPFR.BigFloat, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Any, 1}, Base.Broadcast.Broadcasted{DataFrames.DataFrameStyle, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, getfield(TestBroadcasting, Symbol("#f_identity#19")), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Int64, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(==)), Float64, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(==)), Base.GMP.BigInt, Base.MPFR.BigFloat})
precompile(Tuple{getfield(Base, Symbol("#@views")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base._views), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base._views), Expr})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#125#127")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Base, Symbol("#125#127"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Base, Symbol("#125#127"))}})
precompile(Tuple{typeof(Base._views), Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#126#128")){Array{Symbol, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base, Symbol("#126#128")){Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Base, Symbol("#126#128")){Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Base, Symbol("#126#128")){Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base._views), Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base._views), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base._views), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Any, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base._views), Expr})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base._views), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.maybeview), DataFrames.DataFrame, Function, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}}}})
precompile(Tuple{typeof(Base.fill), String, Int64})
precompile(Tuple{typeof(Base.fill), String, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.fill!), Array{String, 3}, String})
precompile(Tuple{typeof(Base.fill), String, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{String, 3}}})
precompile(Tuple{typeof(Base.Broadcast.check_broadcast_shape), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.identity), Tuple{Array{String, 3}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort")), NamedTuple{(:cols,), Tuple{Array{Symbol, 1}}}, typeof(Base.sort), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Symbol, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.print_to_string), Function, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Any}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base._show_default), Base.GenericIOBuffer{Array{UInt8, 1}}, Any})
precompile(Tuple{typeof(Base.show_function), Base.GenericIOBuffer{Array{UInt8, 1}}, Function, Bool})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Symbol, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Symbol, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:cols,), Tuple{Array{Symbol, 1}}}, typeof(Base.sort!), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##sort!#397")), Array{Symbol, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort!), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Base.Pair{Symbol, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Array{Base.Pair{Symbol, Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.first), Tuple{Base.Broadcast.Extruded{Array{Base.Pair{Symbol, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{Base.Pair{Symbol, Int64}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Array{Base.Pair{Symbol, Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.last), Tuple{Base.Broadcast.Extruded{Array{Base.Pair{Symbol, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{Base.Pair{Symbol, Int64}, 1}}}})
precompile(Tuple{typeof(Base.Unicode.utf8proc_error), Int64})
precompile(Tuple{typeof(Base.Unicode.utf8proc_map), String, Int64})
precompile(Tuple{typeof(DataFrames.makeidentifier), String})
precompile(Tuple{typeof(DataFrames.identifier), String})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@warn")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Symbol, String, Tuple{String}})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.group_rows), DataFrames.DataFrame, Bool, Bool, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._combine), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.combine), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._combine_with_first), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(DataFrames.append_rows!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames._combine_with_first!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}, Int64, Int64, Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Nothing, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Type, 1}, Base.IndexLinear, Array{DataType, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#118")), Bool, Type{DataFrames.DataFrame}, Array{Type, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#402")), Bool, Type{DataFrames.DataFrame}, Array{DataType, 1}, Array{Symbol, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{DataType, 1}, Array{Symbol, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{DataFrames.DataFrame}, Type{T} where T, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#400#401")){Union, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#400#401")){Union, Int64}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#400#401")){Union, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Union{Base.Missing, Int64}, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#400#401")){Union, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#400#401")){Union, Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#118")), Bool, Type{DataFrames.DataFrame}, Array{Union, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Union, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Type, 1}, Base.IndexLinear, Array{Union, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#402")), Bool, Type{DataFrames.DataFrame}, Array{Union, 1}, Array{Symbol, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Union, 1}, Array{Symbol, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.fill!), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Missing})
precompile(Tuple{typeof(Base.all), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{getfield(Base, Symbol("##all#598")), Function, typeof(Base.all), Function, CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}})
precompile(Tuple{typeof(Base._all), typeof(Base.ismissing), CategoricalArrays.CategoricalArray{Union{Base.Missing, String}, 1, UInt32, String, CategoricalArrays.CategoricalString{UInt32}, Base.Missing}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.randn), Int64})
precompile(Tuple{Type{NamedTuple{(:a, :b, :c), T} where T<:Tuple}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Int64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Int64, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.colwise), Function, DataFrames.DataFrame})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sum), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.sum)}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.sum)}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.sum)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Union{Base.Missing, Float64}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Real, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, typeof(Base.sum)}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Int64, Float64}})
precompile(Tuple{typeof(Base.size), Array{Real, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Real, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Int64, Float64})
precompile(Tuple{typeof(Base.size), Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.colwise), Function, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#424#425")){typeof(Base.length)}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, getfield(DataFrames, Symbol("#424#425")){typeof(Base.length)}}})
precompile(Tuple{typeof(Base.length), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, typeof(Base.length)}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}, typeof(Base.length)}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.length), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, getfield(DataFrames, Symbol("#424#425")){typeof(Base.length)}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, getfield(DataFrames, Symbol("#424#425")){typeof(Base.length)}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.sum), 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}})
precompile(Tuple{typeof(DataFrames.colwise), Array{typeof(Base.sum), 1}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{typeof(Base.sum), Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.sum), 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.sum), 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.sum), 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{typeof(Base.sum), Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Real, 2}, Int64, Array{Int64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 2}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.sum), 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Float64, 2}, Tuple{Int64, Int64, Float64}})
precompile(Tuple{typeof(Base.hcat), Int64, Int64, Float64})
precompile(Tuple{typeof(Base.size), Array{Real, 2}})
precompile(Tuple{typeof(Base.length), Array{typeof(Base.sum), 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Real, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.promote_type), Type{typeof(Base.sum)}, Type{typeof(Base.minimum)}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.sum), typeof(Base.minimum)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Function, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}})
precompile(Tuple{typeof(DataFrames.colwise), Array{Function, 1}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{typeof(Base.sum), Array{Int64, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.Iterators.ProductIterator{Tuple{Array{Function, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Function, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Function, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{typeof(Base.minimum), Array{Int64, 1}}})
precompile(Tuple{typeof(Base.reshape), Array{Int64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.size), Array{Int64, 2}})
precompile(Tuple{typeof(Base.length), Array{Function, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{DataType, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}})
precompile(Tuple{typeof(DataFrames.colwise), Array{DataType, 1}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{DataType, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Union{Base.Missing, Int64}, 1}}, Base.Iterators.ProductIterator{Tuple{Array{DataType, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Union{Base.Missing, Int64}, 1}, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{DataType, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{DataType, Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 2}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{DataType, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Tuple{Tuple{DataType, Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.reshape), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.size), Array{Array{Union{Base.Missing, Int64}, 1}, 2}})
precompile(Tuple{typeof(Base.:(==)), Array{Array{Union{Base.Missing, Int64}, 1}, 2}, Array{Array{Union{Base.Missing, Int64}, 1}, 2}})
precompile(Tuple{typeof(Base.promote_typeof), String, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{Any, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}})
precompile(Tuple{typeof(DataFrames.colwise), Array{Any, 1}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{String, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vect), typeof(Base.length)})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.length), 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#427#429"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, getfield(DataFrames, Symbol("#426#428")){Array{typeof(Base.length), 1}}}})
precompile(Tuple{typeof(DataFrames.colwise), Array{typeof(Base.length), 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("#427#429")), Tuple{typeof(Base.length), Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.length), 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.length), 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#427#429"))}, Int64, Tuple{Tuple{typeof(Base.length), Int64}, Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{typeof(Base.length), 1}, DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#427#429"))}, Tuple{Tuple{typeof(Base.length), Int64}, Tuple{Base.SubArray{Symbol, 1, Array{Symbol, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#427#429")), Tuple{typeof(Base.length), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 2}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 2}, 1}, Base.Generator{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, getfield(DataFrames, Symbol("#426#428")){Array{typeof(Base.length), 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 2}, 1}, Array{Int64, 2}, Base.Generator{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, getfield(DataFrames, Symbol("#426#428")){Array{typeof(Base.length), 1}}}, Int64})
precompile(Tuple{typeof(Base.vect), Array{Int64, 2}, Vararg{Array{Int64, 2}, N} where N})
precompile(Tuple{typeof(Base.:(==)), Array{Array{Int64, 2}, 1}, Array{Array{Int64, 2}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}})
precompile(Tuple{typeof(DataFrames.colwise), Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.Iterators.ProductIterator{Tuple{Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{typeof(Base.length), Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{typeof(Base.length), Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Any}, Tuple{Int64, Int64}, Int64, Vararg{Number, N} where N})
precompile(Tuple{typeof(Base.hvcat_fill), Array{Any, 2}, Tuple{Int64, Int64, Float64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Real, 2}, Array{Any, 2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{typeof(Base.sum), typeof(Base.length)}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Tuple{Tuple{typeof(Base.sum), Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{typeof(Base.length), Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{UnionAll, DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}})
precompile(Tuple{typeof(DataFrames.colwise), Tuple{UnionAll, DataType}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("#422#423")), Tuple{UnionAll, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}}, Base.Iterators.ProductIterator{Tuple{Tuple{UnionAll, DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{UnionAll, DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{UnionAll, Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 2}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{UnionAll, DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Tuple{Tuple{UnionAll, Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 2}, Int64, Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, 2}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 2}, Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{UnionAll, DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}, Int64, Tuple{Tuple{DataType, Int64}, Tuple{Array{Int64, 1}, Tuple{Base.OneTo{Int64}, Int64}}}})
precompile(Tuple{typeof(Base.promote_typeof), CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, Tuple{CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.reshape), Array{AbstractArray{T, 1} where T, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.size), Array{AbstractArray{T, 1} where T, 2}})
precompile(Tuple{typeof(Base.:(==)), Array{AbstractArray{T, 1} where T, 2}, Array{AbstractArray{T, 1} where T, 2}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{String, Symbol}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}}}, getfield(DataFrames, Symbol("#422#423"))}})
precompile(Tuple{typeof(DataFrames.colwise), Tuple{String, Symbol}, DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.empty!), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.isempty), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{NamedTuple{(:a, :b), T} where T<:Tuple}, Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Any, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Any, 1}, Array{Any, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Any, 1}, Array{Any, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##deletecols#430")), Bool, typeof(DataFrames.deletecols), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.deletecols), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:b,), T} where T<:Tuple}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Float64, 1}, Tuple{Symbol}, NamedTuple{(:b,), Tuple{Array{Float64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:b,), Tuple{Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.deletecols!), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("##deletecols#430")), Bool, typeof(DataFrames.deletecols), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.deletecols), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Int64}}})
precompile(Tuple{typeof(DataFrames.deletecols!), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##deletecols")), NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.deletecols), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##deletecols#430")), Bool, typeof(DataFrames.deletecols), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.deletecols), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select#132")), Bool, typeof(DataFrames.select), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Array{Any, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##deletecols#430")), Bool, typeof(DataFrames.deletecols), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(DataFrames.deletecols), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol}, NamedTuple{(:x,), Tuple{Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x,), Tuple{Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.haskey), DataFrames.DataFrame, String})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.eachcol), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Function})
precompile(Tuple{typeof(Base.eachcol), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameColumns{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}, AbstractArray{T, 1} where T}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Regex})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Array{Any, 1}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Base.Regex})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, Function})
precompile(Tuple{typeof(Base.view), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Base.UnitRange{Int64}}, InvertedIndices.InvertedIndex{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(DataFrames, Symbol("#439#440")){DataFrames.DataFrame, DataFrames.DataFrame, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Int64, Base.Colon})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Int64, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Int64, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Array{Bool, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Array{Bool, 1}, Base.Colon})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.LogicalIndex{Int64, Array{Bool, 1}}, getfield(Base, Symbol("#409#410"))}, Int64, Tuple{Int64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.LogicalIndex{Int64, Array{Bool, 1}}, getfield(Base, Symbol("#409#410"))}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(DataFrames.insert_multiple_entries!), DataFrames.DataFrame, Array{Int64, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Array{Bool, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Array{Bool, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.copyto!), DataFrames.LazyNewColDataFrame{Int64}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Base.Colon, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Array{Bool, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#437#438")){DataFrames.DataFrame, DataFrames.DataFrame, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Int64, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:c,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:c,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:d,), Tuple{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:d,), Tuple{Int64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, DataFrames.DataFrame}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, DataFrames.DataFrame}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y, :copycols), Tuple{Array{Int64, 1}, Array{Int64, 1}, Bool}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{DataFrames.AbstractDataFrame, 1}, Tuple{DataFrames.DataFrame, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Base.UnitRange{Int64}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Base.UnitRange{Int64}, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#431#432")){DataFrames.DataFrame, DataFrames.DataFrame}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.lastindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##select#163")), Bool, typeof(DataFrames.select), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(==)), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, DataFrames.DataFrame, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.UnitRange{Int64}}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:A, :B), Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Float64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Float64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.Slice{Base.OneTo{Int64}}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Float64, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{String, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:x, :y), Tuple{Array{Int64, 1}, Array{String, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.eltypes), DataFrames.DataFrame})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, AbstractArray{T, 1} where T, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:id, :a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:id, :a, :b), Tuple{Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##_stackview#340")), Symbol, Symbol, typeof(DataFrames._stackview), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#309")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#446")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#327")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#324")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#321")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64, Int64})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Int64, 1}, CategoricalArrays.CategoricalArray{Union{Base.Missing, Int64}, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Base.Missing}, Function})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Any, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{getfield(DataFrames, Symbol("##sort#395")), Array{Any, 1}, Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.sort), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Symbol}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#446")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Symbol}}})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Symbol}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(TestDeprecated, Symbol("#1#2")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, Base.Missing, Base.Generator{Base.UnitRange{Int64}, getfield(TestDeprecated, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, String, Base.Generator{Base.UnitRange{Int64}, getfield(TestDeprecated, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Random.randstring), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(TestDeprecated, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(TestDeprecated, Symbol("#1#2"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(TestDeprecated, Symbol("#1#2"))}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#446")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Array{Float64, 1}, Vararg{Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Base.Regex}})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#446")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.isequal), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#446")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, InvertedIndices.InvertedIndex{InvertedIndices.InvertedIndex{Base.Regex}}})
precompile(Tuple{typeof(Base.map), Function, Base.StepRange{Char, Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#110")), Base.Iterators.Pairs{Symbol, Array{T, 1} where T, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:a, :b, :c, :d, :e), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, String}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##melt")), NamedTuple{(:variable_name, :value_name), Tuple{Symbol, Symbol}}, typeof(DataFrames.melt), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#447")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#447")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, Base.Regex, Base.Regex})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, Base.Regex, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#317")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Any, 1}, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#447")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.stack), DataFrames.DataFrame, Base.Regex, Base.Regex})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##melt")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.melt), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.length), DataFrames.StackedVector})
precompile(Tuple{getfield(DataFrames, Symbol("#100#103")), DataFrames.StackedVector})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##melt")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.melt), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.:(==)), DataFrames.RepeatedVector{Symbol}, DataFrames.RepeatedVector{Symbol}})
precompile(Tuple{typeof(Base.iterate), DataFrames.StackedVector})
precompile(Tuple{typeof(Base.:(==)), DataFrames.StackedVector, DataFrames.StackedVector})
precompile(Tuple{typeof(Base.:(==)), DataFrames.RepeatedVector{Union{Base.Missing, Float64}}, DataFrames.RepeatedVector{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.:(==)), DataFrames.RepeatedVector{Union{Base.Missing, String}}, DataFrames.RepeatedVector{Union{Base.Missing, String}}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##melt")), NamedTuple{(:view,), Tuple{Bool}}, typeof(DataFrames.melt), DataFrames.DataFrame, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##melt")), NamedTuple{(:variable_name, :value_name, :view), Tuple{Symbol, Symbol, Bool}}, typeof(DataFrames.melt), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##melt")), NamedTuple{(:variable_name, :value_name, :view), Tuple{Symbol, Symbol, Bool}}, typeof(DataFrames.melt), DataFrames.DataFrame, Base.Regex})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#318#319"))}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, getfield(DataFrames, Symbol("#318#319"))}})
precompile(Tuple{getfield(DataFrames, Symbol("##stack#320")), Symbol, Symbol, Bool, typeof(DataFrames.stack), DataFrames.DataFrame, Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##melt#448")), Symbol, Symbol, Bool, typeof(DataFrames.melt), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.melt), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#325")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Symbol, Symbol})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#326")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("##groupby#189")), Bool, Bool, typeof(DataFrames.groupby), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##unstack#330")), Function, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#kw##unstack")), NamedTuple{(:renamecols,), Tuple{typeof(Base.identity)}}, typeof(DataFrames.unstack), DataFrames.DataFrame, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(DataFrames._unstack), DataFrames.DataFrame, Int64, Int64, Int64, CategoricalArrays.CategoricalArray{Symbol, 1, UInt32, Symbol, CategoricalArrays.CategoricalValue{Symbol, UInt32}, Union{}}, Array{Float64, 1}, CategoricalArrays.CategoricalArray{Int64, 1, UInt32, Int64, CategoricalArrays.CategoricalValue{Int64, UInt32}, Union{}}, Function})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#114")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Symbol, 1}})
