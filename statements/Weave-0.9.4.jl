precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.PipeEndpoint, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.PipeEndpoint}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Weave.WeaveMarkdown.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Weave.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Function, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Base.repr), Weave.InlineCode})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, String, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.debug_color)})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.string), UInt32, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print_to_string), UInt32, Vararg{Any, N} where N})
precompile(Tuple{typeof(Weave.push_preexecute_hook), Function})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(Core.Compiler.zero), Type{Int128}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Weave.InlineCode}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Weave.InlineText}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Weave.parse_doc), String, Weave.NotebookInput})
precompile(Tuple{typeof(Base.fill!), Array{Base.Dict{Symbol, Any}, 0}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.filter), getfield(Weave, Symbol("#32#33")), Array{Union{Nothing, Base.SubString{String}}, 1}})
precompile(Tuple{Type{Weave.InlineCode}, Nothing, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(Weave.parse_inline), String, Base.Regex})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.Meta.parse), String})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Weave.CodeChunk}, String, Int64, Int64, Base.SubString{String}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Weave.CodeChunk}, String, Int64, Int64, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Weave.parse_doc), String, Weave.MarkupInput})
precompile(Tuple{typeof(Weave.parse_doc), String, Weave.ScriptInput})
precompile(Tuple{typeof(Weave.parse_doc), String, String})
precompile(Tuple{Type{Base.Dict{UInt64, YAML.SimpleKey}}})
precompile(Tuple{Type{Base.Dict{UInt64, YAML.SimpleKey}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{YAML.TokenStream}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Base.Dict{String, YAML.Node}}})
precompile(Tuple{typeof(YAML.forward!), YAML.EventStream})
precompile(Tuple{typeof(YAML.peek), YAML.EventStream})
precompile(Tuple{typeof(YAML.compose_node), YAML.Composer})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, YAML.Node}})
precompile(Tuple{typeof(YAML.compose_document), YAML.Composer})
precompile(Tuple{typeof(YAML.compose), YAML.EventStream})
precompile(Tuple{Type{Base.Dict{String, Function}}})
precompile(Tuple{Type{Base.Dict{YAML.Node, Any}}})
precompile(Tuple{Type{Base.Dict{YAML.Node, Nothing}}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Union{Nothing, String}, Function}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Union{Nothing, String}, Function}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Union{Nothing, String}, Function}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Union{Nothing, String}, Function}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{Nothing, String}, Function}, Function, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Union{Nothing, String}, Function}, Base.Dict{String, Function}})
precompile(Tuple{Type{YAML.Constructor}, Base.Dict{String, Function}})
precompile(Tuple{typeof(YAML.load), YAML.TokenStream, Nothing})
precompile(Tuple{typeof(Weave.parse_header), Weave.DocChunk})
precompile(Tuple{typeof(Weave.header_chunk_defaults!), Weave.WeaveDoc})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, Symbol})
precompile(Tuple{typeof(Weave.parse_doc), String, Symbol})
precompile(Tuple{typeof(Weave.read_doc), String, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, String})
precompile(Tuple{typeof(Weave.header_args), Weave.WeaveDoc, Symbol, Symbol, Nothing, String, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String})
precompile(Tuple{typeof(Weave.strip_header), Weave.DocChunk})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, Base.Missing})
precompile(Tuple{typeof(Dates.yearmonthday), Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.string), Dates.Date})
precompile(Tuple{typeof(Base.isempty), Mustache.MustacheTokens})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Mustache, Symbol("#22#23")), String})
precompile(Tuple{typeof(Mustache.readutf), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Mustache.peekaheadmatch), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.close), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TextToken})
precompile(Tuple{typeof(Mustache.scan_past!), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Mustache.is_r_standalone), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Mustache.is_l_standalone), String, Bool})
precompile(Tuple{typeof(Mustache.popfirst!_whitespace), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.SectionToken})
precompile(Tuple{Type{ArgumentError}, Base.Missing})
precompile(Tuple{Type{ArgumentError}, Base.Regex})
precompile(Tuple{Type{Mustache.TagToken}, String, String, String, String, Nothing})
precompile(Tuple{typeof(Mustache.make_tokens), String, Tuple{String, String}})
precompile(Tuple{typeof(Mustache.nestTokens), Mustache.MustacheTokens})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Mustache.Token, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Mustache.template_from_file), String})
precompile(Tuple{typeof(Mustache.template_from_file), Mustache.MustacheTokens})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, Base.Regex})
precompile(Tuple{typeof(Weave.format), Weave.WeaveDoc})
precompile(Tuple{getfield(Weave, Symbol("##get_outname#44")), Nothing, typeof(Weave.get_outname), Symbol, Weave.WeaveDoc})
precompile(Tuple{getfield(Weave, Symbol("##get_outname#44")), String, typeof(Weave.get_outname), Symbol, Weave.WeaveDoc})
precompile(Tuple{getfield(Weave, Symbol("##get_outname#45")), String, typeof(Weave.get_outname), String, Weave.WeaveDoc})
precompile(Tuple{getfield(Weave, Symbol("##get_outname#45")), Nothing, typeof(Weave.get_outname), String, Weave.WeaveDoc})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), Symbol, Symbol, Symbol, Base.Dict{Any, Any}, Symbol, String, Nothing, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{typeof(Weave.weave), String})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.fill!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.fill), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}, Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}})
precompile(Tuple{typeof(Weave.pushopt), Base.Dict{Symbol, Any}, Expr})
precompile(Tuple{getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}, Tuple{Base.Dict{Symbol, Any}, Expr}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Weave.parse_header), Weave.CodeChunk})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Weave.WeaveChunk, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{Type{Weave.WeaveDoc}, String, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Array{Weave.WeaveChunk, 1}, Weave.CodeChunk, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Weave.WeaveChunk, 1}, Weave.DocChunk, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Weave.detect_doctype), String})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{Type{NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), T} where T<:Tuple}, Tuple{String, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool}})
precompile(Tuple{typeof(Weave.get_cwd), Weave.WeaveDoc, Symbol})
precompile(Tuple{typeof(Weave.set_rc_params), Weave.WeaveDoc, String, Nothing})
precompile(Tuple{typeof(Weave.read_cache), Weave.WeaveDoc, String})
precompile(Tuple{typeof(Weave.restore_chunk), Weave.DocChunk, Weave.WeaveDoc})
precompile(Tuple{typeof(Base.Multimedia.popdisplay), Weave.Report})
precompile(Tuple{typeof(Weave.clear_sandbox), Module})
precompile(Tuple{typeof(Weave.write_cache), Weave.WeaveDoc, String})
precompile(Tuple{typeof(Weave.run_chunk), Weave.DocChunk, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{typeof(Weave.run_code), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Symbol, Any}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setproperty!), Weave.CodeChunk, Symbol, Base.Missing})
precompile(Tuple{typeof(Base.setproperty!), Weave.CodeChunk, Symbol, String})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.TermResult})
precompile(Tuple{typeof(Base.vcat), Array{AbstractString, 1}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.CollectResult})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.ScriptResult})
precompile(Tuple{typeof(Weave.eval_chunk), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Weave.run_chunk), Weave.CodeChunk, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), Tuple{String, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Base.getproperty), Weave.Pandoc, Symbol})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractString, 1}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{Type{Weave.Report}, String, String, Base.Dict{Symbol, Any}, Array{String, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), Array{Weave.WeaveChunk, 1}, Int64})
precompile(Tuple{typeof(Base.identity), Weave.CodeChunk})
precompile(Tuple{typeof(Base.getproperty), Weave.CodeChunk, Symbol})
precompile(Tuple{typeof(Weave.parse_input), String})
precompile(Tuple{typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Tuple{AbstractString, Any}, 1}, Tuple{Base.SubString{String}, Expr}})
precompile(Tuple{typeof(Base.link_pipe!), Base.PipeEndpoint, Bool, Base.PipeEndpoint, Bool})
precompile(Tuple{typeof(Base._redirect_stdout), Base.PipeEndpoint})
precompile(Tuple{typeof(Weave.capture_output), Expr, Module, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{String, Array{AbstractString, 1}}})
precompile(Tuple{typeof(Base.cat_similar), String, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{AbstractString, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{AbstractString, 1}, Tuple{Int64}, Tuple{Bool}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), String, Int64})
precompile(Tuple{typeof(Base.cat_size), String, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{AbstractString, 1, Array{AbstractString, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{AbstractString, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{AbstractString, 1, Array{AbstractString, 1}, Tuple{Base.UnitRange{Int64}}, true}, String})
precompile(Tuple{typeof(Base.cat_indices), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{AbstractString, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractString, 1}, Array{AbstractString, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Dict{AbstractString, Nothing}}})
precompile(Tuple{typeof(Base.unique), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Nothing}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Nothing}, Nothing, String})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Nothing}, String})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.Multimedia.showable), String, Any})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("image/png")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Any})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("image/jpg")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/jpg")}, Any})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("image/svg+xml")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Any})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("text/markdown")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/markdown")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/plain")}, Any})
precompile(Tuple{typeof(Base.Multimedia.istextmime), String})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, String, Any})
precompile(Tuple{typeof(Base.array_summary), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.print_matrix_vdots), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Tuple{Int64, Int64}, 1}, String, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.UnitRange{Int64}, String})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Weave, Symbol("#41#42")){Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stdout), Base.PipeEndpoint})
precompile(Tuple{Type{Weave.ChunkOutput}, Base.SubString{String}, String, String, String, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), Weave.CodeChunk, Symbol, Array{Weave.ChunkOutput, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Weave.ChunkOutput, N} where N}, Array{Weave.ChunkOutput, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Weave.ChunkOutput, 1}, Int64})
precompile(Tuple{typeof(Base.:(*)), String, Base.SubString{String}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Weave.CodeChunk, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Any, 1}, Array{Weave.CodeChunk, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Weave.CodeChunk, 1}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Any, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex_shape_check), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.:(!=)), Base.UnitRange{Int64}, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{String, String}, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, typeof(Base.sprint), Function, String})
precompile(Tuple{typeof(Base.Math.clamp), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base._truncate_at_width_or_chars), String, Int64, String, String})
precompile(Tuple{typeof(Base._truncate_at_width_or_chars), String, Int64, String})
precompile(Tuple{typeof(Base.rpad), String, Int64})
precompile(Tuple{typeof(Base.println), Array{Int64, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.PipeEndpoint}, Array{Int64, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.PipeEndpoint}, Array{Int64, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.PipeEndpoint}, Array{Int64, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.PipeEndpoint, Array{Int64, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Array{Int64, 1}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Array{Int64, 1}, Char})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, Array{Int64, 1}})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base.PipeEndpoint}, Any})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.:(*)), String, String, Base.SubString{String}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Weave.CodeChunk})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.println), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Base.UnitRange{Int64}, Char})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Char})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}, Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Weave.InlineCode, 1}, Int64, Array{Weave.InlineCode, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Weave.Inline, 1}, Int64, Array{Weave.InlineCode, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.InlineCode, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Weave.InlineText, 1}, Weave.InlineCode, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Weave.InlineText, 1}, Weave.InlineCode, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Weave.InlineCode, 1}, Weave.InlineText, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Weave.InlineCode, 1}, Weave.InlineText, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Weave.Inline, 1}, Int64, Array{Weave.InlineText, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Weave.InlineText, 1}, Int64, Array{Weave.InlineText, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.InlineText, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}})
precompile(Tuple{getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}, Weave.InlineText})
precompile(Tuple{typeof(Base._array_for), Type{Weave.InlineText}, Array{Weave.Inline, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Weave.Inline, 1}, Base.IndexLinear, Array{Weave.InlineText, 1}})
precompile(Tuple{typeof(Base.setproperty!), Weave.DocChunk, Symbol, Array{Weave.InlineText, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Weave.DocChunk})
precompile(Tuple{typeof(Base.vcat), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), Module, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Weave.WeaveChunk, N} where N}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){String}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, String})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Nothing}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.copy), Array{Weave.WeaveChunk, 1}})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Pandoc})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.Pandoc})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Pandoc})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.nextind), Base.SubString{String}, Int64, Int64})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, Base.SubString{String}})
precompile(Tuple{getfield(Base, Symbol("##chop#326")), Int64, Int64, typeof(Base.chop), Base.SubString{String}})
precompile(Tuple{typeof(Weave.wrapline), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Weave.wraplines), String, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Array{AbstractString, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.Pandoc})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Weave.format_inline), Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Weave.format_inline), Weave.InlineCode})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{Weave.Inline, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.Pandoc})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Weave, Symbol("#17#18")){String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Base.splice!), Array{Function, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Weave.pop_preexecute_hook), Function})
precompile(Tuple{typeof(Base.findfirst), Function, Array{Function, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Weave, Symbol("#26#27")){typeof(Base.identity)}, Array{Function, 1}, Int64})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Base.Filesystem.rm), String})
precompile(Tuple{Type{NamedTuple{(:out_path,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Weave.get_cwd), Weave.WeaveDoc, String})
precompile(Tuple{getfield(Weave, Symbol("##tangle#13")), String, Symbol, typeof(Weave.tangle), String})
precompile(Tuple{getfield(Weave, Symbol("#kw##tangle")), NamedTuple{(:out_path,), Tuple{String}}, typeof(Weave.tangle), String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Base.Missing})
precompile(Tuple{typeof(Base.write), Base.IOStream, Base.Regex})
precompile(Tuple{getfield(Weave, Symbol("#14#15")){Weave.WeaveDoc}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Weave, Symbol("#14#15")){Weave.WeaveDoc}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{Type{NamedTuple{(:doctype,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype,), Tuple{String}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, ArgumentError})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, ArgumentError})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, ArgumentError})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, ArgumentError})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, ErrorException})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, ErrorException})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, ErrorException})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, ErrorException})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, UndefVarError})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, UndefVarError})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, UndefVarError})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, UndefVarError})
precompile(Tuple{typeof(Base.:(!=)), Int64, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.getproperty), Weave.WeaveDoc, Symbol})
precompile(Tuple{getfield(Test, Symbol("#@test_throws")), LineNumberNode, Module, Any, Any})
precompile(Tuple{Type{NamedTuple{(:doctype, :throw_errors), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :throw_errors), Tuple{String, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{Type{Test.Threw}, ArgumentError, Nothing, LineNumberNode})
precompile(Tuple{typeof(Base.println), Test.Fail})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Fail})
precompile(Tuple{typeof(Base.print), Test.Fail})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol, Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#3#5")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("#1#2")){String, Tuple{Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("#4#6")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Test.scrub_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Fail})
precompile(Tuple{typeof(Test.do_test_throws), Test.Threw, Any, Any})
precompile(Tuple{typeof(Base.getproperty), Weave.JMarkdown2HTML, Symbol})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("text/html")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/html")}, Any})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/html")}, ArgumentError})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Multimedia.MIME{Symbol("text/html")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, ArgumentError})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, String}, Char})
precompile(Tuple{typeof(Markdown.htmlesc), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Weave.embed_figures), Array{Weave.CodeChunk, 1}, String})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/html")}, ErrorException})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, ErrorException})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Module, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Main, Symbol("##weavestring#3")), String, String, Module, typeof(Main.weavestring), String})
precompile(Tuple{typeof(Main.weavestring), String})
precompile(Tuple{typeof(Base.:(!=)), Module, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Module})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Module})
precompile(Tuple{typeof(TestMod.printx)})
precompile(Tuple{Type{NamedTuple{(:mod,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Main, Symbol("##weavestring#3")), String, String, Symbol, typeof(Main.weavestring), String})
precompile(Tuple{getfield(Main, Symbol("#kw##weavestring")), NamedTuple{(:mod,), Tuple{Symbol}}, typeof(Main.weavestring), String})
precompile(Tuple{typeof(Base.join), Tuple{Symbol, Symbol, Symbol}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{Symbol, Symbol, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol}, String})
precompile(Tuple{typeof(WeaveSandBox5.TestMod.printx)})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.WeaveChunk, 1}, getfield(Weave, Symbol("#22#24"))}})
precompile(Tuple{typeof(Weave.include_weave), Module, String, Symbol})
precompile(Tuple{typeof(Weave.include_weave), Module, String})
precompile(Tuple{typeof(Base.getindex), Array{Weave.Inline, 1}, Int64})
precompile(Tuple{typeof(Base.match), Base.Regex, String})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Char, 1}}})
precompile(Tuple{typeof(YAML._fill), YAML.BufferedInput, UInt64})
precompile(Tuple{typeof(YAML.forward!), YAML.BufferedInput, Int64})
precompile(Tuple{typeof(YAML.forwardchars!), YAML.TokenStream, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Char, 1}, Tuple{Base.OneTo{UInt64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Char, 1}, Base.UnitRange{UInt64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Char, 1}, Tuple{Base.UnitRange{UInt64}}})
precompile(Tuple{typeof(YAML.prefix), YAML.BufferedInput, Int64})
precompile(Tuple{typeof(YAML.scan_line_break), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_to_next_token), YAML.TokenStream})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt64, YAML.SimpleKey}, UInt64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{YAML.SimpleKey, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(YAML.stale_possible_simple_keys), YAML.TokenStream})
precompile(Tuple{typeof(YAML.unwind_indent), YAML.TokenStream, UInt64})
precompile(Tuple{typeof(YAML.unwind_indent), YAML.TokenStream, Int64})
precompile(Tuple{typeof(YAML.remove_possible_simple_key), YAML.TokenStream})
precompile(Tuple{typeof(Base.empty!), Base.Dict{UInt64, YAML.SimpleKey}})
precompile(Tuple{typeof(YAML.fetch_stream_end), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_directive_name), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_yaml_directive_number), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_yaml_directive_value), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_directive_ignored_line), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_handle), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_directive_handle), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_uri_escapes), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_uri), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_directive_prefix), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_directive), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_directive), YAML.TokenStream})
precompile(Tuple{typeof(YAML.check_document_start), YAML.TokenStream})
precompile(Tuple{typeof(YAML.check_document_end), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_block_entry), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_key), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_value), YAML.TokenStream})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{UInt64, YAML.SimpleKey}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{UInt64, YAML.SimpleKey}, UInt64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{UInt64, YAML.SimpleKey}, YAML.SimpleKey, UInt64})
precompile(Tuple{typeof(YAML.fetch_alias), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_anchor), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_tag), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_tag), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_block_scalar_ignored_line), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_block_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.scan_flow_scalar_breaks), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar_spaces), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Char}, Char})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Int64}, Char})
precompile(Tuple{getfield(Base, Symbol("##parse#347")), Int64, typeof(Base.parse), Type{Int64}, String})
precompile(Tuple{typeof(YAML.scan_flow_scalar_non_spaces), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.fetch_flow_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.check_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_plain_spaces), YAML.TokenStream, Int64, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_more_tokens), YAML.TokenStream})
precompile(Tuple{typeof(YAML.next_possible_simple_key), YAML.TokenStream})
precompile(Tuple{typeof(YAML.forward!), YAML.TokenStream})
precompile(Tuple{typeof(YAML.parse_stream_start), YAML.EventStream})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.StreamStartEvent})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Event}}, YAML.StreamStartEvent})
precompile(Tuple{typeof(YAML.peek), YAML.TokenStream})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{String, String}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{String, String}})
precompile(Tuple{typeof(YAML.process_directives), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_document_start), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_implicit_document_start), YAML.EventStream})
precompile(Tuple{typeof(YAML.__fill), YAML.BufferedInput, Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.string), Char, Char, Vararg{Char, N} where N})
precompile(Tuple{typeof(Base.in), Type{T} where T, Array{DataType, 1}})
precompile(Tuple{typeof(Base.getproperty), YAML.BlockMappingStartToken, Symbol})
precompile(Tuple{typeof(Base.getproperty), YAML.Span, Symbol})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.DocumentStartEvent})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Event}}, YAML.DocumentStartEvent})
precompile(Tuple{typeof(YAML._parse_node), Nothing, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.parse_node), YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.parse_block_node), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), YAML.BlockMappingStartToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.__parse_node), YAML.BlockMappingStartToken, YAML.EventStream, Bool, YAML.Mark, YAML.Mark, Nothing, Nothing, Bool})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.MappingStartEvent})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Event}}, YAML.MappingStartEvent})
precompile(Tuple{Type{YAML.MappingNode}, Nothing, Array{Any, 1}, YAML.Mark, Nothing, Bool})
precompile(Tuple{typeof(YAML._compose_mapping_node), YAML.MappingStartEvent, YAML.Composer, Nothing})
precompile(Tuple{typeof(YAML.compose_mapping_node), YAML.Composer, Nothing})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, YAML.Node}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, YAML.Node}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, YAML.Node}, YAML.MappingNode, String})
precompile(Tuple{typeof(YAML._compose_mapping_node), YAML.MappingStartEvent, YAML.Composer, String})
precompile(Tuple{typeof(YAML.compose_mapping_node), YAML.Composer, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, YAML.Node}, String})
precompile(Tuple{typeof(YAML.handle_error), YAML.MappingStartEvent, YAML.Composer, String})
precompile(Tuple{typeof(YAML.handle_event), YAML.MappingStartEvent, YAML.Composer})
precompile(Tuple{typeof(YAML.parse_block_mapping_key), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_block_mapping_first_key), YAML.EventStream})
precompile(Tuple{typeof(Base.push!), Array{YAML.Mark, 1}, YAML.Mark})
precompile(Tuple{typeof(YAML._parse_node), YAML.ScalarToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(Base.getproperty), YAML.ScalarToken, Symbol})
precompile(Tuple{typeof(YAML.__parse_node), YAML.ScalarToken, YAML.EventStream, Bool, YAML.Mark, YAML.Mark, Nothing, Nothing, Bool})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.ScalarEvent})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Event}}, YAML.ScalarEvent})
precompile(Tuple{typeof(YAML.__compose_mapping_node), YAML.ScalarEvent, YAML.Composer, YAML.MappingNode})
precompile(Tuple{Type{YAML.ScalarNode}, Nothing, String, YAML.Mark, YAML.Mark, Nothing})
precompile(Tuple{Type{YAML.ScalarNode}, Nothing, String, YAML.Mark, YAML.Mark, Char})
precompile(Tuple{typeof(YAML._compose_scalar_node), YAML.ScalarEvent, YAML.Composer, Nothing})
precompile(Tuple{typeof(YAML.compose_scalar_node), YAML.Composer, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, YAML.Node}, YAML.ScalarNode, String})
precompile(Tuple{typeof(YAML._compose_scalar_node), YAML.ScalarEvent, YAML.Composer, String})
precompile(Tuple{typeof(YAML.compose_scalar_node), YAML.Composer, String})
precompile(Tuple{typeof(YAML.handle_error), YAML.ScalarEvent, YAML.Composer, String})
precompile(Tuple{typeof(YAML.handle_event), YAML.ScalarEvent, YAML.Composer})
precompile(Tuple{typeof(YAML.resolve), YAML.Resolver, Type{YAML.ScalarNode}, String, Tuple{Bool, Bool}})
precompile(Tuple{typeof(YAML.parse_block_mapping_value), YAML.EventStream})
precompile(Tuple{typeof(Base.string)})
precompile(Tuple{typeof(Base.getproperty), YAML.BlockEndToken, Symbol})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.MappingEndEvent})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Event}}, YAML.MappingEndEvent})
precompile(Tuple{typeof(Base.getproperty), YAML.MappingEndEvent, Symbol})
precompile(Tuple{typeof(Base.setproperty!), YAML.MappingNode, Symbol, YAML.Mark})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Mark}}, YAML.Mark})
precompile(Tuple{typeof(YAML.parse_document_end), YAML.EventStream})
precompile(Tuple{typeof(Base.getproperty), YAML.StreamEndToken, Symbol})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.DocumentEndEvent})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Event}}, YAML.DocumentEndEvent})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.StreamEndEvent})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, YAML.Event}}, YAML.StreamEndEvent})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{YAML.Node, Any}, YAML.MappingNode})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{YAML.Node, Nothing}, YAML.MappingNode})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{YAML.Node, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{YAML.Node, Nothing}, YAML.MappingNode})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{YAML.Node, Nothing}, Nothing, YAML.MappingNode})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, String}, Function}, String})
precompile(Tuple{typeof(Base.throw_boundserror), Array{YAML.Node, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{Nothing, String}, Function}, Nothing})
precompile(Tuple{typeof(YAML.construct_object), YAML.Constructor, YAML.MappingNode, Bool})
precompile(Tuple{typeof(Base.empty!), Base.Dict{YAML.Node, Any}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{YAML.Node, Nothing}})
precompile(Tuple{typeof(YAML.construct_document), YAML.Constructor, YAML.MappingNode})
precompile(Tuple{typeof(Base.reverse), Array{Any, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(YAML.flatten_mapping), YAML.MappingNode})
precompile(Tuple{typeof(YAML.construct_mapping), YAML.Constructor, YAML.MappingNode, Bool})
precompile(Tuple{typeof(YAML.construct_yaml_map), YAML.Constructor, YAML.MappingNode})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.ScalarNode}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.ScalarNode}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), YAML.ScalarNode, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{YAML.Node, Any}, YAML.ScalarNode})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{YAML.Node, Nothing}, YAML.ScalarNode})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{YAML.Node, Nothing}, YAML.ScalarNode})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{YAML.Node, Nothing}, Nothing, YAML.ScalarNode})
precompile(Tuple{typeof(YAML.construct_object), YAML.Constructor, YAML.ScalarNode, Bool})
precompile(Tuple{typeof(YAML.construct_yaml_str), YAML.Constructor, YAML.ScalarNode})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{YAML.Node, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{YAML.Node, Any}, YAML.ScalarNode})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{YAML.Node, Any}, String, YAML.ScalarNode})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{YAML.Node, Any}, YAML.MappingNode})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{YAML.Node, Any}, Base.Dict{Any, Any}, YAML.MappingNode})
precompile(Tuple{typeof(Base.filter), getfield(Weave, Symbol("#23#25")), Array{Weave.WeaveChunk, 1}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{Weave.WeaveChunk, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Weave.WeaveChunk, 1}, getfield(Weave, Symbol("#22#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Weave.WeaveChunk, 1}, getfield(Weave, Symbol("#22#24"))}, Int64})
precompile(Tuple{typeof(Test1.testing), String})
precompile(Tuple{typeof(Base.split), String, Base.Regex})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Weave, Symbol("#78#79"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.SubString{String}, 1}, getfield(Weave, Symbol("#78#79"))}})
precompile(Tuple{typeof(Weave.convert_doc), Weave.WeaveDoc, Weave.ScriptOutput})
precompile(Tuple{typeof(Weave.convert_doc), Weave.WeaveDoc, Weave.NowebOutput})
precompile(Tuple{typeof(Weave.convert_doc), Weave.WeaveDoc, Weave.MarkdownOutput})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Any, 1}, String})
precompile(Tuple{typeof(Weave.convert_doc), Weave.WeaveDoc, Weave.NotebookOutput})
precompile(Tuple{getfield(Weave, Symbol("##convert_doc#73")), Nothing, typeof(Weave.convert_doc), String, String})
precompile(Tuple{typeof(Base.println), Test.Error})
precompile(Tuple{typeof(Test.record), Test.FallbackTestSet, Test.Error})
precompile(Tuple{typeof(Base.print), Test.Error})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.Error})
precompile(Tuple{typeof(Test.do_test), Test.Threw, Expr})
precompile(Tuple{typeof(Main.convert_test), String, String})
precompile(Tuple{typeof(Main.convert_test), String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.repr), Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.Inline, 1}, typeof(Base.repr)}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Weave.Inline, 1}, typeof(Base.repr)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Weave.Inline, 1}, typeof(Base.repr)}, Int64})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Weave, Symbol("#74#75")){String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(JSON.Parser._count_before), String, Char, Int64})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.MemoryParserState})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, UInt8}, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int64})
precompile(Tuple{Type{Float64}, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Parsers.roundQuotient), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{Int32}, Int128})
precompile(Tuple{typeof(Parsers.BigInt!), Base.GMP.BigInt, Int128})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.realloc2), Int64})
precompile(Tuple{Type{Base.GMP.BigInt}, Int128})
precompile(Tuple{typeof(Base.exp2), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.add_ui), Base.GMP.BigInt, UInt8})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(Parsers.xparse), Type{Float64}, String, Int64, Int64, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.join), Array{Any, 1}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Weave.convert_doc), String, String})
precompile(Tuple{typeof(Base.vect), Base.SubString{String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}, Base.Pair{String, Nothing}, Base.Pair{String, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}, Base.Pair{String, Nothing}, Base.Pair{String, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}, Base.Pair{String, Nothing}, Base.Pair{String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}, Base.Pair{String, Nothing}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}, Base.Pair{String, Nothing}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.SubString{String}, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Array{Base.SubString{String}, 1}}}, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{Any, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.end_object), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}, Int64})
precompile(Tuple{typeof(Base.unsafe_write), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, UInt8})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.write), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.end_array), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Base.SubString{String}})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.SubString{String}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.SubString{String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Nothing})
precompile(Tuple{typeof(Base.print), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.PrettyContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(Weave.read_doc), String})
precompile(Tuple{typeof(Main.contents), Weave.WeaveDoc})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Main.contents), Array{Weave.WeaveChunk, 1}})
precompile(Tuple{typeof(Main.contents), Weave.DocChunk})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.WeaveChunk, 1}, typeof(Main.contents)}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Weave.WeaveChunk, 1}, typeof(Main.contents)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Weave.WeaveChunk, 1}, typeof(Main.contents)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#4#5")), Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.Inline, 1}, getfield(Main, Symbol("#4#5"))}})
precompile(Tuple{getfield(Main, Symbol("#4#5")), Weave.InlineText})
precompile(Tuple{typeof(Base._array_for), Type{Base.SubString{String}}, Array{Weave.Inline, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Main, Symbol("#4#5"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Base.SubString{String}, Base.Generator{Array{Weave.Inline, 1}, getfield(Main, Symbol("#4#5"))}, Int64})
precompile(Tuple{typeof(Base.join), Array{Base.SubString{String}, 1}, String})
precompile(Tuple{Type{Weave.DocChunk}, String, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.getproperty), Weave.GithubMarkdown, Symbol})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.GithubMarkdown})
precompile(Tuple{typeof(Weave.ioformat!), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(Weave.WeaveMarkdown.html)})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#1#2")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.dollarmath), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#3#4")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.topcomment), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Markdown.MD})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#7#8")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{1}}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#7#8")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{1}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlesc), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#13#14")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#13#14")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#39#40")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.LaTeX}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.LaTeX})
precompile(Tuple{typeof(Weave.embed_figures), Weave.CodeChunk, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Weave, Symbol("#35#36")){String}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{AbstractString, 1}, getfield(Weave, Symbol("#35#36")){String}}})
precompile(Tuple{typeof(Base.setproperty!), Weave.CodeChunk, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, N} where N}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Weave.format_code), String, Weave.JMarkdown2HTML})
precompile(Tuple{getfield(Weave, Symbol("#59#60")){Base.Multimedia.MIME{Symbol("text/html")}, DataType, DataType}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Highlights.Compiler.Token, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Base.UnitRange{Int64}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{Type{Highlights.Compiler.Context}, Base.SubString{String}})
precompile(Tuple{typeof(Highlights.Compiler.nullmatch), Base.Regex, Highlights.Compiler.Context})
precompile(Tuple{typeof(Highlights.Compiler.update!), Highlights.Compiler.Context, Base.UnitRange{Int64}, Highlights.Tokens.TokenValue})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:block_comments}})
precompile(Tuple{typeof(Highlights.Lexers.julia_is_identifier), Highlights.Compiler.Context, Char})
precompile(Tuple{typeof(Highlights.Lexers.julia_is_symbol), Highlights.Compiler.Context})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:strings}})
precompile(Tuple{typeof(Highlights.Lexers.julia_is_string_macro), Highlights.Compiler.Context, Int64})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:triple_string_macros}})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:string_macros}})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:commands}})
precompile(Tuple{typeof(Highlights.Lexers.julia_is_method_call), Highlights.Compiler.Context})
precompile(Tuple{typeof(Highlights.Lexers.julia_is_operator), Highlights.Compiler.Context})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:in_interpol}})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:triple_strings}})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaLexer}, Highlights.Compiler.State{:root}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, String})
precompile(Tuple{typeof(Highlights.Format.escape), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Highlights.Format.TokenIterator, Int64})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Highlights.Format.TokenIterator})
precompile(Tuple{typeof(Highlights.highlight), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Base.SubString{String}, Type{Highlights.Lexers.JuliaLexer}, Type{Highlights.Themes.DefaultTheme}})
precompile(Tuple{typeof(Weave.format_output), String, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Mustache.MustacheTokens}}, String})
precompile(Tuple{typeof(Weave.stylesheet), Base.Multimedia.MIME{Symbol("text/html")}, Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Type{T} where T})
precompile(Tuple{getfield(Weave, Symbol("#61#62")){Base.Multimedia.MIME{Symbol("text/html")}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Type{T} where T})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/css")}, Highlights.Themes.RGB})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/css")}, Highlights.Themes.Style})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/css")}, Highlights.Themes.Theme})
precompile(Tuple{typeof(Highlights.stylesheet), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Type{Highlights.Themes.DefaultTheme}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TagToken})
precompile(Tuple{typeof(Base.isempty), Tables.IteratorWrapper{Mustache.TextToken}})
precompile(Tuple{typeof(Mustache.falsy), Mustache.TextToken})
precompile(Tuple{typeof(Base.isempty), Tables.IteratorWrapper{Mustache.TagToken}})
precompile(Tuple{typeof(Mustache.falsy), Mustache.TagToken})
precompile(Tuple{typeof(Base.setindex!), Array{Mustache.Token, 1}, Mustache.TextToken, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Mustache.Token, 1}, Mustache.TagToken, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Weave, Symbol("#63#64")), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Weave, Symbol("#63#64")), Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#63#64"))}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}, Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{getfield(Mustache, Symbol("#kw##render")), NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}, typeof(Mustache.render), Mustache.MustacheTokens})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.MustacheTokens, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Mustache.Token, 1}, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.Writer, Mustache.MustacheTokens, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Symbol, String}, String})
precompile(Tuple{typeof(Mustache.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.Writer, Mustache.MustacheTokens, Base.Dict{Symbol, String}})
precompile(Tuple{getfield(Mustache, Symbol("#12#13")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}}, Mustache.MustacheTokens}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}}, Int64})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, String})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, String})
precompile(Tuple{typeof(Base.getproperty), Mustache.Context, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, String}, String})
precompile(Tuple{typeof(Mustache._lookup_in_view), Base.Dict{Symbol, String}, String})
precompile(Tuple{typeof(Mustache.lookup_in_view), Base.Dict{Symbol, String}, String})
precompile(Tuple{typeof(Mustache.falsy), String})
precompile(Tuple{typeof(Base.getproperty), Weave.JMarkdown2tex, Symbol})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("application/pdf")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/pdf")}, Any})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("text/latex")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("text/latex")}, Any})
precompile(Tuple{typeof(Weave.texify), String})
precompile(Tuple{typeof(Weave.uc2tex), String, Bool})
precompile(Tuple{typeof(Weave.format_code), String, Weave.JMarkdown2tex})
precompile(Tuple{getfield(Weave, Symbol("#59#60")){Base.Multimedia.MIME{Symbol("text/latex")}, DataType, DataType}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Highlights.Format.printe), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, String})
precompile(Tuple{getfield(Highlights.Format, Symbol("##escape#1")), Bool, typeof(Highlights.Format.escape), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Base.SubString{String}})
precompile(Tuple{typeof(Highlights.Format.render_nonwhitespace), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Base.SubString{String}, Symbol, Highlights.Themes.Style})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Highlights.Format.TokenIterator})
precompile(Tuple{typeof(Highlights.highlight), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Base.SubString{String}, Type{Highlights.Lexers.JuliaLexer}, Type{Highlights.Themes.DefaultTheme}})
precompile(Tuple{typeof(Weave.format_output), String, Weave.JMarkdown2tex})
precompile(Tuple{getfield(Highlights.Format, Symbol("##escape#1")), Bool, typeof(Highlights.Format.escape), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, String})
precompile(Tuple{getfield(Weave, Symbol("#67#68")), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Weave.stylesheet), Base.Multimedia.MIME{Symbol("text/latex")}, Type{T} where T})
precompile(Tuple{getfield(Weave, Symbol("#61#62")){Base.Multimedia.MIME{Symbol("text/latex")}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Type{T} where T})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Highlights.Themes.RGB})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Highlights.Themes.Style})
precompile(Tuple{typeof(Highlights.Format.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Highlights.Themes.Theme})
precompile(Tuple{typeof(Highlights.stylesheet), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Type{Highlights.Themes.DefaultTheme}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Weave, Symbol("#65#66")), Base.Dict{Any, Any}})
precompile(Tuple{getfield(Weave, Symbol("#65#66")), Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#65#66"))}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:body, :highlight), Tuple{String, String}}, Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:body, :highlight), Tuple{String, String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:body, :highlight), Tuple{String, String}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{getfield(Mustache, Symbol("#kw##render")), NamedTuple{(:body, :highlight), Tuple{String, String}}, typeof(Mustache.render), Mustache.MustacheTokens})
precompile(Tuple{getfield(Mustache, Symbol("#12#13")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:body, :highlight), Tuple{String, String}}}, Mustache.MustacheTokens}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:body, :highlight), Tuple{String, String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:body, :highlight), Tuple{String, String}}}, Int64})
precompile(Tuple{typeof(Base.in), Base.Pair{String, String}, Base.Dict{Any, Any}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, String}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setproperty!), Weave.InlineText, Symbol, Base.SubString{String}})
precompile(Tuple{typeof(Base.getproperty), Weave.DocChunk, Symbol})
precompile(Tuple{typeof(Base.getproperty), Weave.InlineText, Symbol})
precompile(Tuple{getfield(Base, Symbol("##chop#326")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Weave.wrapline), String, Int64})
precompile(Tuple{typeof(Weave.wrapline), String})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Weave.uc2tex), String})
precompile(Tuple{typeof(Base.Multimedia.display), String, Any})
precompile(Tuple{typeof(Base.Multimedia.display), Base.Multimedia.MIME{Symbol("text/markdown")}, Any})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{typeof(Base.Multimedia.__binrepr), Base.Multimedia.MIME{Symbol("text/markdown")}, String, Nothing})
precompile(Tuple{typeof(Base.Multimedia._binrepr), Base.Multimedia.MIME{Symbol("text/markdown")}, String, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, String})
precompile(Tuple{Type{Markdown.Header{3}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Markdown.MD})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#133#134")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/html")}, Markdown.MD})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/html")}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#101#102")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{3}}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#101#102")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{3}}, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{3}})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{getfield(Markdown, Symbol("#107#108")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#107#108")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph})
precompile(Tuple{getfield(Markdown, Symbol("#125#126")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#125#126")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#123#124")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code})
precompile(Tuple{Type{WeaveSandBox8.Dummy}, String})
precompile(Tuple{typeof(Base.:(!=)), WeaveSandBox8.Dummy, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, WeaveSandBox8.Dummy})
precompile(Tuple{typeof(Base.Multimedia._textrepr), Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox8.Dummy, Nothing})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox8.Dummy})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox8.Dummy})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List})
precompile(Tuple{getfield(Markdown, Symbol("#119#121")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#119#121")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#120#122")){Array{Any, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/latex")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/latex")}})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, Markdown.MD})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/latex")}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#135#136")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{3}}})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{3}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Markdown.latexinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, AbstractString}, Char})
precompile(Tuple{typeof(Markdown.latexesc), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Markdown.latexinline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph})
precompile(Tuple{getfield(Markdown, Symbol("#151#152")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold}})
precompile(Tuple{typeof(Markdown.latexinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold})
precompile(Tuple{typeof(Markdown.wrapinline), getfield(Markdown, Symbol("#139#140")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code}, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Markdown.latexinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code})
precompile(Tuple{Type{WeaveSandBox9.Dummy}, String})
precompile(Tuple{typeof(Base.:(!=)), WeaveSandBox9.Dummy, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, WeaveSandBox9.Dummy})
precompile(Tuple{typeof(Base.Multimedia._textrepr), Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox9.Dummy, Nothing})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox9.Dummy})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox9.Dummy})
precompile(Tuple{getfield(Markdown, Symbol("#148#150")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List, getfield(Markdown, Symbol("#147#149")){Markdown.List, Int64}}})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{Any, N} where N})
precompile(Tuple{Type{WeaveSandBox10.Dummy}, String})
precompile(Tuple{typeof(Base.:(!=)), WeaveSandBox10.Dummy, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, WeaveSandBox10.Dummy})
precompile(Tuple{typeof(Base.Multimedia._textrepr), Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox10.Dummy, Nothing})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox10.Dummy})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, WeaveSandBox10.Dummy})
precompile(Tuple{typeof(Weave.ioformat!), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(Markdown.latex)})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#135#136")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{1}}})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{1}})
precompile(Tuple{typeof(Main.doc_from_string), String})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Base.isempty), Tables.IteratorWrapper{Mustache.SectionToken}})
precompile(Tuple{typeof(Mustache.falsy), Mustache.SectionToken})
precompile(Tuple{typeof(Base.setproperty!), Mustache.SectionToken, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Mustache.Token, 1}, Mustache.SectionToken, Int64})
precompile(Tuple{typeof(Mustache.falsy), Nothing})
precompile(Tuple{Type{Mustache.Context}, Nothing, Mustache.Context})
precompile(Tuple{typeof(Mustache._renderTokensByValue), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.isempty), Tables.IteratorWrapper{Nothing}})
precompile(Tuple{typeof(Mustache.renderTokensByValue), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache._lookup_in_view), Nothing, String})
precompile(Tuple{typeof(Mustache.lookup_in_view), Nothing, String})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{}})
precompile(Tuple{typeof(Mustache.escape_html), String})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{String, String}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:doctype, :latex_keep_unicode), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :latex_keep_unicode), Tuple{String, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{Type{NamedTuple{(:flavor,), T} where T<:Tuple}, Tuple{Markdown.Config}})
precompile(Tuple{getfield(Markdown, Symbol("#kw##parse")), NamedTuple{(:flavor,), Tuple{Markdown.Config}}, typeof(Markdown.parse), String})
precompile(Tuple{Type{Markdown.Header{2}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.asterisk_italic), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#41#42")){Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Markdown.image), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("##skipwhitespace#1")), Bool, typeof(Markdown.skipwhitespace), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{getfield(Base, Symbol("##readuntil#317")), Bool, typeof(Base.readuntil), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, UInt8})
precompile(Tuple{getfield(Base, Symbol("##readline#290")), Bool, typeof(Base.readline), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{getfield(Markdown, Symbol("##startswith#9")), Bool, Bool, typeof(Markdown.startswith), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.Regex})
precompile(Tuple{getfield(Markdown, Symbol("##startswith#4")), Bool, Bool, Bool, typeof(Markdown.startswith), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.SubString{String}})
precompile(Tuple{getfield(Markdown, Symbol("#13#14")){Bool, Nothing, Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.SubString{String}}})
precompile(Tuple{getfield(Markdown, Symbol("##startswith#4")), Bool, Bool, Bool, typeof(Markdown.startswith), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, String})
precompile(Tuple{getfield(Markdown, Symbol("#13#14")){Bool, Nothing, Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, String}})
precompile(Tuple{getfield(Markdown, Symbol("#39#40")){Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}}})
precompile(Tuple{typeof(Markdown.inline_code), Base.GenericIOBuffer{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Markdown.MD})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{Array{Any, 1}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Any, 1}, 1}, Array{Array{Any, 1}, 1}, Int64})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Markdown.MD})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#7#8")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{2}}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#7#8")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{2}}, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Header{2}})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#41#42")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#41#42")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Footnote})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#45#46")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Footnote}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#43#44")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Italic}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#43#44")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Italic}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Italic})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#37#38")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#47#48")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Link}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#47#48")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Link}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Link})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Footnote})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#18#20")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Footnote}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#17#19")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Footnote}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#17#19")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Footnote}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.HorizontalRule})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#29#30")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.LaTeX}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.LaTeX})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#25#27")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#25#27")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#26#28")){Array{Any, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#9#11")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#9#11")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#10#12")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Code}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#22#24")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Admonition}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#21#23")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Admonition}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#21#23")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Admonition}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Admonition})
precompile(Tuple{typeof(Weave.WeaveMarkdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Image})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#15#16")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.BlockQuote}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#15#16")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.BlockQuote}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.BlockQuote})
precompile(Tuple{getfield(Weave.WeaveMarkdown, Symbol("#32#35")){Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Table}})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#32#35")){Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Table}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#31#34")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Table}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Table})
precompile(Tuple{typeof(Weave.WeaveMarkdown.withtag), getfield(Weave.WeaveMarkdown, Symbol("#33#36")){Array{Any, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Weave.WeaveMarkdown.comment), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.getproperty), Markdown.MD, Symbol})
precompile(Tuple{typeof(Base.getproperty), Markdown.LaTeX, Symbol})
precompile(Tuple{typeof(Base.getproperty), Markdown.Paragraph, Symbol})
precompile(Tuple{typeof(Base.getproperty), Weave.WeaveMarkdown.Comment, Symbol})
precompile(Tuple{typeof(Markdown.latex), Markdown.LaTeX})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Markdown.LaTeX})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{String, 1}, getfield(Markdown, Symbol("#179#180")){Markdown.LaTeX}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(Markdown, Symbol("#179#180")){Markdown.LaTeX}}})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.LaTeX})
precompile(Tuple{typeof(Markdown.latex), Weave.WeaveMarkdown.Comment})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Weave.WeaveMarkdown.Comment})
precompile(Tuple{typeof(Markdown.latex), Base.GenericIOBuffer{Array{UInt8, 1}}, Weave.WeaveMarkdown.Comment})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Markdown.LaTeX})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Weave.WeaveMarkdown.Comment})
precompile(Tuple{typeof(Weave.WeaveMarkdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Weave.WeaveMarkdown.Comment})
precompile(Tuple{typeof(Base.setproperty!), Weave.CodeChunk, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, N} where N}, Array{String, 1}})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.Tex})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.GithubMarkdown})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.Hugo})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{AbstractString, 1}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#186")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:init,), Tuple{String}}}, typeof(Base.mapfoldl), Function, Function, Base.Iterators.Enumerate{Array{AbstractString, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##mapreduce")), NamedTuple{(:init,), Tuple{String}}, typeof(Base.mapreduce), Function, Function, Base.Iterators.Enumerate{Array{AbstractString, 1}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Weave, Symbol("#format_shortcode#58")){Weave.CodeChunk, String}, typeof(Base.:(*)), NamedTuple{(:init,), Tuple{String}}, Base.Iterators.Enumerate{Array{AbstractString, 1}}})
precompile(Tuple{getfield(Weave, Symbol("#format_shortcode#58")){Weave.CodeChunk, String}, Tuple{Int64, String}})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.MultiMarkdown})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.AsciiDoc})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.Rest})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Nearest}, Int64, Int64})
precompile(Tuple{typeof(Weave.md_length_to_latex), String, String})
precompile(Tuple{typeof(Base.print_to_string), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Weave.header_args), Weave.WeaveDoc, String, Symbol, Nothing, String, String, Symbol, Bool, String, Nothing, Nothing, Array{String, 1}, String})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), String, Symbol, String, Base.Dict{Any, Any}, Symbol, String, Nothing, String, Symbol, Bool, String, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{typeof(Main.mmtest), String, String, String})
precompile(Tuple{Type{NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), T} where T<:Tuple}, Tuple{String, Symbol, String, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool}})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Symbol, String, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), Tuple{String, Symbol, String, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Base.push!), Array{Tuple{AbstractString, Any}, 1}, Tuple{Base.SubString{String}, Symbol}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(Base, Symbol("#73#74")){Int64, Tuple{Array{Int64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.hcat), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Char, Int64}})
precompile(Tuple{typeof(Weave.capture_output), Symbol, Module, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), Array{Char, 1}, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Array{Char, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Char, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Char, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Char, 1}, getfield(WeaveSandBox13, Symbol("#1#2")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Char, 1}, getfield(WeaveSandBox13, Symbol("#1#2")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Char, 1}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Array{Char, 1}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/html")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/html")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Array{Int64, 2}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox13, Symbol("#1#2")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox13, Symbol("#1#2")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Array{Int64, 2}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/html")}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/html")}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.:(!=)), Array{Int64, 2}, Nothing})
precompile(Tuple{typeof(Base.array_summary), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 2}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 2}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 2}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.UnitRange{Int64}, String})
precompile(Tuple{typeof(Base.array_summary), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Char, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Char, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Char, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, typeof(Base.sprint), Function, Char})
precompile(Tuple{typeof(Base.show_invalid), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Char, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.UnitRange{Int64}, String})
precompile(Tuple{typeof(Markdown.parse), String})
precompile(Tuple{typeof(Base.:(!=)), Markdown.MD, Nothing})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.highlight), Base.Multimedia.MIME{Symbol("text/html")}, Base.SubString{String}, Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Highlights.Lexers.julia_repl_splitter), Highlights.Compiler.Context})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaConsoleLexer}, Highlights.Compiler.State{:source}})
precompile(Tuple{typeof(Highlights.Compiler.lex!), Highlights.Compiler.Context, Type{Highlights.Lexers.JuliaConsoleLexer}, Highlights.Compiler.State{:root}})
precompile(Tuple{typeof(Highlights.highlight), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, Base.SubString{String}, Type{Highlights.Lexers.JuliaConsoleLexer}, Type{Highlights.Themes.DefaultTheme}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Char, 1}, getfield(WeaveSandBox14, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Char, 1}, getfield(WeaveSandBox14, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Char, 1}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox14, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox14, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 2}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 2}})
precompile(Tuple{typeof(Markdown.plain), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, Markdown.MD})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, Markdown.MD})
precompile(Tuple{typeof(Markdown.plain), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph})
precompile(Tuple{typeof(Markdown.plaininline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.plaininline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold})
precompile(Tuple{typeof(Markdown.plaininline), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Markdown.plaininline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.getproperty), Weave.Tex, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Char, 1}, getfield(WeaveSandBox15, Symbol("#3#4")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Char, 1}, getfield(WeaveSandBox15, Symbol("#3#4")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Array{Char, 1}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/latex")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox15, Symbol("#3#4")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox15, Symbol("#3#4")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, Array{Int64, 2}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/latex")}, Array{Int64, 2}})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Tex})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Tex})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.Tex})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Char, 1}, getfield(WeaveSandBox16, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Char, 1}, getfield(WeaveSandBox16, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Char, 1}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Char, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox16, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(WeaveSandBox16, Symbol("#5#6")){Base.GenericIOBuffer{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 2}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 2}})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.GithubMarkdown})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.GithubMarkdown})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.GithubMarkdown})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Weave.header_args), Weave.WeaveDoc, String, Symbol, Nothing, String, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), String, Symbol, String, Base.Dict{Any, Any}, Symbol, String, Nothing, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{typeof(Main.pljtest), String, String, String})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Bool, 1}, String, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(PlotUtils.__init__)})
precompile(Tuple{typeof(PlotThemes.add_theme), Symbol, PlotThemes.PlotTheme})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, PlotUtils.ColorLibrary}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(PlotUtils.register_gradient_colors), Symbol, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Symbol})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Weave.run_chunk), Weave.DocChunk, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{typeof(Weave.run_code), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.TermResult})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.CollectResult})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.ScriptResult})
precompile(Tuple{typeof(Weave.eval_chunk), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Weave.run_chunk), Weave.CodeChunk, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), Symbol, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#kw##cptree")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(LibVPX_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.check_js)})
precompile(Tuple{typeof(GR.js.jsterm_send), String, String})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.js.initjs)})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Plots._plots_defaults)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Plots.replaceAlias!), Base.Dict{Symbol, Any}, Symbol, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.replaceAliases!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.preprocessArgs!), Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Plots, Symbol("##default#123")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("##_theme#132")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots._theme), Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Function, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{getfield(Weave, Symbol("#1#7"))})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Weave, Symbol("#2#8"))})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(Weave, Symbol("#3#9"))})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(DocStringExtensions, Symbol("#20#21")){typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.expression_type), Expr})
precompile(Tuple{typeof(Base.:(==)), WeakRef, DocStringExtensions.DocStringTemplate})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Plots.backend), Plots.GRBackend})
precompile(Tuple{typeof(Plots.gr)})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{Type{NamedTuple{(:stop, :length), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base._linspace1), Type{Float64}, Float64, Float64, Int64})
precompile(Tuple{typeof(Base.rat), Float64})
precompile(Tuple{typeof(Base.lcm_unchecked), Int64, Int64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.splitprec), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.:(/)), Base.TwicePrecision{Float64}, Int128})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int128, Int128}, Tuple{Int128, Int128}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._linspace), Float64, Float64, Int64})
precompile(Tuple{typeof(Base._range), Float64, Nothing, Float64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :length), Tuple{Float64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(Base.println), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.show), Base.PipeEndpoint, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Char})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Base.Grisu._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{Type{NamedTuple{(:size,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.:(+)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.big), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Math.sin_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
precompile(Tuple{typeof(Base.sin), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:size,), Tuple{Tuple{Int64, Int64}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Plots._backend_instance), Symbol})
precompile(Tuple{typeof(Plots.backend)})
precompile(Tuple{typeof(Plots.backend), Symbol})
precompile(Tuple{typeof(Plots._pick_default_backend)})
precompile(Tuple{Type{Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:size,), Tuple{Tuple{Int64, Int64}}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, Plots.Attr, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipe), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:lens}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._process_plotrecipe), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots.fg_color), Plots.Attr})
precompile(Tuple{typeof(Plots.color_or_nothing!), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.series_idx), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.link_subplots), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Plots.link_axes!), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Axis, Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Plots.is_axis_attr), Symbol})
precompile(Tuple{typeof(Plots._subplot_setup), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Plots.Attr, Plots.Attr, Symbol, Int64, Bool})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_colors), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Int64, Bool})
precompile(Tuple{typeof(Plots.is3d), Symbol})
precompile(Tuple{typeof(Plots._override_seriestype_check), Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._prepare_subplot), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.isvertical), Plots.Attr})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._expand_subplot_extrema), Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol})
precompile(Tuple{typeof(Plots._series_index), Plots.Attr, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.autopick_ignore_none_auto), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots.aliasesAndAutopick), Plots.Attr, Symbol, Base.Dict{Symbol, Symbol}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots.like_histogram), Symbol})
precompile(Tuple{typeof(Plots.ensure_gradient!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Plots._replace_linewidth), Plots.Attr})
precompile(Tuple{typeof(Plots._update_series_attributes!), Plots.Attr, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.iterate), Plots.Attr, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{typeof(Plots.parse_axis_kw), Symbol})
precompile(Tuple{typeof(Plots.default), Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_args), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported), Plots.GRBackend, Plots.Attr})
precompile(Tuple{typeof(Plots._add_the_series), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots._process_seriesrecipe), Plots.Plot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.isijulia)})
precompile(Tuple{typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.is3d), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_set_xticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_yticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.recompute_lengths), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout})
precompile(Tuple{typeof(Plots.update_inset_bboxes!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Plots._display), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.inline), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(Base.copyto!), Array{RecipesBase.RecipeData, 1}, Int64, Array{RecipesBase.RecipeData, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.println), String, Array{Any, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.compute_xyz), Nothing, Nothing, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), getfield(Plots, Symbol("#146#147")), Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.compute_xyz), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots._add_markershape), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.make_fillrange_from_ribbon), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._preprocess_userrecipe), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.is_scale_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.warnOnUnsupported_scales), Plots.GRBackend, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_errorbar_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_smooth_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, String, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.layout_args), Plots.Attr})
precompile(Tuple{typeof(Plots.build_layout), Plots.Attr})
precompile(Tuple{typeof(Plots.compute_gridsize), Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Measures.Length{U, T} where T where U}, Symbol, Float64})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#187")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Float64, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{T, 3} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(ColorTypes.pureintersect), Type{Any}, Type{Float64}})
precompile(Tuple{typeof(Base.parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float64, 3}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Lab{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.Lab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.XYZ{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.XYZ{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(PlotUtils.lightness_from_background), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.Lab{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.RGB{Float64}}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(PlotUtils.adjust_lch), ColorTypes.RGBA{Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{ColorTypes.RGBA{Float64}, 1}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 1}, Int64, Array{ColorTypes.RGB{Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Colors._colordiff), ColorTypes.Lab{Float64}, ColorTypes.Lab{Float64}, Colors.DE_2000})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#16")), Bool, typeof(Base.identity), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Float64, 1}, Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Float64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Base, Symbol("##diff#413")), Int64, typeof(Base.diff), Array{Float64, 1}})
precompile(Tuple{typeof(Base.error)})
precompile(Tuple{typeof(PlotUtils.getpctrange), Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(PlotUtils.get_zvalues), Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}, Base.IndexLinear, Array{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGB{Float64}, 1}, Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(PlotUtils.gradient_from_list), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("##generate_colorgradient#1")), Array{ColorTypes.RGBA{Float64}, 1}, Float64, Int64, Int64, typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorGradient, Float64})
precompile(Tuple{typeof(PlotUtils.cgrad_reverse), Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("#9#11")), Base.Pair{Symbol, PlotUtils.ColorLibrary}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(PlotUtils, Symbol("#9#11")), Base.Dict{Symbol, PlotUtils.ColorLibrary}}, getfield(PlotUtils, Symbol("#8#10"))}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorLibrary, Symbol})
precompile(Tuple{typeof(PlotUtils.getgradient), Symbol, PlotUtils.ColorLibrary})
precompile(Tuple{typeof(Base.reverse), Array{ColorTypes.RGBA{Float64}, 1}, Int64, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad_colors#17")), Symbol, typeof(PlotUtils.cgrad_colors), Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log10), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log2), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.log), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.exp10), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp10), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#21")), Nothing, Symbol, typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(Colors.pow12_5), Float64})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.Lab{Float64}}, ColorTypes.XYZ{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.Math.cbrt), Float64})
precompile(Tuple{typeof(Base.atan), Float64})
precompile(Tuple{typeof(Base.atan), Float64, Float64})
precompile(Tuple{typeof(Base.Math.sincos_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.sincos), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}, Tuple{Bool}, ColorTypes.RGBA{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Math.sind), Float64})
precompile(Tuple{typeof(Base.Math.cosd), Float64})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float64})
precompile(Tuple{typeof(Base.cat_indices), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##attr!#98")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("##Axis#97")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.Axis}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_axis), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis_colors), Plots.Axis})
precompile(Tuple{typeof(Plots._update_axis_links), Plots.Plot{Plots.GRBackend}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.IndexLinear, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{Type{Symbol}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Symbol})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Float64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, String})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Plots.Attr, Symbol, Int64})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Tuple{}})
precompile(Tuple{typeof(Plots._prepare_annotations), Plots.Subplot{Plots.GRBackend}, Plots.Attr})
precompile(Tuple{typeof(Plots.annotations), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), Plots.Attr, Symbol, Bool})
precompile(Tuple{typeof(Plots.like_surface), Symbol})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Plots.autopick), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Plots.Attr, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Set{Symbol}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Plots.Plot{Plots.GRBackend}, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), String, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Plots.savefig), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(WeavePlots.add_plots_figure), Weave.Report, Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(Weave, Symbol("##get_figname#43")), Nothing, String, typeof(Weave.get_figname), Weave.Report, Weave.CodeChunk})
precompile(Tuple{getfield(Weave, Symbol("#kw##get_figname")), NamedTuple{(:ext,), Tuple{String}}, typeof(Weave.get_figname), Weave.Report, Weave.CodeChunk})
precompile(Tuple{typeof(Plots.getExtension), String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, Base.SubString{String}})
precompile(Tuple{getfield(Plots, Symbol("#298#299"))})
precompile(Tuple{typeof(Base.get), getfield(Plots, Symbol("#298#299")), Base.Dict{String, Function}, Base.SubString{String}})
precompile(Tuple{typeof(Plots.addExtension), String, String})
precompile(Tuple{typeof(Plots.png), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Plots._show), Base.IOStream, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOStream, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.default_should_widen), Plots.Axis})
precompile(Tuple{typeof(Plots.ispolar), Plots.Series})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_2tuple), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#105#106")){Symbol}, Float64})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{getfield(Plots, Symbol("#107#108")){Symbol}, Float64})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#40#43")){Float64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#40#43")){Float64}}})
precompile(Tuple{typeof(Base.hidigit), Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#41#44")){Float64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#41#44")){Float64}}})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#37#38"))}, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("#kw##optimize_ticks")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Down}, Int64, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#39#42"))}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Int64})
precompile(Tuple{typeof(Base.reduce_first), Function, Int64})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.max), NamedTuple{(:init,), Tuple{Int64}}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#39#42"))}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#107#108")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#107#108")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Showoff.concrete_minimum), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.concrete_maximum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Base.oftype), UInt32, Int64})
precompile(Tuple{typeof(Base.Grisu.normalizedbound), Float32})
precompile(Tuple{typeof(Base.Grisu.fastshortest), Float32, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.init3!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init1!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init2!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.initialscaledstartvalues!), UInt32, Int32, Bool, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.bignumdtoa), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float32, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.fastprecision), Float32, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64})
precompile(Tuple{typeof(Showoff.plain_precision_heuristic), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64})
precompile(Tuple{typeof(Showoff.format_fixed), Float64, Int64})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{getfield(Showoff, Symbol("#1#2")), Float64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}})
precompile(Tuple{typeof(Showoff.format_fixed_scientific), Float64, Int64, Bool})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{String, 1}, typeof(Base.string)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.tickfont), Plots.Axis})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#91")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB24}})
precompile(Tuple{getfield(Base, Symbol("##parse#347")), Int64, typeof(Base.parse), Type{UInt32}, Base.SubString{String}})
precompile(Tuple{typeof(Colors.chop1), Base.SubString{String}})
precompile(Tuple{typeof(FixedPointNumbers.throw_converterror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Colors.parse_rgb), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_hsl_sl), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_alpha_num), Base.SubString{String}})
precompile(Tuple{Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, String})
precompile(Tuple{getfield(Base.Unicode, Symbol("##titlecase#2")), getfield(Base, Symbol("#58#59")){typeof(Base.Unicode.iscased)}, Bool, typeof(Base.Unicode.titlecase), String})
precompile(Tuple{typeof(Colors._parse_colorant), String})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_set_font")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.Math.sind), Int64})
precompile(Tuple{typeof(Base.Math.cosd), Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Int64}, String})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#392")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Plots.gr_inqtext), Int64, Int64, String})
precompile(Tuple{typeof(Plots.gr_text_size), String, Int64})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(GR.latin1), String})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Measures.Length{:mm, Float64}, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Measures.Length{:mm, Float64}, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Measures.Length{:mm, Float64}, 1}, Int64, Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 2}, Int64, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{RecipesBase.AbstractLayout, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.leftpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.toppad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.rightpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.bottompad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#kw##maximum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}, Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.mapreduce_empty_iter), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}, Base.HasEltype})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}}, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reduce_first), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(:init,), Tuple{Measures.Length{:mm, Float64}}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}, Tuple{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.fill!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.check_reducedims), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Array{Measures.Length{:mm, Float64}, 2}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.Subplot{Plots.GRBackend}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Int64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.get_aspect_ratio), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.should_add_to_legend), Plots.Series})
precompile(Tuple{typeof(Plots.iscontour), Plots.Series})
precompile(Tuple{typeof(Plots.colorbar_style), Plots.Series})
precompile(Tuple{typeof(Plots.gr_update_colorbar!), Plots.GRColorbar, Plots.Series})
precompile(Tuple{getfield(Plots, Symbol("#105#106")){Symbol}, Int64})
precompile(Tuple{typeof(Plots.axis_drawing_info_3d), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline3d#391")), Symbol, Symbol, typeof(Plots.gr_polyline3d), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, typeof(GR.polyline3d)})
precompile(Tuple{typeof(Plots.gr_text), Float64, Float64, String})
precompile(Tuple{typeof(Plots.gr_set_viewport_polar)})
precompile(Tuple{typeof(Plots.get_clims), Plots.Series})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.series_annotations_shapes!), Plots.Series, Symbol})
precompile(Tuple{typeof(Plots.straightline_data), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.has_attribute_segments), Plots.Series})
precompile(Tuple{typeof(Plots.iter_segments), Plots.Series})
precompile(Tuple{typeof(Plots.get_fillalpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Series, Int64})
precompile(Tuple{typeof(Base.iterate), Plots.EachAnn, Int64})
precompile(Tuple{typeof(Plots.hascolorbar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.pie_labels), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#390")), Symbol, Symbol, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, typeof(GR.polyline)})
precompile(Tuple{typeof(Plots.shape_data), Plots.Series, Int64})
precompile(Tuple{typeof(Base.map), getfield(DataStructures, Symbol("#82#83")){Int64}, Tuple{DataStructures.SparseIntSet, DataStructures.SparseIntSet}})
precompile(Tuple{typeof(Plots.axis_drawing_info), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, typeof(Plots.hascolorbar)}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#52#53")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.legendfont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#392")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(GR.tick), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.gr_set_linecolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64, Int64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.convert_sci_unicode), String})
precompile(Tuple{typeof(Plots.gr_tick_label), Plots.Axis, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Char}, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, String}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Char, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Char, String}, Type{Any}, Type{String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, String}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, Char})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, String}, Base.Dict{Char, String}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, Char})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.gr_get_color), Plots.Series})
precompile(Tuple{typeof(Plots.gr_set_gradient), Plots.Series})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.in), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#54#56")){Plots.Series}, Symbol})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#54#56")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Plots, Symbol("#55#57")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.is3d), Plots.Attr})
precompile(Tuple{typeof(Plots.trueOrAllTrue), typeof(Plots.is3d), Symbol})
precompile(Tuple{typeof(Plots.iter_segments), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Series, Int64})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Series, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_fillcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots._cycle), Nothing, Int64})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Base.:(*)), Base.TwicePrecision{Float64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#390")), Symbol, Symbol, typeof(Plots.gr_polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, typeof(GR.polyline)})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_polyline")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.gr_legend_pos), Plots.Subplot{Plots.GRBackend}, Float64, Float64})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(WeavePlots.plots_set_size), Weave.CodeChunk})
precompile(Tuple{getfield(Plots, Symbol("##default#123")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:size,), Tuple{Tuple{Int64, Int64}}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("#kw##default")), NamedTuple{(:size,), Tuple{Tuple{Int64, Int64}}}, typeof(Plots.default)})
precompile(Tuple{typeof(Base.error), String, Symbol})
precompile(Tuple{typeof(Plots.default), Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Random._rand_max383!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.CloseOpen01{Float64}})
precompile(Tuple{typeof(Random.DSFMT.dsfmt_fill_array_close_open!), Random.DSFMT.DSFMT_state, Ptr{Float64}, Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.SamplerTrivial{Random.CloseOpen01{Float64}, Float64}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{Type{NamedTuple{(:reg, :fill), T} where T<:Tuple}, Tuple{Bool, Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Tuple{Int64, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot")), NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.handleColors!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Array{ColorTypes.RGBA{Float64}, 1}}, Symbol})
precompile(Tuple{typeof(PlotUtils.iscgrad_symbol), Symbol})
precompile(Tuple{typeof(Colors._parse_colorant), Type{ColorTypes.RGBA{Float64}}, Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}, String})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.process_fillrange), Int64, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.compute_xyz), Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base.length), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.ones), Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Base.OneTo{Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Base.OneTo{Int64}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._typed_hcat), Type{Float64}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.hcat), Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.size), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{typeof(LinearAlgebra.istril), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(LinearAlgebra.istriu), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(LinearAlgebra.diag), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(\)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("##lu!#131")), Bool, typeof(LinearAlgebra.lu!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.getrs!), Char, Array{Float64, 2}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.geqp3!), Array{Float64, 2}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.qr!), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float64, 2}, Int64, Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(LinearAlgebra.qr), Array{Float64, 2}, Base.Val{true}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.laic1!), Int64, Array{Float64, 1}, Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Int64}, true}, Float64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(LinearAlgebra.triu!), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormqr!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.dot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), LinearAlgebra.QRPackedQ{Float64, Array{Float64, 2}}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.QRPackedQ{Float64, Array{Float64, 2}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getproperty), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormqr!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra.LAPACK.ormrz!), Char, Char, Array{Float64, 2}, Array{Float64, 1}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.invperm), Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexCartesian, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 2}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 2}, Float64})
precompile(Tuple{typeof(LinearAlgebra.ldiv!), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 1}})
precompile(Tuple{typeof(LinearAlgebra._cut_B), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.QRPivoted{Float64, Array{Float64, 2}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(\)), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Plots.ignorenan_minimum), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.ignorenan_maximum), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:path}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.all3D), Plots.Attr})
precompile(Tuple{typeof(Plots.trueOrAllTrue), getfield(Plots, Symbol("#158#159")), Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Int64})
precompile(Tuple{typeof(Plots.get_series_color), ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:markersize, :c), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#kw##scatter!")), NamedTuple{(:markersize, :c), Tuple{Int64, Symbol}}, typeof(Plots.scatter!), Array{Float64, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol, Symbol}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Int64, 0}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#142")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#kw##plot!")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#392")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#392")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Float64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(Base.vcat), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.in), Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots.is_2tuple), Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.reverse), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots._cycle), Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#14#15")){Base.OneTo{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#14#15")){Base.OneTo{Int64}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#14#15")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots._cycle), Int64, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(GR.fillarea), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.OneTo{Int64}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#390")), Symbol, Symbol, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Array{Float64, 1}, typeof(GR.polyline)})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_polyline")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#10#11")){Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#58#59")){getfield(Plots, Symbol("#12#13")){Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#12#13")){Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#390")), Symbol, Symbol, typeof(Plots.gr_polyline), Array{Int64, 1}, Array{Float64, 1}, typeof(GR.polyline)})
precompile(Tuple{getfield(Plots, Symbol("#kw##gr_polyline")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_markeralpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Int64, Float64, Tuple{Float64, Float64}, Int64, Int64, Plots.Shape})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Int64, Float64, Tuple{Float64, Float64}, Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(GR.setborderwidth), Int64})
precompile(Tuple{typeof(Plots.get_markerstrokecolor), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_markercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.polymarker), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_set_fill), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, Function})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#390")), Symbol, Symbol, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, typeof(GR.fillarea)})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Int64, Plots.Shape})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randn_unlikely), Random.MersenneTwister, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister, Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.randn), Int64, Int64})
precompile(Tuple{typeof(Base._accumulate!), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}, Int64, Nothing})
precompile(Tuple{getfield(Base, Symbol("#kw##cumsum")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cumsum), Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot#138")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Plots.GroupBy, Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._preprocess_args), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots._process_userrecipes), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.all3D), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.wrap_surfaces), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 2}})
precompile(Tuple{typeof(Plots.prepareSeriesData), Array{Float64, 2}})
precompile(Tuple{typeof(Plots.convertToAnyVector), Array{Float64, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Plots.SliceIt}, Nothing, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Weave.parse_doc), String, String})
precompile(Tuple{typeof(Weave.read_doc), String, Symbol})
precompile(Tuple{typeof(Weave.strip_header), Weave.DocChunk})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Mustache, Symbol("#22#23")), String})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TextToken})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.SectionToken})
precompile(Tuple{typeof(Mustache.make_tokens), String, Tuple{String, String}})
precompile(Tuple{typeof(Mustache.template_from_file), String})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Weave.format), Weave.WeaveDoc})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), String, Symbol, String, Base.Dict{Any, Any}, Symbol, String, Nothing, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Test.do_test), Test.Threw, Expr})
precompile(Tuple{typeof(Main.pljtest), String, String, String})
precompile(Tuple{Type{Weave.WeaveDoc}, String, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Weave.run_code), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.ScriptResult})
precompile(Tuple{typeof(Weave.eval_chunk), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Weave.run_chunk), Weave.CodeChunk, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Symbol, String, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), Tuple{String, Symbol, String, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Weave.capture_output), Expr, Module, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Weave.capture_output), Symbol, Module, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(1,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s19#2")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("#3#4")), Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.unique), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.unique), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Nothing}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Nothing}, Nothing, String})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Nothing}, String})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/pdf")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("application/pdf")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("application/pdf")}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("application/pdf")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.pdf), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Plots._show), Base.IOStream, Base.Multimedia.MIME{Symbol("application/pdf")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOStream, Base.Multimedia.MIME{Symbol("application/pdf")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setproperty!), Weave.CodeChunk, Symbol, Nothing})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Tex})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Weave.md_length_to_latex), String, String})
precompile(Tuple{Type{NamedTuple{(:cache,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), Symbol, Symbol, Symbol, Base.Dict{Any, Any}, Symbol, String, Nothing, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{getfield(Weave, Symbol("#kw##weave")), NamedTuple{(:cache,), Tuple{Symbol}}, typeof(Weave.weave), String})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), Tuple{String, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Weave.embed_figures), Array{Weave.CodeChunk, 1}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Weave, Symbol("#37#38")){String}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{AbstractString, 1}, getfield(Weave, Symbol("#37#38")){String}}})
precompile(Tuple{typeof(Weave.img2base64), String, String})
precompile(Tuple{getfield(Weave, Symbol("#37#38")){String}, String})
precompile(Tuple{typeof(Base.Multimedia.__binrepr), Base.Multimedia.MIME{Symbol("image/png")}, Array{UInt8, 1}, Nothing})
precompile(Tuple{typeof(Base.Multimedia._textrepr), Base.Multimedia.MIME{Symbol("image/png")}, Array{UInt8, 1}, Nothing})
precompile(Tuple{typeof(Base64.stringmime), Base.Multimedia.MIME{Symbol("image/png")}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base64.encode), UInt8})
precompile(Tuple{typeof(Base.close), Base64.Base64EncodePipe})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.unsafe_write), Base64.Base64EncodePipe, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{AbstractString, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{AbstractString, 1}, getfield(Weave, Symbol("#37#38")){String}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{AbstractString, 1}, getfield(Weave, Symbol("#37#38")){String}}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{getfield(Weave, Symbol("#46#47")){Weave.WeaveDoc}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Weave, Symbol("#46#47")){Weave.WeaveDoc}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Serialization.writeheader), Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Serialization.serialize), Base.IOStream, Weave.WeaveDoc})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{typeof(Serialization.should_send_whole_type), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOStream, Base.RefValue{UInt16}, Int64})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOStream, Base.RefValue{Int32}, Int64})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOStream, Base.RefValue{Int64}, Int64})
precompile(Tuple{typeof(Serialization.serialize_cycle), Serialization.Serializer{Base.IOStream}, Any})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Symbol})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Core.SimpleVector})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Int64})
precompile(Tuple{typeof(Serialization.serialize_mod_names), Serialization.Serializer{Base.IOStream}, Module})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, String})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Method})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Method, 1}})
precompile(Tuple{typeof(Serialization.serialize_typename), Serialization.Serializer{Base.IOStream}, Core.TypeName})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Core.TypeName})
precompile(Tuple{typeof(Serialization.serialize_type_data), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{typeof(Serialization.serialize_type), Serialization.Serializer{Base.IOStream}, DataType, Bool})
precompile(Tuple{typeof(Serialization.serialize_any), Serialization.Serializer{Base.IOStream}, Any})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOStream, Base.RefValue{UInt128}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt128})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Weave.WeaveChunk, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.SubString{String}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Any})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Bool})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Weave.ChunkOutput, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{String, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TagToken})
precompile(Tuple{getfield(Mustache, Symbol("#kw##render")), NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}, typeof(Mustache.render), Mustache.MustacheTokens})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.MustacheTokens, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Mustache.Token, 1}, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.Writer, Mustache.MustacheTokens, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mustache.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.Writer, Mustache.MustacheTokens, Base.Dict{Symbol, String}})
precompile(Tuple{getfield(Mustache, Symbol("#12#13")){Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}}, Mustache.MustacheTokens}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, String})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, String})
precompile(Tuple{typeof(Mustache._renderTokensByValue), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokensByValue), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.SectionToken, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.escape_html), String})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{getfield(Weave, Symbol("#48#49")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Weave, Symbol("#48#49")), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Serialization, Symbol("#5#6")){Serialization.Serializer{Base.IOStream}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(Serialization, Symbol("#5#6")){Serialization.Serializer{Base.IOStream}}, Int64})
precompile(Tuple{typeof(Serialization.deserialize_tuple), Serialization.Serializer{Base.IOStream}, Int64})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{UInt16}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt8, 1}})
precompile(Tuple{typeof(Serialization.deserialize_array), Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Serialization.deserialize_datatype), Serialization.Serializer{Base.IOStream}, Bool})
precompile(Tuple{typeof(Serialization.deserialize_symbol), Serialization.Serializer{Base.IOStream}, Int64})
precompile(Tuple{typeof(Serialization.deserialize_expr), Serialization.Serializer{Base.IOStream}, Int64})
precompile(Tuple{typeof(Serialization.deserialize_module), Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Serialization.deserialize_string), Serialization.Serializer{Base.IOStream}, Int64})
precompile(Tuple{typeof(Serialization.deserialize_svec), Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{Int16}})
precompile(Tuple{typeof(Base.unsafe_read), Base.IOStream, Base.RefValue{Int128}, Int64})
precompile(Tuple{typeof(Base.unsafe_read), Base.IOStream, Base.RefValue{UInt128}, Int64})
precompile(Tuple{typeof(Serialization.handle_deserialize), Serialization.Serializer{Base.IOStream}, Int32})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Serialization.deserialize), Base.IOStream})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{Type{Array{Weave.WeaveChunk, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{Weave.WeaveChunk, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{Symbol, Any}}})
precompile(Tuple{Type{Array{AbstractString, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{AbstractString, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{Type{Array{Weave.ChunkOutput, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{Weave.ChunkOutput, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractString, 1}, String, Int64})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{String, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.:(==)), Weave.WeaveDoc, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Weave.WeaveDoc, Nothing})
precompile(Tuple{typeof(Weave.restore_chunk), Weave.CodeChunk, Weave.WeaveDoc})
precompile(Tuple{typeof(Base.filter), getfield(Weave, Symbol("#50#51")){Weave.CodeChunk}, Array{Weave.WeaveChunk, 1}})
precompile(Tuple{getfield(Weave, Symbol("#50#51")){Weave.CodeChunk}, Weave.CodeChunk})
precompile(Tuple{Type{Weave.CodeChunk}, String, Int64, Int64, Base.SubString{String}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setproperty!), Weave.CodeChunk, Symbol, Int64})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Array{Int64, 1}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.InlineCode, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.InlineText, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Pandoc})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.Pandoc})
precompile(Tuple{Type{Array{Weave.Inline, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{Weave.Inline, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{Weave.Inline, 1}, Weave.InlineText, Int64})
precompile(Tuple{getfield(Weave, Symbol("#50#51")){Weave.CodeChunk}, Weave.DocChunk})
precompile(Tuple{typeof(Base.filter), getfield(Weave, Symbol("#52#55")){Weave.DocChunk}, Array{Weave.WeaveChunk, 1}})
precompile(Tuple{getfield(Weave, Symbol("#52#55")){Weave.DocChunk}, Weave.CodeChunk})
precompile(Tuple{getfield(Weave, Symbol("#52#55")){Weave.DocChunk}, Weave.DocChunk})
precompile(Tuple{typeof(Base.filter), getfield(Weave, Symbol("#53#56")), Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Weave.Inline, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Bool}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Bool}, Bool, Symbol})
precompile(Tuple{typeof(Weave.run_inline), Weave.InlineCode, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}, Weave.InlineCode})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Bool}})
precompile(Tuple{Type{Weave.CodeChunk}, Base.SubString{String}, Int64, Int64, String, Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.print), Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.Inline, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 1}})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/markdown")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), Weave.DocChunk, Symbol, Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Weave.Inline, 1}, Weave.InlineCode, Int64})
precompile(Tuple{typeof(Base.filter), getfield(Weave, Symbol("#54#57")){Weave.DocChunk, Int64}, Array{Weave.Inline, 1}})
precompile(Tuple{getfield(Weave, Symbol("#54#57")){Weave.DocChunk, Int64}, Weave.InlineCode})
precompile(Tuple{typeof(Base.getproperty), Weave.InlineCode, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Weave.InlineCode, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), Weave.InlineCode, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Weave.header_args), Weave.WeaveDoc, String, Symbol, String, String, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), String, Symbol, String, Base.Dict{Any, Any}, Symbol, String, String, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{typeof(Base.:(*)), Nothing, String, String, String})
precompile(Tuple{typeof(Main.test_gadfly), String, String})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(YAML._fill), YAML.BufferedInput, UInt64})
precompile(Tuple{typeof(Base.read), Base.Filesystem.File, Type{Char}})
precompile(Tuple{typeof(YAML.forward!), YAML.BufferedInput, Int64})
precompile(Tuple{typeof(YAML.forwardchars!), YAML.TokenStream, Int64})
precompile(Tuple{typeof(YAML.prefix), YAML.BufferedInput, Int64})
precompile(Tuple{typeof(YAML.scan_line_break), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_to_next_token), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_directive_name), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_yaml_directive_number), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_yaml_directive_value), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_directive_ignored_line), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_handle), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_directive_handle), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_uri_escapes), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_uri), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_directive_prefix), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_directive), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_directive), YAML.TokenStream})
precompile(Tuple{typeof(YAML.check_document_start), YAML.TokenStream})
precompile(Tuple{typeof(YAML.check_document_end), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_block_entry), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_key), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_value), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_alias), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_anchor), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_tag), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_tag), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_block_scalar_ignored_line), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_block_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.scan_flow_scalar_breaks), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar_spaces), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar_non_spaces), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.fetch_flow_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.check_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_plain_spaces), YAML.TokenStream, Int64, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_more_tokens), YAML.TokenStream})
precompile(Tuple{typeof(YAML.forward!), YAML.TokenStream})
precompile(Tuple{typeof(YAML.parse_stream_start), YAML.EventStream})
precompile(Tuple{typeof(YAML.peek), YAML.TokenStream})
precompile(Tuple{typeof(YAML.process_directives), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_document_start), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_implicit_document_start), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), Nothing, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.parse_node), YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.parse_block_node), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), YAML.BlockMappingStartToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.parse_block_mapping_key), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_block_mapping_first_key), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), YAML.ScalarToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.__parse_node), YAML.ScalarToken, YAML.EventStream, Bool, YAML.Mark, YAML.Mark, Nothing, Nothing, Bool})
precompile(Tuple{typeof(YAML.parse_block_mapping_value), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_document_end), YAML.EventStream})
precompile(Tuple{typeof(YAML.flatten_mapping), YAML.MappingNode})
precompile(Tuple{typeof(YAML.construct_mapping), YAML.Constructor, YAML.MappingNode, Bool})
precompile(Tuple{typeof(YAML.construct_yaml_map), YAML.Constructor, YAML.MappingNode})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.MappingNode}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.MappingNode}, Int64, Int64})
precompile(Tuple{typeof(Weave.getvalue), Base.Dict{Any, Any}, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Weave.getvalue), Base.Dict{Any, Any}, String, String})
precompile(Tuple{typeof(Weave.combine_args), Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.in), String, Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{Type{NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), T} where T<:Tuple}, Tuple{String, Symbol, String, Base.Dict{Any, Any}, String, String, String, Symbol, Bool, Bool}})
precompile(Tuple{typeof(Weave.set_rc_params), Weave.WeaveDoc, String, String})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Symbol, String, Base.Dict{Any, Any}, String, String, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), Tuple{String, Symbol, String, Base.Dict{Any, Any}, String, String, String, Symbol, Bool, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Compat.Sys.__init__)})
precompile(Tuple{typeof(OpenBLAS_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#14")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#15")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##verify#98")), Bool, Bool, String, typeof(Pkg.PlatformEngines.verify), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#82")), Bool, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#83")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, String, String})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), Symbol, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(ArrayInterface.__init__)})
precompile(Tuple{getfield(ArrayInterface, Symbol("#15#36"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#16#37"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#17#38"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#18#39"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#19#40"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#20#41"))})
precompile(Tuple{typeof(FiniteDiff.__init__)})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(FFTW_jll.__init__)})
precompile(Tuple{typeof(FFTW.__init__)})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Arpack_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_meta")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Weave.run_chunk), Weave.CodeChunk, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), Symbol, Symbol, Symbol, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Compose.__init__)})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Compose.circle), typeof(Gadfly.Shape.square), typeof(Gadfly.Shape.diamond), typeof(Gadfly.Shape.cross), typeof(Gadfly.Shape.xcross), typeof(Gadfly.Shape.utriangle), typeof(Gadfly.Shape.dtriangle), typeof(Gadfly.Shape.star1), typeof(Gadfly.Shape.star2), typeof(Gadfly.Shape.hexagon), typeof(Gadfly.Shape.octagon), typeof(Gadfly.Shape.hline), typeof(Gadfly.Shape.vline), typeof(Gadfly.Shape.ltriangle), typeof(Gadfly.Shape.rtriangle)}})
precompile(Tuple{getfield(Gadfly, Symbol("##Theme#57")), ColorTypes.LCHab{Float32}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Function, Function, Array{Function, 1}, Measures.Length{:mm, Float64}, Array{Symbol, 1}, Array{Float64, 1}, Nothing, Nothing, Float64, Nothing, Array{Measures.Length{:mm, Float64}, 1}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{Measures.Length{:mm, Float64}, 1}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Measures.Length{:mm, Float64}, String, Measures.Length{:mm, Float64}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, String, Measures.Length{:mm, Float64}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, String, Measures.Length{:mm, Float64}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, String, Measures.Length{:mm, Float64}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, String, Measures.Length{:mm, Float64}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, typeof(Gadfly.default_stroke_color), Measures.Length{:mm, Float64}, typeof(Gadfly.default_discrete_highlight_color), typeof(Gadfly.default_continuous_highlight_color), typeof(Gadfly.default_lowlight_color), typeof(Gadfly.default_middle_color), Measures.Length{:mm, Float64}, Symbol, Symbol, typeof(Gadfly.Shape.square), Nothing, Nothing, Symbol, Nothing, Measures.Length{:mm, Float64}, Int64, Float64, Float64, Float64, Measures.Length{:mm, Float64}, Int64, Gadfly.Scale.DiscreteColorScale, Gadfly.Scale.ContinuousColorScale, Type{Gadfly.Theme}})
precompile(Tuple{Type{Gadfly.Theme}})
precompile(Tuple{typeof(Gadfly.push_theme), Symbol})
precompile(Tuple{typeof(Gadfly.__init__)})
precompile(Tuple{Type{Base.Val{:default}}})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{getfield(Weave, Symbol("#4#10"))})
precompile(Tuple{getfield(Weave, Symbol("#5#11"))})
precompile(Tuple{typeof(Base.catch_backtrace)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(Weave, Symbol("#6#12"))})
precompile(Tuple{getfield(Base, Symbol("#@__DIR__")), LineNumberNode, Module})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{getfield(Base, Symbol("#681#682")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#681#682")){String}, String})
precompile(Tuple{typeof(Base.project_deps_get), String, String})
precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._include_dependency), Module, String})
precompile(Tuple{typeof(Base.include_relative), Module, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}, Char, Char})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.print_to_string), Array{String, 1}})
precompile(Tuple{typeof(Base.arg_gen), Array{String, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.ImmutableDict{Symbol, Any}, Base.ImmutableDict{Symbol, Any}})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any})
precompile(Tuple{typeof(Base.convert), Type{Any}, Type{T} where T})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Base.PkgId}, Any, Any})
precompile(Tuple{typeof(Cairo.check_deps)})
precompile(Tuple{typeof(Cairo.__init__)})
precompile(Tuple{getfield(Compose, Symbol("#114#120"))})
precompile(Tuple{getfield(Compose, Symbol("#115#121"))})
precompile(Tuple{getfield(Compose, Symbol("#116#122"))})
precompile(Tuple{typeof(Compose.link_cairo)})
precompile(Tuple{typeof(Base.vect), Tuple{Symbol, String}, Vararg{Tuple{Symbol, String}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Symbol, String}, 1}})
precompile(Tuple{typeof(Compose.docfunc), Symbol, String})
precompile(Tuple{getfield(DocStringExtensions, Symbol("#20#21")){typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Symbol})
precompile(Tuple{typeof(Base.Docs.docerror), Any})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.Docs._docstr), Core.SimpleVector, Any})
precompile(Tuple{typeof(Base.:(==)), Module, WeakRef})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Symbol, String}, 1}, Int64})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Symbol, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, String, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Char, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_block), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_call), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Symbol, Array{Any, 1}, Int64})
precompile(Tuple{getfield(Printf, Symbol("#@sprintf")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Expr, Expr}}})
precompile(Tuple{typeof(Base.getindex), Tuple{String, Expr, Expr}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Printf.gen), String})
precompile(Tuple{typeof(Base.Printf._printf), String, Expr, String, Tuple{Expr, Expr}})
precompile(Tuple{typeof(Base.Printf._printf), String, Expr, String, Tuple{Symbol, Expr}})
precompile(Tuple{typeof(Compose.set_default_graphic_format), Symbol})
precompile(Tuple{typeof(Gadfly.set_default_plot_format), Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{Type{NamedTuple{(:stop, :step), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{getfield(Base, Symbol("#kw##range")), NamedTuple{(:stop, :step), Tuple{Float64, Float64}}, typeof(Base.range), Int64})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{Float64, 1}}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{Float64, 1}}}, Base.Iterators.Pairs{Symbol, AbstractArray{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Pairs{Symbol, AbstractArray{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Gadfly.cleanmapping), Base.Dict{Symbol, AbstractArray{Float64, 1}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractString}}})
precompile(Tuple{typeof(Gadfly.current_theme)})
precompile(Tuple{Type{Gadfly.Plot}})
precompile(Tuple{typeof(Gadfly.add_plot_element!), Gadfly.Plot, Gadfly.Geom.LineGeometry})
precompile(Tuple{typeof(Gadfly._evalmapping!), Base.Dict{Symbol, Any}, Nothing, Gadfly.Data})
precompile(Tuple{typeof(Gadfly.evalmapping!), Base.Dict{Symbol, Any}, Nothing, Gadfly.Data})
precompile(Tuple{getfield(Gadfly, Symbol("##plot#74")), Base.Iterators.Pairs{Symbol, AbstractArray{Float64, 1}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, typeof(Gadfly.plot), Type{Gadfly.Geom.LineGeometry}})
precompile(Tuple{getfield(Gadfly, Symbol("#kw##plot")), NamedTuple{(:x, :y), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}, typeof(Gadfly.plot), Type{Gadfly.Geom.LineGeometry}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, AbstractArray{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, AbstractArray{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{Float64, 1}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{Float64, 1}}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{Float64, 1}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Gadfly.evalmapping), Nothing, Array{Float64, 1}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, AbstractString}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, AbstractString}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractString}, String, Symbol})
precompile(Tuple{typeof(Gadfly.evalmapping), Nothing, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(!=)), Gadfly.Plot, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Gadfly.Plot})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/svg+xml")}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Compiler.zero), Type{UInt8}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Gadfly.StatisticElement}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Gadfly.Data, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Gadfly.Data}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Gadfly.Aesthetics, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Missing}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Gadfly.Aesthetics}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{1}}})
precompile(Tuple{typeof(Base.prod), StaticArrays.Size{(1,)}})
precompile(Tuple{typeof(StaticArrays._axes), StaticArrays.Size{(1,)}})
precompile(Tuple{typeof(Base.iterate), StaticArrays.SOneTo{1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Compose.Form{P} where P<:Compose.FormPrimitive, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, String}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Gadfly.Coord.Cartesian}, Array{Symbol, 1}, Array{Symbol, 1}, Nothing, Nothing, Nothing, Nothing, Bool, Bool, Bool, Nothing, Bool})
precompile(Tuple{Type{Gadfly.Coord.Cartesian}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Gadfly, Symbol("#85#97")){Base.Set{Symbol}}, typeof(Base.:(|)), Array{Symbol, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Gadfly, Symbol("#85#97")){Base.Set{Symbol}}, typeof(Base.:(|)), Base.IndexLinear, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Gadfly.ScaleElement}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base.copyto!), Array{Gadfly.StatisticElement, 1}, Int64, Array{Gadfly.StatisticElement, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Gadfly.StatisticElement, 1}, Base.Generator{Array{Gadfly.StatisticElement, 1}, getfield(Gadfly, Symbol("#88#101")){Gadfly.Layer, Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Gadfly.Layer, 1}, Array{Array{Gadfly.StatisticElement, 1}, 1}}}, getfield(Base, Symbol("#3#4")){getfield(Gadfly, Symbol("#87#100")){Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Gadfly.StatisticElement, 1}, getfield(Gadfly, Symbol("#89#102")){Gadfly.Plot}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Gadfly.Layer, 1}, getfield(Gadfly, Symbol("#90#103")){Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Nothing})
precompile(Tuple{Type{Base.Dict{Gadfly.StatisticElement, Nothing}}})
precompile(Tuple{typeof(Gadfly.default_statistic), Gadfly.Guide.XTicks})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Gadfly.StatisticElement, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Gadfly.StatisticElement, Nothing}, Gadfly.Stat.Identity})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Gadfly.StatisticElement, Nothing}, Nothing, Gadfly.Stat.Identity})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, AbstractString}, Symbol})
precompile(Tuple{getfield(Gadfly, Symbol("#92#105")){Gadfly.Plot, Array{Gadfly.Data, 1}}, Array{Symbol, 1}, String})
precompile(Tuple{Type{Base.Dict{Gadfly.ScaleElement, Int64}}})
precompile(Tuple{typeof(Base.vcat), Array{Gadfly.Data, 1}, Array{Gadfly.Data, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Gadfly.ScaleElement}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Gadfly.ScaleElement}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Gadfly.ScaleElement}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Gadfly.ScaleElement}, Gadfly.Scale.DiscreteColorScale, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Gadfly.StatisticElement, 1}, Base.Set{Gadfly.StatisticElement}})
precompile(Tuple{typeof(Base.setindex!), Array{Bool, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Base.Missing, Base.Generator{Array{Gadfly.Aesthetics, 1}, getfield(Gadfly, Symbol("#93#106")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.Missing}, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Missing, 1}, Bool, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Bool, Base.Generator{Array{Gadfly.Aesthetics, 1}, getfield(Gadfly, Symbol("#93#106")){Symbol}}, Int64})
precompile(Tuple{getfield(Gadfly, Symbol("#93#106")){Symbol}, Gadfly.Aesthetics})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Gadfly.Aesthetics, 1}, getfield(Gadfly, Symbol("#93#106")){Symbol}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Gadfly.StatisticElement, Nothing}, Gadfly.Stat.TickStatistic})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Gadfly.StatisticElement, Nothing}, Nothing, Gadfly.Stat.TickStatistic})
precompile(Tuple{typeof(Gadfly.default_statistic), Gadfly.Guide.YTicks})
precompile(Tuple{typeof(Gadfly.scale_exists), Symbol, Symbol})
precompile(Tuple{typeof(Gadfly.get_scale), Symbol, Symbol, Gadfly.Theme})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Gadfly, Symbol("#86#98")){Base.Set{Symbol}}, typeof(Base.:(|)), Array{Symbol, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Gadfly, Symbol("#86#98")){Base.Set{Symbol}}, typeof(Base.:(|)), Base.IndexLinear, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Gadfly.Layer, 1}, getfield(Gadfly, Symbol("#82#94"))}, Int64})
precompile(Tuple{typeof(Gadfly.render_prepare), Gadfly.Plot})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Plot})
precompile(Tuple{Type{Compose.Context}, Compose.Context})
precompile(Tuple{typeof(Compose.excise_vector_children!), Compose.Context})
precompile(Tuple{Type{Base.Dict{UInt64, Array{Compose.Form{P} where P<:Compose.FormPrimitive, 1}}}})
precompile(Tuple{Type{Base.Dict{UInt64, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{UInt64, Array{Compose.Form{P} where P<:Compose.FormPrimitive, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{UInt64, Array{Compose.Form{P} where P<:Compose.FormPrimitive, 1}}, UInt64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{UInt64, Array{Compose.Form{P} where P<:Compose.FormPrimitive, 1}}, Array{Compose.Form{P} where P<:Compose.FormPrimitive, 1}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{UInt64, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{UInt64, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}}, UInt64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{UInt64, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}}, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt64, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}}, UInt64})
precompile(Tuple{typeof(Compose.optimize_batching), Compose.Context})
precompile(Tuple{typeof(Base.Math.cos_domain_error), Float64})
precompile(Tuple{typeof(Base.cos), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(*)), Array{Float64, 1}, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(-)), LinearAlgebra.UniformScaling{Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, LinearAlgebra.UniformScaling{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Compose.Transform}, Compose.Mirror})
precompile(Tuple{typeof(LinearAlgebra.matmul2x2!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.matmul3x3!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.gemm!), Char, Char, Float64, Array{Float64, 2}, Array{Float64, 2}, Float64, Array{Float64, 2}})
precompile(Tuple{typeof(LinearAlgebra.copy_transpose!), Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}, Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}})
precompile(Tuple{typeof(LinearAlgebra._generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(LinearAlgebra.gemm_wrapper!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}, LinearAlgebra.MulAddMul{true, true, Float64, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, LinearAlgebra.UniformScaling{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Compose.Transform}, Compose.Shear})
precompile(Tuple{typeof(Measures.width), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Measures.height), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Compose.root_box), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{Type{Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Compose.isscalar), Tuple{Base.Broadcast.Extruded{Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{Type{Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Base.Generator{Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, getfield(Compose, Symbol("#137#139"))}})
precompile(Tuple{Type{Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Base.Generator{Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, getfield(Compose, Symbol("#138#140"))}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Type{T} where T})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Type, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Int64})
precompile(Tuple{Type{Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}}})
precompile(Tuple{Type{Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}}, Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}})
precompile(Tuple{typeof(Compose.save_property_state), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Compose.push_property_frame), Compose.Image{Compose.PNGBackend}, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}})
precompile(Tuple{typeof(Compose.canbatch), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Int64, Compose.Container}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Int64, Compose.Container}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64, Compose.Container}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PNGBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Compose.restore_property_state), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Compose.pop_property_frame), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PNGBackend}, Compose.Context, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.finish), Type{Compose.PNGBackend}, Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Compose.finish), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PNGBackend}, Compose.Context})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(isa), Tuple{Base.Broadcast.Extruded{Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Type{Compose.Property{Compose.FillOpacityPrimitive}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(isa), Tuple{Base.Broadcast.Extruded{Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Type{Compose.Property{Compose.FillPrimitive}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Compose.svgalphatest), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}})
precompile(Tuple{Type{Base.Dict{Type, Nothing}}})
precompile(Tuple{typeof(Compose.genid), Compose.SVG})
precompile(Tuple{typeof(Compose.indent), Compose.SVG})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, getfield(Compose, Symbol("#99#100"))}, Int64})
precompile(Tuple{typeof(Compose.push_property_frame), Compose.SVG, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}})
precompile(Tuple{typeof(Compose.pop_property_frame), Compose.SVG})
precompile(Tuple{typeof(Base.fill!), Array{Int32, 1}, Int64})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), String}, Int64})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), String}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), String}, Int64})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#280#281")){String}, String})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.Set{Tuple{AbstractString, AbstractString}}, getfield(Compose, Symbol("#87#90"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Set{Tuple{AbstractString, AbstractString}}, getfield(Compose, Symbol("#87#90"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Set{Tuple{AbstractString, AbstractString}}, getfield(Compose, Symbol("#88#91"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.Set{Tuple{AbstractString, AbstractString}}, getfield(Compose, Symbol("#89#92"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Set{Tuple{AbstractString, AbstractString}}, getfield(Compose, Symbol("#89#92"))}})
precompile(Tuple{typeof(Compose.finish), Compose.SVG})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Gadfly.Plot})
precompile(Tuple{typeof(Compose.drawpart), Compose.SVG, Compose.Context, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.width), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Measures.height), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Compose.root_box), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Compose.save_property_state), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Compose.push_property_frame), Compose.Image{Compose.PDFBackend}, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}})
precompile(Tuple{typeof(Compose.canbatch), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PDFBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Compose.restore_property_state), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Compose.pop_property_frame), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PDFBackend}, Compose.Context, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.finish), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PDFBackend}, Compose.Context})
precompile(Tuple{typeof(Measures.width), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Measures.height), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Compose.root_box), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Compose.save_property_state), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Compose.push_property_frame), Compose.Image{Compose.PSBackend}, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}})
precompile(Tuple{typeof(Compose.canbatch), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PSBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Compose.restore_property_state), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Compose.pop_property_frame), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PSBackend}, Compose.Context, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.finish), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PSBackend}, Compose.Context})
precompile(Tuple{typeof(Compose.svg_fmt_float), Float64})
precompile(Tuple{typeof(Compose.print_pgf_path), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Bool})
precompile(Tuple{typeof(Compose.push_property_frame), Compose.PGF, Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}})
precompile(Tuple{typeof(Compose.pop_property_frame), Compose.PGF})
precompile(Tuple{typeof(Compose.writeheader), Compose.PGF})
precompile(Tuple{typeof(Compose.writecolors), Compose.PGF})
precompile(Tuple{typeof(Compose.finish), Compose.PGF})
precompile(Tuple{typeof(Compose.draw), Compose.PGF, Gadfly.Plot})
precompile(Tuple{typeof(Compose.drawpart), Compose.PGF, Compose.Context, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Gadfly.Plot})
precompile(Tuple{Type{NamedTuple{(:ext,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(Weave, Symbol("##get_figname#43")), Nothing, String, typeof(Weave.get_figname), Weave.Report, Weave.CodeChunk})
precompile(Tuple{getfield(Weave, Symbol("#kw##get_figname")), NamedTuple{(:ext,), Tuple{String}}, typeof(Weave.get_figname), Weave.Report, Weave.CodeChunk})
precompile(Tuple{Type{NamedTuple{(:dpi,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Compose, Symbol("#kw##PNG")), NamedTuple{(:dpi,), Tuple{Int64}}, typeof(Compose.PNG), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Compose, Symbol("##PNG#134")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:dpi,), Tuple{Int64}}}, typeof(Compose.PNG), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:width, :height, :owns_surface, :emit_on_finish, :ppmm), Tuple{Float64, Float64, Bool, Bool, Float64}}}, Type{NamedTuple{(:ownedfile, :filename), Tuple{Bool, String}}}})
precompile(Tuple{typeof(Compose.newsurface), Type{Compose.PNGBackend}, Base.IOStream, Float64, Float64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:width, :height, :owns_surface, :emit_on_finish, :ppmm, :ownedfile, :filename), Tuple{Float64, Float64, Bool, Bool, Float64, Bool, String}}, Type{Compose.Image{Compose.PNGBackend}}, Cairo.CairoSurfaceBase{UInt32}, Cairo.CairoContext, Base.IOStream})
precompile(Tuple{getfield(Compose, Symbol("##_#131")), Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:ownedfile, :filename), Tuple{Bool, String}}}, Type{Compose.Image{Compose.PNGBackend}}, Base.IOStream, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:dpi,), Tuple{Int64}}, Type{Compose.Image{Compose.PNGBackend}}, String, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{getfield(Compose, Symbol("##_#130")), Float64, Float64, ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}, Array{Any, 1}, Compose.LineCapButt, Compose.LineJoinMiter, Bool, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, String, Nothing, Bool, Array{Compose.ImagePropertyState, 1}, Array{Compose.ImagePropertyFrame, 1}, Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Bool, Bool, String, Bool, Bool, Float64, Nothing, Nothing, Type{Compose.Image{Compose.PNGBackend}}, Cairo.CairoSurfaceBase{UInt32}, Cairo.CairoContext, Base.IOStream})
precompile(Tuple{typeof(Base.setproperty!), Gadfly.Layer, Symbol, Nothing})
precompile(Tuple{typeof(Gadfly.element_coordinate_type), Gadfly.Geom.LineGeometry})
precompile(Tuple{typeof(Gadfly.default_statistic), Gadfly.Geom.LineGeometry})
precompile(Tuple{typeof(Base.vect), Gadfly.Stat.Identity})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Gadfly.StatisticElement, 1}, Base.IndexLinear, Array{Gadfly.Stat.Identity, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Gadfly.StatisticElement, 1}, 1}, Array{Gadfly.Stat.Identity, 1}, Int64})
precompile(Tuple{typeof(Gadfly.element_aesthetics), Gadfly.Geom.LineGeometry})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Symbol, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Gadfly, Symbol("#83#95")){Array{Symbol, 1}}, typeof(Base.:(|)), Array{Symbol, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Gadfly, Symbol("#83#95")){Array{Symbol, 1}}, typeof(Base.:(|)), Base.IndexLinear, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Gadfly, Symbol("#84#96")){Array{Symbol, 1}}, typeof(Base.:(|)), Array{Symbol, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Gadfly, Symbol("#84#96")){Array{Symbol, 1}}, typeof(Base.:(|)), Base.IndexLinear, Array{Symbol, 1}})
precompile(Tuple{typeof(Gadfly.input_aesthetics), Gadfly.Stat.Identity})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Array{Any, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff), Base.Set{Symbol}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base._similar_for), Array{Gadfly.StatisticElement, 1}, Type{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}}, Base.Generator{Array{Gadfly.StatisticElement, 1}, getfield(Gadfly, Symbol("#88#101")){Gadfly.Layer, Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}, Base.Generator{Array{Gadfly.StatisticElement, 1}, getfield(Gadfly, Symbol("#88#101")){Gadfly.Layer, Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}, Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, Base.Generator{Array{Gadfly.StatisticElement, 1}, getfield(Gadfly, Symbol("#88#101")){Gadfly.Layer, Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}}, Base.Iterators.Zip{Tuple{Array{Gadfly.Layer, 1}, Array{Array{Gadfly.StatisticElement, 1}, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Gadfly.Layer, 1}, Array{Array{Gadfly.StatisticElement, 1}, 1}}}, getfield(Base, Symbol("#3#4")){getfield(Gadfly, Symbol("#87#100")){Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}, 1}, Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Gadfly.Layer, 1}, Array{Array{Gadfly.StatisticElement, 1}, 1}}}, getfield(Base, Symbol("#3#4")){getfield(Gadfly, Symbol("#87#100")){Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}}, Array{Gadfly.Layer, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Base.Generator{Array{Gadfly.Layer, 1}, getfield(Gadfly, Symbol("#90#103")){Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, Base.Generator{Array{Gadfly.Layer, 1}, getfield(Gadfly, Symbol("#90#103")){Gadfly.Plot, getfield(Gadfly, Symbol("#_theme#99"))}}, Int64})
precompile(Tuple{typeof(Base.Iterators.flatten), Tuple{Array{Tuple{Gadfly.StatisticElement, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Tuple{Array{Tuple{Gadfly.StatisticElement, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}}}, Tuple{}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Int64})
precompile(Tuple{typeof(Gadfly.default_scales), Gadfly.Geom.LineGeometry, Gadfly.Theme})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Tuple{Array{Tuple{Gadfly.StatisticElement, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}}}, Tuple{Int64, Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}, Int64})
precompile(Tuple{typeof(Gadfly.default_scales), Gadfly.Stat.Identity, Gadfly.Theme})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Tuple{Array{Tuple{Gadfly.StatisticElement, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Geom.LineGeometry, Gadfly.Theme}, 1}, Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}}}, Tuple{Int64, Array{Tuple{Gadfly.Stat.Identity, Gadfly.Theme}, 1}, Int64}})
precompile(Tuple{typeof(Gadfly.classify_data), Array{Float64, 1}})
precompile(Tuple{Type{Base.Val{:numerical}}})
precompile(Tuple{Type{Base.Val{:y}}})
precompile(Tuple{typeof(Gadfly.get_scale), Base.Val{:numerical}, Base.Val{:y}, Gadfly.Theme})
precompile(Tuple{typeof(Gadfly.element_aesthetics), Gadfly.Scale.ContinuousScale})
precompile(Tuple{Type{Base.Set{T} where T}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Gadfly.ScaleElement}, Gadfly.Scale.ContinuousScale, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Nothing})
precompile(Tuple{typeof(Gadfly.classify_data), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Val{:x}}})
precompile(Tuple{typeof(Gadfly.get_scale), Base.Val{:numerical}, Base.Val{:x}, Gadfly.Theme})
precompile(Tuple{typeof(Base.methods), Any, Any})
precompile(Tuple{Type{Base.Val{:categorical}}})
precompile(Tuple{Type{Base.Val{:color}}})
precompile(Tuple{typeof(Gadfly.element_aesthetics), Gadfly.Scale.DiscreteColorScale})
precompile(Tuple{Type{Base.Val{:group}}})
precompile(Tuple{typeof(Gadfly.get_scale), Base.Val{:categorical}, Base.Val{:group}, Gadfly.Theme})
precompile(Tuple{typeof(Gadfly.element_aesthetics), Gadfly.Scale.DiscreteScale})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Gadfly.ScaleElement}, Gadfly.Scale.DiscreteScale, Symbol})
precompile(Tuple{Type{Base.Val{:linestyle}}})
precompile(Tuple{typeof(Gadfly.get_scale), Base.Val{:categorical}, Base.Val{:linestyle}, Gadfly.Theme})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, Type{T} where T})
precompile(Tuple{typeof(Gadfly.default_statistic), Gadfly.Guide.PanelBackground})
precompile(Tuple{typeof(Gadfly.default_statistic), Gadfly.Guide.QuestionMark})
precompile(Tuple{typeof(Gadfly.default_statistic), Gadfly.Guide.HelpScreen})
precompile(Tuple{typeof(Gadfly.default_statistic), Gadfly.Guide.CrossHair})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Gadfly.Stat, Symbol("#kw##xticks")), NamedTuple{(:ticks,), Tuple{Symbol}}, typeof(Gadfly.Stat.xticks)})
precompile(Tuple{getfield(Gadfly.Stat, Symbol("#kw##yticks")), NamedTuple{(:ticks,), Tuple{Symbol}}, typeof(Gadfly.Stat.yticks)})
precompile(Tuple{getfield(Gadfly, Symbol("#91#104")){Base.Set{Symbol}, Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), IterTools.Distinct{Base.ValueIterator{Base.Dict{Symbol, Gadfly.ScaleElement}}, Gadfly.ScaleElement}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), IterTools.Distinct{Base.ValueIterator{Base.Dict{Symbol, Gadfly.ScaleElement}}, Gadfly.ScaleElement}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Gadfly.Scale.apply_scales), IterTools.Distinct{Base.ValueIterator{Base.Dict{Symbol, Gadfly.ScaleElement}}, Gadfly.ScaleElement}, Array{Gadfly.Aesthetics, 1}, Gadfly.Data})
precompile(Tuple{typeof(Gadfly.Scale.apply_scales), IterTools.Distinct{Base.ValueIterator{Base.Dict{Symbol, Gadfly.ScaleElement}}, Gadfly.ScaleElement}, Gadfly.Data})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Gadfly.ScaleElement, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.DiscreteScale})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.DiscreteScale})
precompile(Tuple{typeof(Base.get!), Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.DiscreteScale, Int64})
precompile(Tuple{typeof(Gadfly.Scale.apply_scale), Gadfly.Scale.DiscreteScale, Array{Gadfly.Aesthetics, 1}, Gadfly.Data})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.ContinuousScale})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.ContinuousScale})
precompile(Tuple{typeof(Base.get!), Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.ContinuousScale, Int64})
precompile(Tuple{typeof(Gadfly.Scale.make_labeler), Gadfly.Scale.ContinuousScale})
precompile(Tuple{typeof(Gadfly.Scale.apply_scale), Gadfly.Scale.ContinuousScale, Array{Gadfly.Aesthetics, 1}, Gadfly.Data})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Gadfly.isconcrete), Float64})
precompile(Tuple{typeof(Base.any), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Colon})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(Gadfly.Scale.apply_scale_typed!), Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Gadfly.Scale.ContinuousScale})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Gadfly.Scale.apply_scale_typed!), Array{Float64, 1}, Array{Float64, 1}, Gadfly.Scale.ContinuousScale})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.DiscreteColorScale})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.DiscreteColorScale})
precompile(Tuple{typeof(Base.get!), Base.Dict{Gadfly.ScaleElement, Int64}, Gadfly.Scale.DiscreteColorScale, Int64})
precompile(Tuple{typeof(Gadfly.Scale.apply_scale), Gadfly.Scale.DiscreteColorScale, Array{Gadfly.Aesthetics, 1}, Gadfly.Data})
precompile(Tuple{typeof(OrderedCollections.rehash!), OrderedCollections.OrderedDict{Any, Nothing}, Int64})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedSet{Any}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.LCHab{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LMS{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.LMS{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LMS{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float32, 3}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{Float32}}})
precompile(Tuple{typeof(ColorTypes.pureintersect), Type{Any}, Type{Float32}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.XYZ{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Lab{Float32}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.LCHab{Float32}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.LMS{Float64}}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Colors.interpolate_table), Array{Float64, 2}, Float64, Float64, Int64})
precompile(Tuple{typeof(Colors.deuteranopic), ColorTypes.Lab{Float64}, Float64, ColorTypes.LMS{Float32}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.LCHab{Float32}, 1}, Int64, Array{ColorTypes.LCHab{Float32}, 1}, Int64, Int64})
precompile(Tuple{typeof(Colors.deuteranopic), ColorTypes.LCHab{Float32}, Float64, ColorTypes.LMS{Float32}})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#16")), Bool, getfield(Gadfly.Scale, Symbol("#51#52")), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.Color{T, N} where N where T, 1}, Base.IndexLinear, Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Gadfly.Scale.default_discrete_colors), Int64})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{Float32}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{ColorTypes.RGB{Float32}, 1}, Base.IndexLinear, Array{ColorTypes.Color{T, N} where N where T, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ColorTypes.RGB{Float32}, 1}}, Array{ColorTypes.Color{T, N} where N where T, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Any, 1}, Array{ColorTypes.RGB{Float32}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Scale, Symbol("#61#65")), Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{ColorTypes.RGB{Float32}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{ColorTypes.RGB{Float32}, 1}}}, getfield(Gadfly.Scale, Symbol("#61#65"))}})
precompile(Tuple{Type{Base.Dict{ColorTypes.RGB{Float32}, Any}}})
precompile(Tuple{Type{Base.Dict{ColorTypes.RGB{Float32}, Any}}, Array{Tuple{ColorTypes.RGB{Float32}, Any}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Tuple{ColorTypes.RGB{Float32}, Any}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Nothing, 1}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!=)), Tuple{Array{Nothing, 1}, Base.RefValue{Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Array{Gadfly.Data, 1}, Base.RefValue{Symbol}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Array{Gadfly.Data, 1}, Base.RefValue{Symbol}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Array{Nothing, 1}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Array{Gadfly.Data, 1}, Base.RefValue{Symbol}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Array{Nothing, 1}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Array{Gadfly.Data, 1}, Base.RefValue{Symbol}}}}}}})
precompile(Tuple{typeof(Base.:(==)), Nothing, WeakRef})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Array{Nothing, 1}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Array{Gadfly.Data, 1}, Base.RefValue{Symbol}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Base.Missing, Bool}, 1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}}}, Base.Missing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Base.BitArray{1}, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Nothing, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{Gadfly.Data, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Gadfly.Aesthetics, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Gadfly.Aesthetics, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Gadfly.Aesthetics, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Gadfly.Aesthetics, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Gadfly.Data, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Gadfly.Data, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Gadfly.Data, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Gadfly.Data, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Gadfly.Aesthetics, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Gadfly.Aesthetics, 1}, Array{Gadfly.Data, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Gadfly.Aesthetics, 1}, Array{Gadfly.Data, 1}}}})
precompile(Tuple{typeof(Gadfly.Stat.apply_statistics), Array{Gadfly.StatisticElement, 1}, Base.Dict{Symbol, Gadfly.ScaleElement}, Gadfly.Coord.Cartesian, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.Stat.apply_statistic), Gadfly.Stat.Identity, Base.Dict{Symbol, Gadfly.ScaleElement}, Gadfly.Coord.Cartesian, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.concat), Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.cat_aes_var!), Nothing, Array{Float64, 1}})
precompile(Tuple{typeof(Gadfly.cat_aes_var!), Nothing, Nothing})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Symbol, AbstractString}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, AbstractString}})
precompile(Tuple{typeof(Gadfly.cat_aes_var!), Nothing, Base.Dict{Symbol, AbstractString}})
precompile(Tuple{typeof(Gadfly.cat_aes_var!), Function, Function})
precompile(Tuple{typeof(Gadfly.cat_aes_var!), Base.Missing, Base.Missing})
precompile(Tuple{typeof(Gadfly.input_aesthetics), Gadfly.Stat.TickStatistic})
precompile(Tuple{typeof(Gadfly.concrete_length), Base.Iterators.Flatten{Array{Any, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.Millisecond, 1}, Tuple{Dates.Day, Dates.Hour, Dates.Minute, Dates.Second, Dates.Millisecond, Dates.Millisecond, Dates.Millisecond}})
precompile(Tuple{typeof(Base.:(+)), Dates.Date, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Year})
precompile(Tuple{typeof(Gadfly.bounding_order_of_magnitude), Int64})
precompile(Tuple{typeof(Gadfly.optimize_ticks_typed), Int64, Int64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool})
precompile(Tuple{Type{Dates.DateTime}, Float64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(Gadfly, Symbol("#26#27"))}, Int64})
precompile(Tuple{getfield(Gadfly, Symbol("##optimize_ticks#29")), Bool, Nothing, Nothing, Symbol, Nothing, Nothing, Nothing, Nothing, Bool, typeof(Gadfly.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Dates.DateTime, 0}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Dates.DateTime, 1}, Float64})
precompile(Tuple{getfield(Gadfly, Symbol("##multilevel_ticks#32")), Array{Symbol, 1}, typeof(Gadfly.multilevel_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Gadfly.multilevel_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, typeof(Base.length)}})
precompile(Tuple{typeof(Gadfly.multilevel_ticks), Dates.Date, Dates.Date})
precompile(Tuple{getfield(Gadfly, Symbol("##optimize_ticks#29")), Bool, Nothing, Nothing, Symbol, Float64, Float64, Float64, Float64, Bool, typeof(Gadfly.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Any, 1}, getfield(Gadfly.Stat, Symbol("#13#16"))}, Int64})
precompile(Tuple{typeof(Gadfly.Stat.apply_statistic), Gadfly.Stat.TickStatistic, Base.Dict{Symbol, Gadfly.ScaleElement}, Gadfly.Coord.Cartesian, Gadfly.Aesthetics})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Base.Missing, Base.Missing})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, Float64}, 1}, Tuple{Int64}, Tuple{Bool}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Missing})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Gadfly.isconcrete), Tuple{Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Gadfly.isconcrete), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Union{Base.Missing, Float64}, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Float64}, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.extrema), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Gadfly.concrete_length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.promote), Float64, Float64})
precompile(Tuple{typeof(Gadfly.bounding_order_of_magnitude), Float64})
precompile(Tuple{typeof(Gadfly.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool})
precompile(Tuple{getfield(Gadfly, Symbol("#kw##optimize_ticks")), NamedTuple{(:extend_ticks, :granularity_weight, :simplicity_weight, :coverage_weight, :niceness_weight, :strict_span), Tuple{Bool, Float64, Float64, Float64, Float64, Bool}}, typeof(Gadfly.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Float64, 1}, Float64})
precompile(Tuple{getfield(Gadfly, Symbol("##multilevel_ticks#30")), Array{Float64, 1}, typeof(Gadfly.multilevel_ticks), Float64, Float64})
precompile(Tuple{typeof(Gadfly.multilevel_ticks), Float64, Float64})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.ValueIterator{Base.Dict{Any, Any}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Bool, 1}, Bool, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Float64})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.vect), Gadfly.Aesthetics, Vararg{Gadfly.Aesthetics, N} where N})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Array{Gadfly.Aesthetics, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Bool}, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Gadfly.Aesthetics, 1}, getfield(Gadfly, Symbol("#93#106")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.all), Array{Bool, 1}})
precompile(Tuple{typeof(Gadfly.render_prepared), Gadfly.Plot, Gadfly.Coord.Cartesian, Gadfly.Aesthetics, Array{Gadfly.Aesthetics, 1}, Array{Array{Gadfly.StatisticElement, 1}, 1}, Array{Array{Gadfly.Aesthetics, 1}, 1}, Array{Array{Gadfly.Data, 1}, 1}, Base.Dict{Symbol, Gadfly.ScaleElement}, Array{Gadfly.GuideElement, 1}})
precompile(Tuple{typeof(Gadfly.Coord.aesthetics_type), Array{Gadfly.Aesthetics, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Gadfly.Coord.first_concrete_aesthetic_value), Array{Gadfly.Aesthetics, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Gadfly.Coord.apply_coordinate), Gadfly.Coord.Cartesian, Array{Gadfly.Aesthetics, 1}, Base.Dict{Symbol, Gadfly.ScaleElement}})
precompile(Tuple{typeof(Base.setindex!), Array{Gadfly.Theme, 1}, Nothing, Int64})
precompile(Tuple{typeof(Gadfly.get_stroke_vector), Symbol})
precompile(Tuple{typeof(Gadfly.jsplotdata), String, String, Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#33#42"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#34#43"))}})
precompile(Tuple{typeof(Base.getproperty), Gadfly.Guide.XTicks, Symbol})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.XTicks, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#52#61"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#53#62"))}})
precompile(Tuple{typeof(Base.getproperty), Gadfly.Guide.YTicks, Symbol})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.YTicks, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Array{Gadfly.Layer, 1}, Array{Gadfly.Aesthetics, 1}, Array{Array{Gadfly.Aesthetics, 1}, 1}, Array{Array{Gadfly.Data, 1}, 1}, Array{Gadfly.Theme, 1}}, getfield(Gadfly, Symbol("#19#20")){Int64}}})
precompile(Tuple{getfield(Gadfly, Symbol("##render_prepared#107")), Bool, Bool, typeof(Gadfly.render_prepared), Gadfly.Plot, Gadfly.Coord.Cartesian, Gadfly.Aesthetics, Array{Gadfly.Aesthetics, 1}, Array{Array{Gadfly.StatisticElement, 1}, 1}, Array{Array{Gadfly.Aesthetics, 1}, 1}, Array{Array{Gadfly.Data, 1}, 1}, Base.Dict{Symbol, Gadfly.ScaleElement}, Array{Gadfly.GuideElement, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Gadfly.Aesthetics, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Gadfly.Aesthetics, 1}, Tuple{Int64}, Tuple{Bool}, Gadfly.Aesthetics, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Gadfly.Aesthetics, 1, Array{Gadfly.Aesthetics, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Gadfly.Aesthetics, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Gadfly.Aesthetics, 1, Array{Gadfly.Aesthetics, 1}, Tuple{Base.UnitRange{Int64}}, true}, Gadfly.Aesthetics})
precompile(Tuple{typeof(Base.cat_indices), Array{Gadfly.Aesthetics, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Gadfly.Aesthetics, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Gadfly.Aesthetics, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Gadfly.Aesthetics, 1}, Array{Gadfly.Aesthetics, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Gadfly.concrete_minmax), Array{Float64, 1}, Float64, Float64})
precompile(Tuple{typeof(Base.vcat), Float64, Float64})
precompile(Tuple{typeof(Base.skipmissing), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.maximum), Base.SkipMissing{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.minimum), Base.SkipMissing{Array{Float64, 1}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:leftpad, :rightpad, :toppad, :bottompad), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Type{Compose.UnitBox{S, T, U, V} where V where U where T where S}, Float64, Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:units, :raster), T} where T<:Tuple}, Tuple{Compose.UnitBox{Float64, Float64, Float64, Float64}, Bool}})
precompile(Tuple{getfield(Compose, Symbol("#kw##context")), NamedTuple{(:units, :raster), Tuple{Compose.UnitBox{Float64, Float64, Float64, Float64}, Bool}}, typeof(Compose.context)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly, Symbol("#108#109")){Base.Dict{Symbol, Gadfly.ScaleElement}}, Base.Iterators.Zip{Tuple{Array{Gadfly.Layer, 1}, Array{Gadfly.Aesthetics, 1}, Array{Array{Gadfly.Aesthetics, 1}, 1}, Array{Array{Gadfly.Data, 1}, 1}, Array{Gadfly.Theme, 1}}}})
precompile(Tuple{typeof(Base.maximum), Nothing})
precompile(Tuple{getfield(Gadfly.Geom, Symbol("#143#157")), Gadfly.Layer})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Gadfly.StatisticElement, 1}, 1}, Array{Gadfly.StatisticElement, 1}, Base.Generator{Array{Gadfly.Layer, 1}, getfield(Gadfly.Geom, Symbol("#143#157"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Gadfly.Layer, 1}, getfield(Gadfly.Geom, Symbol("#143#157"))}})
precompile(Tuple{getfield(Gadfly, Symbol("##inherit!#52")), Array{Any, 1}, typeof(Gadfly.inherit!), Gadfly.Aesthetics, Gadfly.Aesthetics})
precompile(Tuple{Type{Gadfly.Aesthetics}, Gadfly.Aesthetics})
precompile(Tuple{typeof(Base.copyto!), Array{Gadfly.ScaleElement, 1}, Base.ValueIterator{Base.Dict{Symbol, Gadfly.ScaleElement}}})
precompile(Tuple{getfield(Gadfly, Symbol("#kw##render_prepared")), NamedTuple{(:table_only,), Tuple{Bool}}, typeof(Gadfly.render_prepared), Gadfly.Plot, Gadfly.Coord.Cartesian, Gadfly.Aesthetics, Array{Gadfly.Aesthetics, 1}, Array{Array{Gadfly.StatisticElement, 1}, 1}, Array{Array{Gadfly.Aesthetics, 1}, 1}, Array{Array{Gadfly.Data, 1}, 1}, Base.Dict{Symbol, Gadfly.ScaleElement}, Array{Gadfly.GuideElement, 1}})
precompile(Tuple{typeof(Compose.pad_outer), Compose.Context, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.Context, 1}, Compose.Context, Base.Generator{Array{Compose.Context, 1}, getfield(Compose, Symbol("#126#127")){Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Compose.Context, 1}, Base.Generator{Array{Compose.Context, 1}, getfield(Compose, Symbol("#126#127")){Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Geom.SubplotGrid, Gadfly.Theme, Gadfly.Aesthetics, Array{Gadfly.Aesthetics, 1}, Array{Gadfly.Data, 1}, Base.Dict{Symbol, Gadfly.ScaleElement}})
precompile(Tuple{getfield(Gadfly, Symbol("#108#109")){Base.Dict{Symbol, Gadfly.ScaleElement}}, Tuple{Gadfly.Layer, Gadfly.Aesthetics, Array{Gadfly.Aesthetics, 1}, Array{Gadfly.Data, 1}, Gadfly.Theme}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.Context, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Gadfly.Layer, 1}, Array{Gadfly.Aesthetics, 1}, Array{Array{Gadfly.Aesthetics, 1}, 1}, Array{Array{Gadfly.Data, 1}, 1}, Array{Gadfly.Theme, 1}}}, getfield(Gadfly, Symbol("#108#109")){Base.Dict{Symbol, Gadfly.ScaleElement}}}, Int64, Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Gadfly.Layer, 1}, Array{Gadfly.Aesthetics, 1}, Array{Array{Gadfly.Aesthetics, 1}, 1}, Array{Array{Gadfly.Data, 1}, 1}, Array{Gadfly.Theme, 1}}}, getfield(Gadfly, Symbol("#108#109")){Base.Dict{Symbol, Gadfly.ScaleElement}}}})
precompile(Tuple{typeof(Base.error), String, String, String, String, String})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Geom.LineGeometry, Gadfly.Theme, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Geom.LineGeometry, Gadfly.Theme, Gadfly.Aesthetics, Array{Gadfly.Aesthetics, 1}, Array{Gadfly.Data, 1}, Base.Dict{Symbol, Gadfly.ScaleElement}})
precompile(Tuple{typeof(Gadfly.undefined_aesthetics), Gadfly.Aesthetics, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{Base.Set{T} where T}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.filter), getfield(Gadfly, Symbol("#46#47")){Gadfly.Aesthetics}, Array{Symbol, 1}})
precompile(Tuple{typeof(Gadfly.assert_aesthetics_equal_length), String, Gadfly.Aesthetics, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.fill), Int64, Int64})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#243#244")){Int64}, Base.Dict{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexin), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt8, 1}, Base.IndexLinear, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Array{UInt8, 1}}})
precompile(Tuple{Type{IndirectArrays.IndirectArray{UInt8, N, A, V} where V<:AbstractArray{UInt8, 1} where A<:(AbstractArray{#s12, N} where #s12<:Integer) where N}, Array{Int64, 1}})
precompile(Tuple{Type{IndirectArrays.IndirectArray{T, N, A, V} where V<:AbstractArray{T, 1} where A<:(AbstractArray{#s12, N} where #s12<:Integer) where N where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.fill!), Array{ColorTypes.LCHab{Float32}, 1}, ColorTypes.LCHab{Float32}})
precompile(Tuple{typeof(Base.fill), ColorTypes.LCHab{Float32}, Int64})
precompile(Tuple{typeof(Base.setproperty!), Gadfly.Aesthetics, Symbol, Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{T, 1} where T, IndirectArrays.IndirectArray{T, N, A, V} where V<:AbstractArray{T, 1} where A<:(AbstractArray{#s12, N} where #s12<:Integer) where N where T}}, Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Gadfly.Aesthetics, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{T, 1} where T, IndirectArrays.IndirectArray{T, N, A, V} where V<:AbstractArray{T, 1} where A<:(AbstractArray{#s12, N} where #s12<:Integer) where N where T}}, Array{Int64, 1}})
precompile(Tuple{getfield(Gadfly, Symbol("##Aesthetics#45")), Array{Float64, 1}, Array{Float64, 1}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Base.Dict{Symbol, AbstractString}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(Gadfly.Scale.identity_formatter), typeof(Gadfly.Scale.identity_formatter), typeof(Showoff.showoff), typeof(Showoff.showoff), typeof(Showoff.showoff), typeof(Showoff.showoff), typeof(Showoff.showoff), typeof(Showoff.showoff), typeof(Showoff.showoff), Base.Missing, Base.Missing, Type{Gadfly.Aesthetics}, Gadfly.Aesthetics})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Function})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Symbol, AbstractString}, Function})
precompile(Tuple{typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{ColorTypes.LCHab{Float32}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{ColorTypes.LCHab{Float32}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.LCHab{Float32}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.LCHab{Float32}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{UInt8}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt8, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, IndirectArrays.IndirectArray{Int64, 1, Array{UInt8, 1}, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), IndirectArrays.IndirectArray{Int64, 1, Array{UInt8, 1}, Array{Int64, 1}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), IndirectArrays.IndirectArray{Int64, 1, Array{UInt8, 1}, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{Int64, 1}, Array{ColorTypes.LCHab{Float32}, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Array{ColorTypes.LCHab{Float32}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.promote_type), Type{Array{Int64, 1}}, Type{Array{T, 1} where T}})
precompile(Tuple{Type{Array{Array{T, 1} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Tuple{Array{Int64, 1}, Array{ColorTypes.LCHab{Float32}, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Geom, Symbol("#131#132")), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Array{T, 1} where T, 1}, getfield(Gadfly.Geom, Symbol("#131#132"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{T, 1} where T, 1}, getfield(Gadfly.Geom, Symbol("#131#132"))}})
precompile(Tuple{Type{Base.Dict{ColorTypes.LCHab{Float32}, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{ColorTypes.LCHab{Float32}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{ColorTypes.LCHab{Float32}, Nothing}, ColorTypes.LCHab{Float32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ColorTypes.LCHab{Float32}, Nothing}, Nothing, ColorTypes.LCHab{Float32}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{ColorTypes.LCHab{Float32}, Nothing}, ColorTypes.LCHab{Float32}})
precompile(Tuple{typeof(Base.unique), Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.argmax), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Gadfly.isconcrete), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.isconcrete), Tuple{Array{Float64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.BitArray{1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{ColorTypes.LCHab{Float32}, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.LCHab{Float32}, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.LCHab{Float32}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.eltype), Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{ColorTypes.LCHab{Float32}, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{ColorTypes.LCHab{Float32}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Type{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}}, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{ColorTypes.LCHab{Float32}, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Dict{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, Nothing}}})
precompile(Tuple{typeof(Base.hash), Tuple{Int64, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{ColorTypes.LCHab{Float32}, Int64, Int64}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, Nothing}, Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, Nothing}, Nothing, Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, Nothing}, Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}})
precompile(Tuple{typeof(Base.unique), Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.unique), Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}})
precompile(Tuple{Type{Array{Array{Tuple{Float64, Float64}, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{Array{ColorTypes.LCHab{Float32}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}, Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}, Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}, Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Float64, Float64}, 1}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Type{Tuple{Float64, Float64}}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Tuple{Float64, Float64}, 1}, 1}, Array{Tuple{Float64, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.first), Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.LCHab{Float32}, 1}, ColorTypes.LCHab{Float32}, Int64})
precompile(Tuple{typeof(Base.first), Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Tuple{Int64, ColorTypes.LCHab{Float32}, Int64, Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Gadfly.get_stroke_vector), Tuple{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Gadfly.get_stroke_vector), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.get_stroke_vector), Tuple{Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Gadfly.get_stroke_vector), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Any, 1}, 1}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Array{Any, 1}, 1}, Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Gadfly.get_stroke_vector), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Array{Any, 1}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Gadfly.get_stroke_vector), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu._show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float32, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(ColorTypes._show), Base.GenericIOBuffer{Array{UInt8, 1}}, ColorTypes.LCHab{Float32}})
precompile(Tuple{typeof(Showoff.showoff), Array{ColorTypes.LCHab{Float32}, 1}, Symbol})
precompile(Tuple{typeof(Showoff.showoff), Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Gadfly.svg_color_class_from_label), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Gadfly.svg_color_class_from_label), String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Gadfly.svg_color_class_from_label), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Gadfly.svg_color_class_from_label), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Array{Tuple{Float64, Float64}, 1}, 1}, getfield(Compose, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Compose.line), Array{Array{Tuple{Float64, Float64}, 1}, 1}, Symbol})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float32}}, ColorTypes.Lab{Float32}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.RGB{Float64}}, ColorTypes.XYZ{Float32}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.StrokePrimitive, 1}, Base.Generator{Array{ColorTypes.LCHab{Float32}, 1}, getfield(Compose, Symbol("#42#43"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{ColorTypes.LCHab{Float32}, 1}, getfield(Compose, Symbol("#42#43"))}})
precompile(Tuple{typeof(Compose.stroke), Array{ColorTypes.LCHab{Float32}, 1}})
precompile(Tuple{typeof(Base.Math.sincos_domain_error), Float32})
precompile(Tuple{typeof(Base.Math.sincos), Float32})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Measures.Measure, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.StrokeDashPrimitive, 1}, Base.Generator{Array{Array{Any, 1}, 1}, getfield(Compose, Symbol("#46#47"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Any, 1}, 1}, getfield(Compose, Symbol("#46#47"))}})
precompile(Tuple{typeof(Compose.strokedash), Array{Array{Any, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.SVGClassPrimitive, 1}, Compose.SVGClassPrimitive, Base.Generator{Array{String, 1}, Type{Compose.SVGClassPrimitive}}, Int64})
precompile(Tuple{typeof(Compose.svgclass), Array{String, 1}})
precompile(Tuple{typeof(Compose.compose), Compose.Context, Compose.Context})
precompile(Tuple{Type{Compose.Context}, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Nothing, Nothing, Nothing, Nothing, Compose.ListNull{Compose.Container}, Compose.ListNull{Compose.Form{P} where P<:Compose.FormPrimitive}, Compose.ListNull{Compose.Property{P} where P<:Compose.PropertyPrimitive}, Int64, Bool, Bool, Bool, Bool, Nothing, Nothing, Float64, Symbol})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Compose.Context})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.PanelBackground, Gadfly.Theme, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.PanelBackground, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(Base.:(!=)), Array{Gadfly.Guide.PositionedGuide, 1}, Nothing})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Gadfly.Guide.PositionedGuide, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{Gadfly.Guide.PositionedGuide, 1}})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.QuestionMark, Gadfly.Theme, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.QuestionMark, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(Base.fill), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Compose.Property{Compose.FillPrimitive}, Compose.Property{Compose.SVGClassPrimitive}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Compose.Property{Compose.FillPrimitive}, Compose.Property{Compose.SVGClassPrimitive}, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.HelpScreen, Gadfly.Theme, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.HelpScreen, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.LCHab{T} where T<:AbstractFloat}, ColorTypes.LCHab{Float64}})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#16")), Bool, typeof(Base.identity), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#17")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Colors.distinguishable_colors), Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Colors.distinguishable_colors), Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Colors.invert_srgb_compand), FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, ColorTypes.Lab{Float64}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, AbstractString}, String})
precompile(Tuple{typeof(Base.rstrip), Base.Fix2{typeof(Base.in), Array{Char, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.lstrip), Base.Fix2{typeof(Base.in), Array{Char, 1}}, Base.SubString{String}})
precompile(Tuple{getfield(Compose, Symbol("#112#113")), Base.SubString{String}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Compose, Symbol("#112#113"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.SubString{String}, 1}, getfield(Compose, Symbol("#112#113"))}})
precompile(Tuple{typeof(Base.fill!), Array{UInt64, 2}, UInt64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Compose.levenshtein), String, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, AbstractString}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, AbstractString}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, AbstractString}, String, String})
precompile(Tuple{typeof(Compose.match_font), String})
precompile(Tuple{typeof(Compose.max_text_extents), String, Measures.Length{:mm, Float64}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Compose.text_width), Base.Dict{String, Any}, Base.SubString{String}, Float64})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Guide, Symbol("#1#2")){Measures.Length{:mm, Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(Gadfly.Guide, Symbol("#1#2")){Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Gadfly.Guide, Symbol("#1#2")){Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Gadfly.Guide, Symbol("#1#2")){Measures.Length{:mm, Float64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Gadfly.Guide, Symbol("#1#2")){Measures.Length{:mm, Float64}}}, Int64})
precompile(Tuple{getfield(Compose, Symbol("##text#27")), Symbol, typeof(Compose.text), Array{Measures.Length{:w, Float64}, 1}, Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{String, 1}, Array{Compose.HCenter, 1}, Array{Compose.VCenter, 1}, Array{Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, 1}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.text), Array{Measures.Length{:w, Float64}, 1}, Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{String, 1}, Array{Compose.HCenter, 1}, Array{Compose.VCenter, 1}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Float64})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.rectangle), Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Tuple{Compose.Context, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Compose.Property{Compose.FontPrimitive}, Compose.Property{Compose.FontSizePrimitive}, Compose.Property{Compose.FillPrimitive}}, Tuple{Compose.Context, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.Property{Compose.FillPrimitive}}, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.CrossHair, Gadfly.Theme, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.CrossHair, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Compose.Property{Compose.FillPrimitive}, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Gadfly.issomething), Array{Float64, 1}})
precompile(Tuple{typeof(IterTools.groupby), getfield(Gadfly.Guide, Symbol("#30#39")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.tuple_type_cons), Type{Float64}, Type{Tuple{Float64}}})
precompile(Tuple{typeof(Base.iterate), IterTools.GroupBy{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Gadfly.Guide, Symbol("#30#39"))}, Nothing})
precompile(Tuple{typeof(Base.iterate), IterTools.GroupBy{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Gadfly.Guide, Symbol("#30#39"))}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{Tuple{Float64, Float64}, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Float64, Float64}, 1}, Int64})
precompile(Tuple{typeof(Gadfly.Scale.identity_formatter), Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractString, 1}, Int64, Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{AbstractString, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), IterTools.GroupBy{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Gadfly.Guide, Symbol("#30#39"))}, Tuple{Bool, Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.sum), Array{Bool, 1}})
precompile(Tuple{typeof(Gadfly.get_stroke_vector), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Bool, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Guide, Symbol("#31#40")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Tuple{Float64, Measures.Length{:h, Float64}}, 1}, 1}, Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#31#40"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#31#40"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Array{Tuple{Float64, Measures.Length{:h, Float64}}, 1}, 1}, getfield(Compose, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Compose.line), Array{Array{Tuple{Float64, Measures.Length{:h, Float64}}, 1}, 1}, Symbol})
precompile(Tuple{typeof(Compose.line), Array{Array{Tuple{Float64, Measures.Length{:h, Float64}}, 1}, 1}})
precompile(Tuple{typeof(Compose.stroke), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Measures.Measure, 1}, Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Compose.strokedash), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Guide, Symbol("#32#41")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Tuple{Float64, Measures.Length{:h, Float64}}, 1}, 1}, Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#32#41"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#32#41"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.VisiblePrimitive, 1}, Compose.VisiblePrimitive, Base.Generator{Array{Bool, 1}, Type{Compose.VisiblePrimitive}}, Int64})
precompile(Tuple{typeof(Compose.visible), Array{Bool, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.print_to_string), Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.SVGAttributePrimitive, 1}, Compose.SVGAttributePrimitive, Base.Generator{Array{Float64, 1}, getfield(Compose, Symbol("#50#51")){String}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Compose, Symbol("#50#51")){String}}})
precompile(Tuple{typeof(Compose.svgattribute), String, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{UInt8, 1}, Base.Generator{Base.StepRange{UInt8, UInt8}, getfield(Colors, Symbol("#1#2")){UInt32, UInt8}}, Int64, UInt8})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRange{UInt8, UInt8}, getfield(Colors, Symbol("#1#2")){UInt32, UInt8}}})
precompile(Tuple{typeof(Colors.hex), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Compose.text_extents), String, Measures.Length{:mm, Float64}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Measures.Length{:mm, Float64}}, Array{Tuple{Measures.Measure, Measures.Measure}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#33#42"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#33#42"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#34#43"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#34#43"))}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Measures.Length{:mm, Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.add_sum), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:minwidth, :minheight), T} where T<:Tuple}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{getfield(Compose, Symbol("#kw##context")), NamedTuple{(:minwidth, :minheight), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, typeof(Compose.context)})
precompile(Tuple{Type{NamedTuple{(:minwidth, :minheight, :penalty), T} where T<:Tuple}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Int64}})
precompile(Tuple{getfield(Compose, Symbol("#kw##context")), NamedTuple{(:minwidth, :minheight, :penalty), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Int64}}, typeof(Compose.context)})
precompile(Tuple{typeof(IterTools.groupby), getfield(Gadfly.Guide, Symbol("#49#58")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.iterate), IterTools.GroupBy{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Gadfly.Guide, Symbol("#49#58"))}, Nothing})
precompile(Tuple{typeof(Base.iterate), IterTools.GroupBy{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Gadfly.Guide, Symbol("#49#58"))}})
precompile(Tuple{typeof(Base.iterate), IterTools.GroupBy{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Gadfly.Guide, Symbol("#49#58"))}, Tuple{Bool, Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Guide, Symbol("#50#59")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Tuple{Measures.Length{:w, Float64}, Float64}, 1}, 1}, Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#50#59"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#50#59"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Array{Tuple{Measures.Length{:w, Float64}, Float64}, 1}, 1}, getfield(Compose, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Compose.line), Array{Array{Tuple{Measures.Length{:w, Float64}, Float64}, 1}, 1}, Symbol})
precompile(Tuple{typeof(Compose.line), Array{Array{Tuple{Measures.Length{:w, Float64}, Float64}, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Guide, Symbol("#51#60")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Tuple{Measures.Length{:w, Float64}, Float64}, 1}, 1}, Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#51#60"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Gadfly.Guide, Symbol("#51#60"))}})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Compose.Context, Compose.Context})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#52#61"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#52#61"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#53#62"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{Tuple{Measures.Measure, Measures.Measure}, 1}, getfield(Gadfly.Guide, Symbol("#53#62"))}, Int64})
precompile(Tuple{typeof(Base.vect), Compose.Context})
precompile(Tuple{typeof(Base.getproperty), Gadfly.Guide.XLabel, Symbol})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.XLabel, Gadfly.Theme, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.XLabel, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(Base.getproperty), Gadfly.Guide.YLabel, Symbol})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.YLabel, Gadfly.Theme, Gadfly.Aesthetics})
precompile(Tuple{typeof(Gadfly.render), Gadfly.Guide.YLabel, Gadfly.Theme, Gadfly.Aesthetics, Bool})
precompile(Tuple{typeof(Base.iterate), DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.iterate), DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Gadfly.Guide.TopGuidePosition})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Gadfly.Guide.BottomGuidePosition})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Gadfly.Guide.RightGuidePosition})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Gadfly.Guide.UnderGuidePosition})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Gadfly.Guide.OverGuidePosition})
precompile(Tuple{getfield(DataStructures, Symbol("#29#31")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}, Gadfly.Guide.OverGuidePosition}})
precompile(Tuple{typeof(Base.get!), getfield(DataStructures, Symbol("#30#32")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}}, Base.Dict{Any, Any}, Gadfly.Guide.OverGuidePosition})
precompile(Tuple{getfield(DataStructures, Symbol("#29#31")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}, Gadfly.Guide.UnderGuidePosition}})
precompile(Tuple{typeof(Base.get!), getfield(DataStructures, Symbol("#30#32")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}}, Base.Dict{Any, Any}, Gadfly.Guide.UnderGuidePosition})
precompile(Tuple{getfield(DataStructures, Symbol("#29#31")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}, Gadfly.Guide.RightGuidePosition}})
precompile(Tuple{typeof(Base.get!), getfield(DataStructures, Symbol("#30#32")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}}, Base.Dict{Any, Any}, Gadfly.Guide.RightGuidePosition})
precompile(Tuple{getfield(DataStructures, Symbol("#29#31")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}, Gadfly.Guide.LeftGuidePosition}})
precompile(Tuple{typeof(Base.get!), getfield(DataStructures, Symbol("#30#32")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}}, Base.Dict{Any, Any}, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{getfield(DataStructures, Symbol("#29#31")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}, Gadfly.Guide.BottomGuidePosition}})
precompile(Tuple{typeof(Base.get!), getfield(DataStructures, Symbol("#30#32")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}}, Base.Dict{Any, Any}, Gadfly.Guide.BottomGuidePosition})
precompile(Tuple{getfield(DataStructures, Symbol("#29#31")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}, Gadfly.Guide.TopGuidePosition}})
precompile(Tuple{typeof(Base.get!), getfield(DataStructures, Symbol("#30#32")){DataStructures.DefaultDictBase{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86")), Base.Dict{Any, Any}}}, Base.Dict{Any, Any}, Gadfly.Guide.TopGuidePosition})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Gadfly.Guide.TopGuidePosition})
precompile(Tuple{typeof(Gadfly.Guide.layout_guides), Compose.Context, Gadfly.Coord.Cartesian, Gadfly.Theme, Gadfly.Guide.PositionedGuide, Vararg{Gadfly.Guide.PositionedGuide, N} where N})
precompile(Tuple{typeof(Base.getindex), DataStructures.DefaultDict{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86"))}, Gadfly.Guide.UnderGuidePosition})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, Tuple{Array{Compose.Context, 1}, Int64}})
precompile(Tuple{typeof(Base.getindex), DataStructures.DefaultDict{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86"))}, Gadfly.Guide.OverGuidePosition})
precompile(Tuple{typeof(Base.getindex), DataStructures.DefaultDict{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86"))}, Gadfly.Guide.BottomGuidePosition})
precompile(Tuple{typeof(Base.getindex), DataStructures.DefaultDict{Any, Any, getfield(Gadfly.Guide, Symbol("#81#86"))}, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.convert), Type{Any}, Gadfly.Guide.OverGuidePosition})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Gadfly.Guide.OverGuidePosition, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.:(==)), Gadfly.Guide.OverGuidePosition, Gadfly.Guide.TopGuidePosition})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Gadfly.Guide, Symbol("#83#88"))}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Gadfly.Guide, Symbol("#83#88"))}, Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:by,), Tuple{getfield(Gadfly.Guide, Symbol("#83#88"))}}, typeof(Base.sort!), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Gadfly.Guide.BottomGuidePosition})
precompile(Tuple{typeof(Base.:(==)), Gadfly.Guide.BottomGuidePosition, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.:(==)), Gadfly.Guide.BottomGuidePosition, Gadfly.Guide.TopGuidePosition})
precompile(Tuple{typeof(Base.convert), Type{Any}, Gadfly.Guide.UnderGuidePosition})
precompile(Tuple{typeof(Base.:(==)), Gadfly.Guide.UnderGuidePosition, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.:(==)), Gadfly.Guide.UnderGuidePosition, Gadfly.Guide.TopGuidePosition})
precompile(Tuple{typeof(Base.convert), Type{Any}, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.:(==)), Gadfly.Guide.LeftGuidePosition, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Gadfly.Guide, Symbol("#82#87"))}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Gadfly.Guide, Symbol("#82#87"))}, Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:by,), Tuple{getfield(Gadfly.Guide, Symbol("#82#87"))}}, typeof(Base.sort!), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.isequal), Gadfly.Guide.RightGuidePosition, Gadfly.Guide.TopGuidePosition})
precompile(Tuple{Type{NamedTuple{(:units, :aspect_ratio), T} where T<:Tuple}, Tuple{Compose.UnitBox{Float64, Float64, Float64, Float64}, Nothing}})
precompile(Tuple{getfield(Compose, Symbol("##Table#55")), Nothing, Nothing, Nothing, Compose.UnitBox{Float64, Float64, Float64, Float64}, Int64, Bool, Bool, Array{Any, 1}, Type{Compose.Table}, Int64, Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:units, :aspect_ratio), Tuple{Compose.UnitBox{Float64, Float64, Float64, Float64}, Nothing}}, Type{Compose.Table}, Int64, Int64, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Compose.Context, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Compose.Context, 1}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Compose.Context, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Context, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:toppad, :bottompad), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Type{Compose.UnitBox{S, T, U, V} where V where U where T where S}, Compose.UnitBox{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Compose.Context, Symbol, Compose.UnitBox{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Compose.UnitBox{S, T, U, V} where V where U where T where S}}, Compose.UnitBox{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Compose.Context, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Compose.Table, Array{Compose.Context, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, Int64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:leftpad, :rightpad), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Type{Compose.UnitBox{S, T, U, V} where V where U where T where S}, Compose.UnitBox{Float64, Float64, Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:minwidth, :minheight, :units, :clip), T} where T<:Tuple}, Tuple{Nothing, Nothing, Compose.UnitBox{Float64, Float64, Float64, Float64}, Bool}})
precompile(Tuple{getfield(Compose, Symbol("#kw##context")), NamedTuple{(:minwidth, :minheight, :units, :clip), Tuple{Nothing, Nothing, Compose.UnitBox{Float64, Float64, Float64, Float64}, Bool}}, typeof(Compose.context)})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Guide, Symbol("#84#89")), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Compose.Context, 1}, 1}, Array{Compose.Context, 1}, Base.Generator{Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, getfield(Gadfly.Guide, Symbol("#84#89"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, getfield(Gadfly.Guide, Symbol("#84#89"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Gadfly.Guide, Symbol("#85#90")), Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Compose.Context, 1}, 1}, Array{Compose.Context, 1}, Base.Generator{Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, getfield(Gadfly.Guide, Symbol("#85#90"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Array{Compose.Context, 1}, Int64}, 1}, getfield(Gadfly.Guide, Symbol("#85#90"))}})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Array{Any, 1}})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Array{Any, 1}, Array{Any, 1}, Tuple{Compose.Context, Compose.Context}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Compose.Context, 1}}})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Array{Compose.Context, 1}, Array{Compose.Context, 1}, Array{Compose.Context, 1}})
precompile(Tuple{typeof(Compose.compose!), Compose.Context})
precompile(Tuple{typeof(Compose.compose!), Compose.Context, Array{Any, 1}, Tuple{Compose.Context, Compose.Context}, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{Type{Compose.Context}, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Nothing, Nothing, Nothing, Nothing, Compose.ListNode{Compose.Container}, Compose.ListNull{Compose.Form{P} where P<:Compose.FormPrimitive}, Compose.ListNull{Compose.Property{P} where P<:Compose.PropertyPrimitive}, Int64, Bool, Bool, Bool, Bool, Nothing, Nothing, Float64, Symbol})
precompile(Tuple{Type{Compose.Context}, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Nothing, Nothing, Nothing, Nothing, Compose.ListNode{Compose.Container}, Compose.ListNull{Compose.Form{P} where P<:Compose.FormPrimitive}, Compose.ListNode{Compose.Property{P} where P<:Compose.PropertyPrimitive}, Int64, Bool, Bool, Bool, Bool, Nothing, Nothing, Float64, Symbol})
precompile(Tuple{typeof(Compose.pad_inner), Compose.Context, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.pad_inner), Compose.Context, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{NamedTuple{(:minwidth, :minheight), T} where T<:Tuple}, Tuple{Nothing, Nothing}})
precompile(Tuple{getfield(Compose, Symbol("#kw##context")), NamedTuple{(:minwidth, :minheight), Tuple{Nothing, Nothing}}, typeof(Compose.context), Measures.Length{:w, Float64}, Measures.Length{:h, Float64}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Compose.ListNode{Compose.Container}, Symbol})
precompile(Tuple{typeof(Compose.order), Compose.Context})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.Add{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.Add{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Add{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), Compose.ListNode{Compose.Property{P} where P<:Compose.PropertyPrimitive}, Symbol})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.JSIncludePrimitive, 1}, Compose.JSIncludePrimitive, Base.Generator{Array{Compose.JSIncludePrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.SVGClassPrimitive, 1}, Compose.SVGClassPrimitive, Base.Generator{Array{Compose.SVGClassPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Type})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.JSIncludePrimitive}, Type{Compose.Property{Compose.JSIncludePrimitive}}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.SVGClassPrimitive}, Type{Compose.Property{Compose.SVGClassPrimitive}}})
precompile(Tuple{Type{Compose.ImagePropertyState}, ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}, Array{Float64, 1}, Compose.LineCapButt, Compose.LineJoinMiter, Bool, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, String, Nothing, Bool})
precompile(Tuple{typeof(Base.getindex), Array{Compose.JSIncludePrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.JSIncludePrimitive})
precompile(Tuple{typeof(Base.getindex), Array{Compose.SVGClassPrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.SVGClassPrimitive})
precompile(Tuple{typeof(Compose.order), Compose.Table})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Array{Array{Compose.Context, 1}, 2}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Compose.Context, 1}, 2}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Compose, Symbol("#61#66"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, Base.LogicalIndex{Int64, Base.BitArray{1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copymutable), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base._unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("#409#410"))}, Int64, Tuple{Int64, UInt64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("#409#410"))}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Float64, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(<)), Float64, Nothing})
precompile(Tuple{typeof(Base.:(>)), Nothing, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Nothing, Int64})
precompile(Tuple{getfield(Compose, Symbol("#update_mincolrow_sizes!#65")){Compose.Table, Int64, Int64}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{getfield(Compose, Symbol("#update_focused_col_widths!#63")){Compose.Table, Compose.ParentDrawContext, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{getfield(Compose, Symbol("#update_focused_row_heights!#64")){Compose.Table, Compose.ParentDrawContext, Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(>=)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._accumulate_pairwise!), typeof(Base.add_sum), Array{Float64, 1}, Array{Float64, 1}, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.accumulate_pairwise!), typeof(Base.add_sum), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Compose.force_aspect_ratio!), Compose.Table, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(<)), Nothing, Float64})
precompile(Tuple{typeof(Base.:(<=)), Nothing, Float64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Nothing})
precompile(Tuple{typeof(Compose.realize_brute_force), Compose.Table, Compose.ParentDrawContext})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PNGBackend}, Compose.Table, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{getfield(Compose, Symbol("#61#66")), Int64})
precompile(Tuple{typeof(Base._array_for), Type{Base.UnitRange{Int64}}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Any, 1}, getfield(Compose, Symbol("#61#66"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}, Base.Generator{Array{Any, 1}, getfield(Compose, Symbol("#61#66"))}, Int64})
precompile(Tuple{typeof(Base.isempty), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Int64, Int64, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Int64, Int64, Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:units, :order), T} where T<:Tuple}, Tuple{Compose.UnitBox{Float64, Float64, Float64, Float64}, Int64}})
precompile(Tuple{getfield(Compose, Symbol("#kw##context")), NamedTuple{(:units, :order), Tuple{Compose.UnitBox{Float64, Float64, Float64, Float64}, Int64}}, typeof(Compose.context)})
precompile(Tuple{Type{Compose.Context}, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Nothing, Nothing, Nothing, Compose.ListNode{Compose.Container}, Compose.ListNull{Compose.Form{P} where P<:Compose.FormPrimitive}, Compose.ListNull{Compose.Property{P} where P<:Compose.PropertyPrimitive}, Int64, Bool, Bool, Bool, Bool, Float64, Float64, Float64, Symbol})
precompile(Tuple{Type{Compose.Context}, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Nothing, Nothing, Nothing, Compose.ListNode{Compose.Container}, Compose.ListNull{Compose.Form{P} where P<:Compose.FormPrimitive}, Compose.ListNode{Compose.Property{P} where P<:Compose.PropertyPrimitive}, Int64, Bool, Bool, Bool, Bool, Nothing, Nothing, Float64, Symbol})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.:(>=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.order), Compose.AdhocContainerPromise})
precompile(Tuple{typeof(Compose.realize), Compose.AdhocContainerPromise, Compose.ParentDrawContext})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PNGBackend}, Compose.AdhocContainerPromise, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{getfield(Gadfly.Guide, Symbol("#68#70")){Gadfly.Guide.XLabel, Gadfly.Theme, Measures.Length{:mm, Float64}}, Compose.ParentDrawContext})
precompile(Tuple{typeof(Compose.text), Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, String, Compose.HCenter, Compose.VTop})
precompile(Tuple{typeof(Base.getproperty), Compose.ListNode{Compose.Form{P} where P<:Compose.FormPrimitive}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.FontSizePrimitive})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.FontSizePrimitive, 1}, Compose.FontSizePrimitive, Base.Generator{Array{Compose.FontSizePrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.FontSizePrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Compose.FontSizePrimitive}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.FontPrimitive, 1}, Compose.FontPrimitive, Base.Generator{Array{Compose.FontPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.FillPrimitive, 1}, Compose.FillPrimitive, Base.Generator{Array{Compose.FillPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.StrokePrimitive, 1}, Compose.StrokePrimitive, Base.Generator{Array{Compose.StrokePrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.FontSizePrimitive}, Type{Compose.Property{Compose.FontSizePrimitive}}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.FontPrimitive}, Type{Compose.Property{Compose.FontPrimitive}}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.FillPrimitive}, Type{Compose.Property{Compose.FillPrimitive}}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.StrokePrimitive}, Type{Compose.Property{Compose.StrokePrimitive}}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.FontSizePrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.FontSizePrimitive})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PNGBackend}, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.convert), Type{Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.StrokePrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.StrokePrimitive})
precompile(Tuple{typeof(Base.getindex), Array{Compose.FillPrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.FillPrimitive})
precompile(Tuple{typeof(Base.getindex), Array{Compose.FontPrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.FontPrimitive})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PNGBackend}, Symbol, String})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Compose.resolve_position), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{Type{Compose.Rotation{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Float64, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, String, Compose.HCenter, Compose.VTop, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Array{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{Type{Compose.Form{P} where P<:Compose.FormPrimitive}, Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Compose.batch), Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.vector_properties_require_push_pop), Compose.Image{Compose.PNGBackend}})
precompile(Tuple{typeof(Compose.push_vector_properties), Compose.Image{Compose.PNGBackend}, Int64})
precompile(Tuple{typeof(Compose.rotate), Compose.Image{Compose.PNGBackend}, Float64, Float64, Float64})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PNGBackend}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PNGBackend}, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Type{T} where T})
precompile(Tuple{typeof(Cairo.set_text), Cairo.CairoContext, String, Bool})
precompile(Tuple{getfield(Gadfly.Guide, Symbol("#35#44")){Gadfly.Theme, Measures.Length{:mm, Float64}}, Compose.ParentDrawContext})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{AbstractString, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{AbstractString, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractString, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Array{Bool, 1}})
precompile(Tuple{getfield(Compose, Symbol("##text#26")), Symbol, typeof(Compose.text), Array{Float64, 1}, Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{AbstractString, 1}, Array{Compose.HCenter, 1}, Array{Compose.VTop, 1}, Array{Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, 1}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.text), Array{Float64, 1}, Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{AbstractString, 1}, Array{Compose.HCenter, 1}, Array{Compose.VTop, 1}})
precompile(Tuple{Type{Compose.TextPrimitive{P, R, O} where O<:(Tuple{Vararg{Measures.Measure, N}} where N) where R<:(Compose.Rotation{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)) where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, String, Compose.HCenter, Compose.VTop, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{getfield(Compose, Symbol("##text#26")), Symbol, typeof(Compose.text), Array{Float64, 1}, Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{AbstractString, 1}, Array{Compose.HCenter, 1}, Array{Compose.VBottom, 1}, Array{Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, 1}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.text), Array{Float64, 1}, Array{Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{AbstractString, 1}, Array{Compose.HCenter, 1}, Array{Compose.VBottom, 1}})
precompile(Tuple{Type{Compose.TextPrimitive{P, R, O} where O<:(Tuple{Vararg{Measures.Measure, N}} where N) where R<:(Compose.Rotation{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)) where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, String, Compose.HCenter, Compose.VBottom, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Array{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.JSCallPrimitive})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.JSCallPrimitive, 1}, Compose.JSCallPrimitive, Base.Generator{Array{Compose.JSCallPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.JSCallPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Base.findnext), String, String, Int64})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Base.vect), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Vararg{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, N} where N})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Array{T, 1} where T, 1}, getfield(Compose, Symbol("#1#2"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{T, 1} where T, 1}, getfield(Compose, Symbol("#1#2"))}})
precompile(Tuple{typeof(Compose.narrow_polygon_point_types), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Compose.clip), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{getfield(Compose, Symbol("#1#2")), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.type_params), Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Int64})
precompile(Tuple{Type{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), 1}, Base.IndexLinear, Array{Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{Type{Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}}, Array{Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.Generator{Array{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.JSCallPrimitive}, Type{Compose.Property{Compose.JSCallPrimitive}}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Type{Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), 1}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.JSCallPrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.JSCallPrimitive})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Int64, Int64, Compose.Container}, 1}, Tuple{Int64, Int64, Compose.Context}})
precompile(Tuple{typeof(Base.isless), Tuple{Compose.Context}, Tuple{Compose.Context}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Tuple{Int64, Int64, Compose.Context}, Tuple{Int64, Int64, Compose.Context}})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.SVGAttributePrimitive, 1}, Compose.SVGAttributePrimitive, Base.Generator{Array{Compose.SVGAttributePrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.SVGAttributePrimitive}, Type{Compose.Property{Compose.SVGAttributePrimitive}}})
precompile(Tuple{Type{Compose.ImagePropertyState}, ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}, Array{Float64, 1}, Compose.LineCapButt, Compose.LineJoinMiter, Bool, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, String, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Bool})
precompile(Tuple{typeof(Base.getindex), Array{Compose.SVGAttributePrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.SVGAttributePrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{Type{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.batch), Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.fillstroke), Compose.Image{Compose.PNGBackend}, Bool})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PNGBackend}, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PNGBackend}, Symbol, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#48#49")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.StrokeDashPrimitive})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.StrokeDashPrimitive, 1}, Compose.StrokeDashPrimitive, Base.Generator{Array{Compose.StrokeDashPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.StrokeDashPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{getfield(Compose, Symbol("#48#49")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Measures.Length{:mm, Float64}}, Array{Measures.Measure, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#48#49")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#48#49")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{Type{Compose.StrokeDashPrimitive}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.LineWidthPrimitive})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.LineWidthPrimitive, 1}, Compose.LineWidthPrimitive, Base.Generator{Array{Compose.LineWidthPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.LineWidthPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{Type{Compose.LineWidthPrimitive}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.StrokeDashPrimitive}, Type{Compose.Property{Compose.StrokeDashPrimitive}}})
precompile(Tuple{getfield(Compose, Symbol("#137#139")), Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.LineWidthPrimitive}, Type{Compose.Property{Compose.LineWidthPrimitive}}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.StrokeDashPrimitive, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PNGBackend}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Measures.Measure, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PNGBackend}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.StrokeDashPrimitive})
precompile(Tuple{getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PNGBackend}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.LineWidthPrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PNGBackend}, Compose.LineWidthPrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.Generator{Array{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.LinePrimitive{Tuple{Measures.Measure, Measures.Measure}}})
precompile(Tuple{getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}, Compose.LinePrimitive{Tuple{Measures.Measure, Measures.Measure}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Length{:w, Float64}, Measures.Length{:cy, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Compose.batch), Compose.Form{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base.Math.hypot), Float64, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Measures.Length{:mm, Float64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Compose.arrowhead), Compose.Image{Compose.PNGBackend}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Float64, Float64})
precompile(Tuple{typeof(Compose.arrow), Compose.Image{Compose.PNGBackend}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PNGBackend}, Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PNGBackend}, Compose.Form{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Length{:cx, Float64}, Measures.Length{:h, Float64}}})
precompile(Tuple{Type{Compose.StrokeDashPrimitive}, Array{Any, 1}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Length{:cx, Float64}, Measures.Length{:cy, Float64}}})
precompile(Tuple{getfield(Gadfly.Guide, Symbol("#54#63")){Gadfly.Theme, Measures.Length{:mm, Float64}}, Compose.ParentDrawContext})
precompile(Tuple{getfield(Compose, Symbol("##text#26")), Symbol, typeof(Compose.text), Array{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{Float64, 1}, Array{AbstractString, 1}, Array{Compose.HRight, 1}, Array{Compose.VCenter, 1}, Array{Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, 1}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.text), Array{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, 1}, Array{Float64, 1}, Array{AbstractString, 1}, Array{Compose.HRight, 1}, Array{Compose.VCenter, 1}})
precompile(Tuple{Type{Compose.TextPrimitive{P, R, O} where O<:(Tuple{Vararg{Measures.Measure, N}} where N) where R<:(Compose.Rotation{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)) where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, String, Compose.HRight, Compose.VCenter, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.resolve_position), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, String, Compose.HRight, Compose.VCenter, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{getfield(Gadfly.Guide, Symbol("#73#75")){Gadfly.Guide.YLabel, Gadfly.Theme, Measures.Length{:mm, Float64}}, Compose.ParentDrawContext})
precompile(Tuple{typeof(Compose.text), Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}, String, Compose.HRight, Compose.VCenter})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PNGBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Cairo.write_to_stream_callback), Base.IOStream, Ptr{UInt8}, UInt32})
precompile(Tuple{typeof(Cairo.write_to_png), Cairo.CairoSurfaceBase{UInt32}, Base.IOStream})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoSurfaceBase{UInt32}})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.SeriesAnnotations, Symbol})
precompile(Tuple{typeof(Plots.preprocessArgs!), Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Plots, Symbol("##default#123")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol}, NamedTuple{(:size,), Tuple{Tuple{Int64, Int64}}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("#kw##default")), NamedTuple{(:size,), Tuple{Tuple{Int64, Int64}}}, typeof(Plots.default)})
precompile(Tuple{typeof(Base.convert), Type{Any}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.GithubMarkdown})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Base.SubString{String}, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.GithubMarkdown})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#4")), Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#4")), Bool, Bool, typeof(Base.Meta.parse), String})
precompile(Tuple{typeof(Base.Meta.parse), String})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Weave.CodeChunk}, String, Int64, Int64, Base.SubString{String}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Weave.CodeChunk}, String, Int64, Int64, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Weave.parse_doc), String, Weave.MarkupInput})
precompile(Tuple{typeof(Weave.parse_doc), String, Weave.ScriptInput})
precompile(Tuple{typeof(Weave.parse_doc), String, String})
precompile(Tuple{Type{Base.Dict{UInt64, YAML.SimpleKey}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{YAML.TokenStream}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(YAML.forward!), YAML.EventStream})
precompile(Tuple{typeof(YAML.peek), YAML.EventStream})
precompile(Tuple{typeof(YAML.compose_node), YAML.Composer})
precompile(Tuple{typeof(YAML.compose_document), YAML.Composer})
precompile(Tuple{typeof(YAML.compose), YAML.EventStream})
precompile(Tuple{typeof(YAML.load), YAML.TokenStream, Nothing})
precompile(Tuple{typeof(Weave.parse_header), Weave.DocChunk})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, Symbol})
precompile(Tuple{typeof(Weave.parse_doc), String, Symbol})
precompile(Tuple{typeof(Weave.read_doc), String, Symbol})
precompile(Tuple{typeof(Weave.header_args), Weave.WeaveDoc, String, Symbol, String, String, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String})
precompile(Tuple{typeof(Weave.strip_header), Weave.DocChunk})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Mustache, Symbol("#22#23")), String})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TextToken})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.SectionToken})
precompile(Tuple{typeof(Mustache.make_tokens), String, Tuple{String, String}})
precompile(Tuple{typeof(Mustache.template_from_file), String})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.render_doc), String, Weave.WeaveDoc, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Weave.format), Weave.WeaveDoc})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), String, Symbol, String, Base.Dict{Any, Any}, Symbol, String, String, String, Symbol, Bool, Nothing, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{getfield(Base, Symbol("##catch_stack#43")), Bool, typeof(Base.catch_stack), Task})
precompile(Tuple{typeof(Main.test_gadfly), String, String})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoContext})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Base.Meta, Symbol("#2#3")){Bool, String}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Base.Iterators.Zip{Tuple{Array{Base.Dict{Symbol, Any}, 1}, Array{Any, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Weave.pushopt)}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(YAML._fill), YAML.BufferedInput, UInt64})
precompile(Tuple{typeof(Base.read), Base.Filesystem.File, Type{Char}})
precompile(Tuple{typeof(YAML.forward!), YAML.BufferedInput, Int64})
precompile(Tuple{typeof(YAML.forwardchars!), YAML.TokenStream, Int64})
precompile(Tuple{typeof(YAML.prefix), YAML.BufferedInput, Int64})
precompile(Tuple{typeof(YAML.scan_line_break), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_to_next_token), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_directive_name), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_yaml_directive_number), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_yaml_directive_value), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_directive_ignored_line), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_handle), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_directive_handle), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_uri_escapes), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_uri), YAML.TokenStream, String, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_tag_directive_prefix), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_directive), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_directive), YAML.TokenStream})
precompile(Tuple{typeof(YAML.check_document_start), YAML.TokenStream})
precompile(Tuple{typeof(YAML.check_document_end), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_block_entry), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_key), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_value), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_alias), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_anchor), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_tag), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_tag), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_block_scalar_ignored_line), YAML.TokenStream, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_block_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.scan_flow_scalar_breaks), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar_spaces), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar_non_spaces), YAML.TokenStream, Bool, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_flow_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.fetch_flow_scalar), YAML.TokenStream, Char})
precompile(Tuple{typeof(YAML.check_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.scan_plain_spaces), YAML.TokenStream, Int64, YAML.Mark})
precompile(Tuple{typeof(YAML.scan_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_plain), YAML.TokenStream})
precompile(Tuple{typeof(YAML.fetch_more_tokens), YAML.TokenStream})
precompile(Tuple{typeof(YAML.forward!), YAML.TokenStream})
precompile(Tuple{typeof(YAML.parse_stream_start), YAML.EventStream})
precompile(Tuple{typeof(YAML.peek), YAML.TokenStream})
precompile(Tuple{typeof(YAML.process_directives), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_document_start), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_implicit_document_start), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), Nothing, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.parse_node), YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.parse_block_node), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), YAML.BlockMappingStartToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML._compose_mapping_node), YAML.MappingStartEvent, YAML.Composer, Nothing})
precompile(Tuple{typeof(YAML.compose_mapping_node), YAML.Composer, Nothing})
precompile(Tuple{typeof(YAML._compose_mapping_node), YAML.MappingStartEvent, YAML.Composer, String})
precompile(Tuple{typeof(YAML.compose_mapping_node), YAML.Composer, String})
precompile(Tuple{typeof(YAML.handle_error), YAML.MappingStartEvent, YAML.Composer, String})
precompile(Tuple{typeof(YAML.handle_event), YAML.MappingStartEvent, YAML.Composer})
precompile(Tuple{typeof(YAML.parse_block_mapping_key), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_block_mapping_first_key), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), YAML.ScalarToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.__parse_node), YAML.ScalarToken, YAML.EventStream, Bool, YAML.Mark, YAML.Mark, Nothing, Nothing, Bool})
precompile(Tuple{typeof(YAML.__compose_mapping_node), YAML.ScalarEvent, YAML.Composer, YAML.MappingNode})
precompile(Tuple{typeof(YAML.compose_scalar_node), YAML.Composer, Nothing})
precompile(Tuple{typeof(YAML.compose_scalar_node), YAML.Composer, String})
precompile(Tuple{typeof(YAML.handle_error), YAML.ScalarEvent, YAML.Composer, String})
precompile(Tuple{typeof(YAML.handle_event), YAML.ScalarEvent, YAML.Composer})
precompile(Tuple{typeof(YAML.parse_block_mapping_value), YAML.EventStream})
precompile(Tuple{typeof(YAML.parse_document_end), YAML.EventStream})
precompile(Tuple{typeof(YAML.flatten_mapping), YAML.MappingNode})
precompile(Tuple{typeof(YAML.construct_mapping), YAML.Constructor, YAML.MappingNode, Bool})
precompile(Tuple{typeof(YAML.construct_yaml_map), YAML.Constructor, YAML.MappingNode})
precompile(Tuple{Type{Weave.WeaveDoc}, String, Array{Any, 1}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(Base.in), String, Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Weave.read_cache), Weave.WeaveDoc, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Weave.write_cache), Weave.WeaveDoc, String})
precompile(Tuple{typeof(Weave.run_code), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Symbol, Any}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.TermResult})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.CollectResult})
precompile(Tuple{typeof(Weave.collect_results), Weave.CodeChunk, Weave.ScriptResult})
precompile(Tuple{typeof(Weave.eval_chunk), Weave.CodeChunk, Weave.Report, Module})
precompile(Tuple{typeof(Weave.run_chunk), Weave.CodeChunk, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Symbol, String, Base.Dict{Any, Any}, String, String, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), Tuple{String, Symbol, String, Base.Dict{Any, Any}, String, String, String, Symbol, Bool, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, Weave.GithubMarkdown})
precompile(Tuple{typeof(Base.convert), Type{Any}, Weave.GithubMarkdown})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.InlineCode, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.InlineText, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Weave.DocChunk})
precompile(Tuple{typeof(Base.__cat), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Weave.DocChunk})
precompile(Tuple{typeof(Base.setproperty!), Weave.Report, Symbol, Weave.CodeChunk})
precompile(Tuple{typeof(Base.convert), Type{Any}, Weave.CodeChunk})
precompile(Tuple{typeof(Weave.parse_input), String})
precompile(Tuple{typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Weave.capture_output), Expr, Module, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Base.Regex, String}})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Gadfly.Plot})
precompile(Tuple{typeof(Base.unique), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.unique), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Nothing}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Nothing}, Nothing, String})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Nothing}, String})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/pdf")}, Gadfly.Plot})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("application/pdf")}, Gadfly.Plot})
precompile(Tuple{getfield(Compose, Symbol("##PDF#135")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Compose.PDF), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:width, :height, :owns_surface, :emit_on_finish, :ppmm, :ownedfile, :filename), Tuple{Float64, Float64, Bool, Bool, Float64, Bool, String}}, Type{Compose.Image{Compose.PDFBackend}}, Cairo.CairoSurfaceIOStream{UInt32}, Cairo.CairoContext, Base.IOStream})
precompile(Tuple{getfield(Compose, Symbol("##_#131")), Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:ownedfile, :filename), Tuple{Bool, String}}}, Type{Compose.Image{Compose.PDFBackend}}, Base.IOStream, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool})
precompile(Tuple{Type{Compose.Image{Compose.PDFBackend}}, String, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{getfield(Compose, Symbol("##_#130")), Float64, Float64, ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}, Array{Any, 1}, Compose.LineCapButt, Compose.LineJoinMiter, Bool, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, String, Nothing, Bool, Array{Compose.ImagePropertyState, 1}, Array{Compose.ImagePropertyFrame, 1}, Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Bool, Bool, String, Bool, Bool, Float64, Nothing, Nothing, Type{Compose.Image{Compose.PDFBackend}}, Cairo.CairoSurfaceIOStream{UInt32}, Cairo.CairoContext, Base.IOStream})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.JSIncludePrimitive})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.SVGClassPrimitive})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PDFBackend}, Compose.Table, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PDFBackend}, Compose.AdhocContainerPromise, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.FontSizePrimitive})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PDFBackend}, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.StrokePrimitive})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.FillPrimitive})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.FontPrimitive})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PDFBackend}, Symbol, String})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.vector_properties_require_push_pop), Compose.Image{Compose.PDFBackend}})
precompile(Tuple{typeof(Compose.push_vector_properties), Compose.Image{Compose.PDFBackend}, Int64})
precompile(Tuple{typeof(Compose.rotate), Compose.Image{Compose.PDFBackend}, Float64, Float64, Float64})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PDFBackend}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PDFBackend}, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.JSCallPrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.SVGAttributePrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Compose.fillstroke), Compose.Image{Compose.PDFBackend}, Bool})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PDFBackend}, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PDFBackend}, Symbol, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PDFBackend}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Measures.Measure, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PDFBackend}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.StrokeDashPrimitive})
precompile(Tuple{getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PDFBackend}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PDFBackend}, Compose.LineWidthPrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Compose.arrowhead), Compose.Image{Compose.PDFBackend}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Float64, Float64})
precompile(Tuple{typeof(Compose.arrow), Compose.Image{Compose.PDFBackend}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PDFBackend}, Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PDFBackend}, Compose.Form{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PDFBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoSurfaceIOStream{UInt32}})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.GithubMarkdown})
precompile(Tuple{typeof(Weave.format_inline), Weave.InlineCode})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Base.SubString{String}, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.GithubMarkdown})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.GithubMarkdown})
precompile(Tuple{Type{Base.Dict{Tuple{AbstractString, AbstractString}, Nothing}}})
precompile(Tuple{typeof(Base.hash), Tuple{String, String}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Tuple{AbstractString, AbstractString}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Tuple{AbstractString, AbstractString}, Nothing}, Tuple{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{AbstractString, AbstractString}, Nothing}, Nothing, Tuple{String, String}})
precompile(Tuple{typeof(Base.union!), Base.Set{Tuple{AbstractString, AbstractString}}, Tuple{Tuple{String, String}}})
precompile(Tuple{typeof(Compose.writeheader), Compose.SVG})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:ownedfile, :filename), Tuple{Bool, String}}, Type{Compose.SVG}, Base.IOStream, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool, Symbol})
precompile(Tuple{Type{Compose.SVG}, String, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
precompile(Tuple{typeof(Compose.svg_fmt_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.getproperty), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Nothing}, Type{T} where T})
precompile(Tuple{typeof(Base.push!), Base.Set{Type}, Type{T} where T})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Type, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Type, Nothing}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.JSIncludePrimitive}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Type})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.JSIncludePrimitive}}})
precompile(Tuple{typeof(Base.:(|)), Bool, Bool})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.SVGClassPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.SVGClassPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{AbstractString, AbstractString}, Nothing}, Nothing, Nothing})
precompile(Tuple{typeof(Base.push!), Base.Set{Tuple{AbstractString, AbstractString}}, Nothing})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.JSIncludePrimitive})
precompile(Tuple{typeof(Base.:(!=)), Tuple{String, String}, Nothing})
precompile(Tuple{typeof(Base.push!), Base.Set{Tuple{AbstractString, AbstractString}}, Tuple{String, String}})
precompile(Tuple{typeof(Base.isequal), Tuple{String, String}, Tuple{String, String}})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.SVGClassPrimitive})
precompile(Tuple{typeof(Base.print), Base.IOStream, Char})
precompile(Tuple{typeof(Base.getindex), Array{Compose.SVGIDPrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.SVGIDPrimitive})
precompile(Tuple{typeof(Base.escape_string), String})
precompile(Tuple{typeof(Compose.drawpart), Compose.SVG, Compose.Table, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.drawpart), Compose.SVG, Compose.AdhocContainerPromise, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.FontSizePrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.FontSizePrimitive}}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.FontPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.FontPrimitive}}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.FillPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.FillPrimitive}}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.StrokePrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.StrokePrimitive}}})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.FontSizePrimitive})
precompile(Tuple{typeof(Compose.svg_print_uint), Base.IOStream, UInt64, Int64, Bool})
precompile(Tuple{typeof(Compose.svg_print_float), Base.IOStream, Float64})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.FontPrimitive})
precompile(Tuple{Type{ColorTypes.ARGB32}, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.FillPrimitive})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.StrokePrimitive})
precompile(Tuple{typeof(Base.Printf.print_fixed), Base.IOStream, Int64, Int32, Int32, Bool, Array{UInt8, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.print_vector_properties), Compose.SVG, Int64, Bool})
precompile(Tuple{typeof(Compose.svg_newlines), String})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Int64})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{Type{Base.Pair{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type{T} where T})
precompile(Tuple{typeof(Base.:(>)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.CodeUnits{UInt8, String}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.CodeUnits{UInt8, String}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Compose.pango_to_svg), String})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.JSCallPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.JSCallPrimitive}}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex2), OrderedCollections.OrderedDict{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), String}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), String}, String, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Int64})
precompile(Tuple{typeof(Base.get!), getfield(Compose, Symbol("#97#98")){Compose.SVG}, OrderedCollections.OrderedDict{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N), String}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.JSCallPrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.SVGAttributePrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.SVGAttributePrimitive}}})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.SVGAttributePrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Int64})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.print_svg_path), Base.IOStream, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Bool})
precompile(Tuple{typeof(Compose.print_svg_path), Base.IOStream, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.StrokeDashPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.StrokeDashPrimitive}}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.LineWidthPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.LineWidthPrimitive}}})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.StrokeDashPrimitive})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.LineWidthPrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{getfield(Compose, Symbol("#95#96")), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, getfield(Compose, Symbol("#95#96"))}})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Int64})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Compose.Form{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Base.Generator{Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, getfield(Compose, Symbol("#95#96"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, getfield(Compose, Symbol("#95#96"))}, Int64})
precompile(Tuple{typeof(Base.getproperty), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.string), Measures.Length{:mm, Float64}, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print_to_string), Measures.Length{:mm, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getproperty), Compose.UnitBox{Float64, Float64, Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.string), Float64, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, String})
precompile(Tuple{typeof(Base.getproperty), Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, Weave.Pandoc})
precompile(Tuple{typeof(Base.convert), Type{Any}, Weave.Pandoc})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Weave.Inline, 1}, typeof(Weave.format_inline)}, Int64})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.Pandoc})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Pandoc})
precompile(Tuple{typeof(Compose.SVGJS), String, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.SVGClassPrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.SVGClassPrimitive, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.SVGAttributePrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.SVGAttributePrimitive, 1}})
precompile(Tuple{Type{Base.Dict{Compose.SVGAttributePrimitive, Nothing}}})
precompile(Tuple{typeof(Base.hash), Compose.SVGAttributePrimitive, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Compose.SVGAttributePrimitive, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Compose.SVGAttributePrimitive, Nothing}, Compose.SVGAttributePrimitive})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Compose.SVGAttributePrimitive, Nothing}, Nothing, Compose.SVGAttributePrimitive})
precompile(Tuple{typeof(Compose.count_unique_primitives), Compose.Property{Compose.SVGAttributePrimitive}, Int64})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.FontSizePrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.FontSizePrimitive, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.FontPrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.FontPrimitive, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.FillPrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.FillPrimitive, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.VisiblePrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.VisiblePrimitive, 1}})
precompile(Tuple{Type{Base.Dict{Compose.VisiblePrimitive, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Compose.VisiblePrimitive, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Compose.VisiblePrimitive, Nothing}, Compose.VisiblePrimitive})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Compose.VisiblePrimitive, Nothing}, Nothing, Compose.VisiblePrimitive})
precompile(Tuple{typeof(Compose.count_unique_primitives), Compose.Property{Compose.VisiblePrimitive}, Int64})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.VisiblePrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.VisiblePrimitive, 1}, Compose.VisiblePrimitive, Base.Generator{Array{Compose.VisiblePrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.VisiblePrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.VisiblePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Compose.Property{Compose.SVGAttributePrimitive}, Type{Compose.Property{Compose.SVGAttributePrimitive}}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.VisiblePrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Compose.Property{P} where P<:Compose.PropertyPrimitive}, Compose.Property{Compose.VisiblePrimitive}, Type{Compose.Property{Compose.VisiblePrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Compose.Property{Compose.VisiblePrimitive}, Type{Compose.Property{Compose.VisiblePrimitive}}})
precompile(Tuple{Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, String, Compose.HCenter, Compose.VBottom, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Compose.Property{Compose.VisiblePrimitive}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.VisiblePrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.VisiblePrimitive})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.VisiblePrimitive}}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.JSCallPrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.JSCallPrimitive, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.StrokeDashPrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.StrokeDashPrimitive, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.LineWidthPrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.LineWidthPrimitive, 1}})
precompile(Tuple{typeof(Base.getproperty), Compose.Property{Compose.StrokePrimitive}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.StrokePrimitive, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}, 1}, Compose.Property{Compose.SVGAttributePrimitive}, Int64})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillOpacityPrimitive}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.FillOpacityPrimitive, 1}, Compose.FillOpacityPrimitive, Base.Generator{Array{Compose.FillOpacityPrimitive, 1}, getfield(Compose, Symbol("#40#41")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillOpacityPrimitive}})
precompile(Tuple{typeof(Base.push!), Array{Compose.Property{P} where P<:Compose.PropertyPrimitive, 1}, Compose.Property{Compose.FillOpacityPrimitive}})
precompile(Tuple{typeof(Compose.isrepeatable), Compose.Property{Compose.FillOpacityPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.FillOpacityPrimitive}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.FillOpacityPrimitive}}})
precompile(Tuple{typeof(Base.getindex), Array{Compose.FillOpacityPrimitive, 1}, Int64})
precompile(Tuple{typeof(Compose.print_property), Compose.SVG, Compose.FillOpacityPrimitive})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, String, Compose.HRight, Compose.VTop, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Base.getproperty), Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.register_coords), Compose.SVG, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}, getfield(Compose, Symbol("#9#10")){Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform}}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{Type{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, String, Compose.HCenter, Compose.VCenter, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{typeof(Base.write), Base.IOStream, String, String})
precompile(Tuple{getfield(Compose, Symbol("#87#90")), Tuple{String, String}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.Set{Tuple{AbstractString, AbstractString}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.Set{Tuple{AbstractString, AbstractString}}, getfield(Compose, Symbol("#88#91"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.Set{Tuple{AbstractString, AbstractString}}, getfield(Compose, Symbol("#88#91"))}, Int64})
precompile(Tuple{getfield(Compose, Symbol("#89#92")), Tuple{String, String}})
precompile(Tuple{typeof(Compose.escape_script), String})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, Weave.Tex})
precompile(Tuple{typeof(Base.convert), Type{Any}, Weave.Tex})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.Tex})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.Tex})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.Tex})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("application/postscript")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/postscript")}, Any})
precompile(Tuple{getfield(Compose, Symbol("##PS#136")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Compose.PS), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Compose.newsurface), Type{Compose.PSBackend}, Base.IOStream, Float64, Float64})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:width, :height, :owns_surface, :emit_on_finish, :ppmm, :ownedfile, :filename), Tuple{Float64, Float64, Bool, Bool, Float64, Bool, String}}, Type{Compose.Image{Compose.PSBackend}}, Cairo.CairoSurfaceIOStream{UInt32}, Cairo.CairoContext, Base.IOStream})
precompile(Tuple{getfield(Compose, Symbol("##_#131")), Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:ownedfile, :filename), Tuple{Bool, String}}}, Type{Compose.Image{Compose.PSBackend}}, Base.IOStream, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool})
precompile(Tuple{Type{Compose.Image{Compose.PSBackend}}, String, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{getfield(Compose, Symbol("##_#130")), Float64, Float64, ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}, Array{Any, 1}, Compose.LineCapButt, Compose.LineJoinMiter, Bool, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, String, Nothing, Bool, Array{Compose.ImagePropertyState, 1}, Array{Compose.ImagePropertyFrame, 1}, Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Bool, Bool, String, Bool, Bool, Float64, Nothing, Nothing, Type{Compose.Image{Compose.PSBackend}}, Cairo.CairoSurfaceIOStream{UInt32}, Cairo.CairoContext, Base.IOStream})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.JSIncludePrimitive})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.SVGClassPrimitive})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PSBackend}, Compose.Table, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.drawpart), Compose.Image{Compose.PSBackend}, Compose.AdhocContainerPromise, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.FontSizePrimitive})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PSBackend}, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.StrokePrimitive})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.FillPrimitive})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.FontPrimitive})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PSBackend}, Symbol, String})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.vector_properties_require_push_pop), Compose.Image{Compose.PSBackend}})
precompile(Tuple{typeof(Compose.push_vector_properties), Compose.Image{Compose.PSBackend}, Int64})
precompile(Tuple{typeof(Compose.rotate), Compose.Image{Compose.PSBackend}, Float64, Float64, Float64})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PSBackend}, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PSBackend}, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.JSCallPrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.SVGAttributePrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Compose.fillstroke), Compose.Image{Compose.PSBackend}, Bool})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PSBackend}, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.setproperty!), Compose.Image{Compose.PSBackend}, Symbol, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PSBackend}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Measures.Measure, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PSBackend}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.StrokeDashPrimitive})
precompile(Tuple{getfield(Compose, Symbol("#141#142")){Compose.Image{Compose.PSBackend}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.apply_property), Compose.Image{Compose.PSBackend}, Compose.LineWidthPrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Compose.arrowhead), Compose.Image{Compose.PSBackend}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Float64, Float64})
precompile(Tuple{typeof(Compose.arrow), Compose.Image{Compose.PSBackend}, Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 1}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PSBackend}, Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.Image{Compose.PSBackend}, Compose.Form{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.Image{Compose.PSBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{Type{Base.Dict{ColorTypes.Color{T, N} where N where T, Nothing}}})
precompile(Tuple{typeof(Base.__throw_gcd_overflow), UInt8, UInt8})
precompile(Tuple{typeof(Base.decompose), FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{typeof(Base.hash_integer), UInt8, UInt64})
precompile(Tuple{typeof(Base.hash_integer), Int64, UInt64})
precompile(Tuple{typeof(Base.hash), FixedPointNumbers.Normed{UInt8, 8}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{ColorTypes.Color{T, N} where N where T, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{ColorTypes.Color{T, N} where N where T, Nothing}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ColorTypes.Color{T, N} where N where T, Nothing}, Nothing, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.union!), Base.Set{ColorTypes.Color{T, N} where N where T}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:texfonts, :ownedfile, :filename), Tuple{Bool, Bool, String}}, Type{Compose.PGF}, Base.IOStream, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool, Bool})
precompile(Tuple{Type{Compose.PGF}, String, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool})
precompile(Tuple{getfield(Compose, Symbol("##PGF#103")), Bool, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, Nothing, Float64, Nothing, Float64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Base.Set{ColorTypes.Color{T, N} where N where T}, Array{Compose.PGFPropertyFrame, 1}, Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Bool, Bool, String, Type{Compose.PGF}, Base.IOStream, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool, Bool})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSIncludePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGClassPrimitive}})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.JSIncludePrimitive})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.SVGClassPrimitive})
precompile(Tuple{typeof(Compose.drawpart), Compose.PGF, Compose.Table, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.drawpart), Compose.PGF, Compose.AdhocContainerPromise, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontSizePrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FontPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.FillPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokePrimitive}})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.FontSizePrimitive})
precompile(Tuple{typeof(Base.setproperty!), Compose.PGF, Symbol, Float64})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.FontPrimitive})
precompile(Tuple{typeof(Base.hash), ColorTypes.RGB{Float64}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{ColorTypes.Color{T, N} where N where T, Nothing}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ColorTypes.Color{T, N} where N where T, Nothing}, Nothing, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.FillPrimitive})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.StrokePrimitive})
precompile(Tuple{typeof(Base.isequal), ColorTypes.RGB{Float64}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.get_vector_properties), Compose.PGF, Int64})
precompile(Tuple{typeof(Compose.draw), Compose.PGF, Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Int64})
precompile(Tuple{typeof(Compose.draw), Compose.PGF, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Compose.Rotation{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Colors.hex), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Compose.escape_tex_chars), String})
precompile(Tuple{typeof(Compose.pango_to_pgf), String})
precompile(Tuple{typeof(Base.setproperty!), Compose.PGF, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, ColorTypes.Color{T, N} where N where T}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setproperty!), Compose.PGF, Symbol, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, ColorTypes.Color{T, N} where N where T}}, Nothing})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Length{:cx, Float64}, Measures.Add{Measures.Length{:h, Float64}, Measures.Length{:mm, Float64}}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.JSCallPrimitive}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Nothing}, Nothing, Type{Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, Union{Nothing, Compose.Property{P} where P<:Compose.PropertyPrimitive}}, Nothing, Type{Compose.Property{Compose.ClipPrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}}})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.JSCallPrimitive})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.ClipPrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.SVGAttributePrimitive}})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.SVGAttributePrimitive})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Compose.draw), Compose.PGF, Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Int64})
precompile(Tuple{typeof(Compose.draw), Compose.PGF, Compose.Form{Compose.RectanglePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.StrokeDashPrimitive}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Property{Compose.LineWidthPrimitive}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#107#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Measures.Measure, 1}, Base.Generator{Array{Measures.Measure, 1}, getfield(Compose, Symbol("#107#109"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.Iterators.Zip{Tuple{Base.Iterators.Cycle{Array{String, 1}}, Array{String, 1}}}, getfield(Compose, Symbol("#106#108"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Base.Iterators.Cycle{Array{String, 1}}, Array{String, 1}}}, getfield(Compose, Symbol("#106#108"))}})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.StrokeDashPrimitive})
precompile(Tuple{getfield(Compose, Symbol("#107#109")), Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Compose.push_property!), Array{AbstractString, 1}, Compose.PGF, Compose.LineWidthPrimitive})
precompile(Tuple{typeof(Base.isequal), ColorTypes.RGB{Float64}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.LinePrimitive{P} where P<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Compose.draw), Compose.PGF, Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Int64})
precompile(Tuple{typeof(Compose.draw), Compose.PGF, Compose.Form{Compose.LinePrimitive{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:cy, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Compose.register_coords), Compose.PGF, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Compose.UnitBox{Float64, Float64, Float64, Float64}, Compose.IdentityTransform, Compose.Form{Compose.TextPrimitive{Tuple{Measures.Add{Measures.Length{:w, Float64}, Measures.Length{:mm, Float64}}, Measures.Length{:h, Float64}}, Compose.Rotation{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}}})
precompile(Tuple{typeof(Base.write), Base.IOStream, Array{UInt8, 1}})
precompile(Tuple{Type{NamedTuple{(:x, :y), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Dict{Symbol, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.UnitRange{Int64}}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Pairs{Symbol, Base.UnitRange{Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:x, :y), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Gadfly.cleanmapping), Base.Dict{Symbol, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Gadfly, Symbol("#kw##plot")), NamedTuple{(:x, :y), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, typeof(Gadfly.plot)})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Gadfly.evalmapping), Nothing, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{Type{Base.Multimedia.MIME{Symbol("application/png")}}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/png")}, Gadfly.Plot})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, String, Symbol})
precompile(Tuple{typeof(YAML.load), String})
precompile(Tuple{typeof(YAML.fetch_document_indicator), YAML.TokenStream, Type{T} where T})
precompile(Tuple{Type{YAML.DocumentStartToken}, YAML.Span})
precompile(Tuple{typeof(YAML.enqueue!), YAML.Queue{YAML.Token}, YAML.DocumentStartToken})
precompile(Tuple{typeof(Base.getproperty), YAML.DocumentStartToken, Symbol})
precompile(Tuple{Type{YAML.DocumentStartEvent}, YAML.Mark, YAML.Mark, Bool, Nothing, Base.Dict{String, String}})
precompile(Tuple{typeof(YAML.parse_document_content), YAML.EventStream})
precompile(Tuple{typeof(Base.in), YAML.BlockMappingStartToken, Array{DataType, 1}})
precompile(Tuple{typeof(Base.in), Base.Pair{Any, Any}, Base.Dict{String, String}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, String}, String, Symbol})
precompile(Tuple{typeof(Weave.read_doc), String})
precompile(Tuple{typeof(YAML.construct_yaml_bool), YAML.Constructor, YAML.ScalarNode})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{YAML.Node, Any}, Bool, YAML.ScalarNode})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Bool, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.getproperty), Weave.MarkupInput, Symbol})
precompile(Tuple{typeof(Base.eachmatch), Base.Regex, String})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.RegexMatchIterator, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Base.RegexMatchIterator})
precompile(Tuple{typeof(Base.getindex), Array{Base.RegexMatch, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.RegexMatch, Int64})
precompile(Tuple{typeof(Base.length), Array{Weave.Inline, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#6#7")), Base.UnitRange{Int64}})
precompile(Tuple{getfield(Main, Symbol("#6#7")), Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#6#7"))}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#6#7"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#6#7"))}, Int64})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{getfield(Mustache, Symbol("#@mt_str")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Mustache.parse), String})
precompile(Tuple{typeof(Base.push!), Mustache.MustacheTokens, Mustache.TagToken})
precompile(Tuple{Type{NamedTuple{(:doctype, :template), T} where T<:Tuple}, Tuple{String, Mustache.MustacheTokens}})
precompile(Tuple{typeof(Weave.header_args), Weave.WeaveDoc, Symbol, Symbol, Nothing, String, String, Symbol, Bool, Mustache.MustacheTokens, Nothing, Nothing, Array{String, 1}, String})
precompile(Tuple{getfield(Weave, Symbol("##weave#16")), String, Symbol, Symbol, Base.Dict{Any, Any}, Symbol, String, Nothing, String, Symbol, Bool, Mustache.MustacheTokens, Nothing, Nothing, Array{String, 1}, String, Bool, typeof(Weave.weave), String})
precompile(Tuple{getfield(Weave, Symbol("#kw##weave")), NamedTuple{(:doctype, :template), Tuple{String, Mustache.MustacheTokens}}, typeof(Weave.weave), String})
precompile(Tuple{typeof(Base.:(!=)), Mustache.MustacheTokens, Nothing})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, Mustache.MustacheTokens})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Mustache.MustacheTokens}}, Mustache.MustacheTokens})
precompile(Tuple{getfield(Weave, Symbol("##run#34")), String, Symbol, String, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{getfield(Base, Symbol("#kw##run")), NamedTuple{(:doctype, :mod, :out_path, :args, :fig_path, :fig_ext, :cache_path, :cache, :throw_errors, :latex_keep_unicode), Tuple{String, Symbol, String, Base.Dict{Any, Any}, String, Nothing, String, Symbol, Bool, Bool}}, typeof(Base.run), Weave.WeaveDoc})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Base.convert), Type{Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.embed_figures), Array{Weave.CodeChunk, 1}, String})
precompile(Tuple{typeof(Weave.run_inline), Weave.InlineCode, Weave.WeaveDoc, Weave.Report, Module})
precompile(Tuple{getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}, Weave.InlineCode})
precompile(Tuple{Type{WeaveSandBox36.Begin}, String, String})
precompile(Tuple{typeof(Base.:(!=)), WeaveSandBox36.Begin, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, WeaveSandBox36.Begin})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/html")}, WeaveSandBox36.Begin})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/html")}, WeaveSandBox36.Begin})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/html")}, WeaveSandBox36.Begin})
precompile(Tuple{typeof(Base.collect_to!), Array{Weave.Inline, 1}, Base.Generator{Array{Weave.Inline, 1}, getfield(Weave, Symbol("#39#40")){Weave.WeaveDoc, Weave.Report, Module}}, Int64, Int64})
precompile(Tuple{Type{WeaveSandBox36.End}, String})
precompile(Tuple{typeof(Base.:(!=)), WeaveSandBox36.End, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, WeaveSandBox36.End})
precompile(Tuple{typeof(Base.Multimedia._textrepr), Base.Multimedia.MIME{Symbol("text/html")}, WeaveSandBox36.End, Nothing})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/html")}, WeaveSandBox36.End})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/html")}, WeaveSandBox36.End})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Markdown.Config, Symbol})
precompile(Tuple{getfield(Markdown, Symbol("##parse#20")), Markdown.Config, typeof(Markdown.parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Weave.ioformat!), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(Weave.WeaveMarkdown.html)})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2HTML})
precompile(Tuple{typeof(Weave.addspace), String, Weave.InlineCode})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{getfield(Markdown, Symbol("#21#22")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.hashheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.pushitem!), Markdown.List, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Markdown, Symbol("#35#36")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.list), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#31#32")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.blockquote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#33#34")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.admonition), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("##_parse#90")), Bool, Bool, typeof(Markdown._parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Markdown.interpinner), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Markdown.blockinterp), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#29#30")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.footnote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Any, 1}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#56#58")){Markdown.MD}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#56#58")){Markdown.MD}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Markdown, Symbol("#55#57")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.github_table), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#23#25")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.setextheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.paragraph), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#63#64"))}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Symbol, Base.Dict{Any, Any}}}, Base.Dict{Any, Any}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Base.Dict{Any, Any}}, 1}, Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#63#64"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Base.Dict{Any, Any}}, 1}, Base.Pair{Symbol, Base.Dict{Any, Any}}, Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#63#64"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Symbol, B} where B, 1}, Int64, Array{Base.Pair{Symbol, Base.Dict{Any, Any}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{Symbol, Base.Dict{Any, Any}}, 1}, Base.Pair{Symbol, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#63#64"))}, Int64, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}, Array{Base.Pair{Symbol, B} where B, 1}})
precompile(Tuple{Type{NamedTuple{(:options, :author, :title), T} where T<:Tuple}, Tuple{Base.Dict{Any, Any}, String, String}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}}, Type{NamedTuple{(:options, :author, :title), Tuple{Base.Dict{Any, Any}, String, String}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion), Tuple{String, String, String, String, String, String, String}}, NamedTuple{(:options, :author, :title), Tuple{Base.Dict{Any, Any}, String, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, String, String, String, String, String, Base.Dict{Any, Any}, String, String}}})
precompile(Tuple{getfield(Mustache, Symbol("#kw##render")), NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion, :options, :author, :title), Tuple{String, String, String, String, String, String, String, Base.Dict{Any, Any}, String, String}}, typeof(Mustache.render), Mustache.MustacheTokens})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.MustacheTokens, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.renderTokens), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Mustache.Token, 1}, Mustache.Writer, Mustache.Context, Mustache.MustacheTokens, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Mustache.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.Writer, Mustache.MustacheTokens, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Symbol, Any}, String})
precompile(Tuple{typeof(Mustache.render), Base.GenericIOBuffer{Array{UInt8, 1}}, Mustache.Writer, Mustache.MustacheTokens, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Mustache, Symbol("#12#13")){Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion, :options, :author, :title), Tuple{String, String, String, String, String, String, String, Base.Dict{Any, Any}, String, String}}}, Mustache.MustacheTokens}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion, :options, :author, :title), Tuple{String, String, String, String, String, String, String, Base.Dict{Any, Any}, String, String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:themecss, :highlightcss, :body, :header_script, :source, :wtime, :wversion, :options, :author, :title), Tuple{String, String, String, String, String, String, String, Base.Dict{Any, Any}, String, String}}}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Any}, Vararg{Base.Pair{Symbol, Any}, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, Base.SubString{String}})
precompile(Tuple{typeof(Mustache.lookup_dotted), Mustache.Context, String})
precompile(Tuple{typeof(Mustache.lookup), Mustache.Context, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Any}, String})
precompile(Tuple{typeof(Mustache._lookup_in_view), Base.Dict{Symbol, Any}, String})
precompile(Tuple{typeof(Mustache.lookup_in_view), Base.Dict{Symbol, Any}, String})
precompile(Tuple{typeof(Base.setproperty!), Weave.WeaveDoc, Symbol, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Base.convert), Type{Any}, Weave.JMarkdown2tex})
precompile(Tuple{Type{WeaveSandBox37.Begin}, String, String})
precompile(Tuple{typeof(Base.:(!=)), WeaveSandBox37.Begin, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, WeaveSandBox37.Begin})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, WeaveSandBox37.Begin})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, WeaveSandBox37.Begin})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/latex")}, WeaveSandBox37.Begin})
precompile(Tuple{Type{WeaveSandBox37.End}, String})
precompile(Tuple{typeof(Base.:(!=)), WeaveSandBox37.End, Nothing})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, WeaveSandBox37.End})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/latex")}, WeaveSandBox37.End})
precompile(Tuple{getfield(Base.Multimedia, Symbol("##repr#1")), Nothing, typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/latex")}, WeaveSandBox37.End})
precompile(Tuple{typeof(Base.Multimedia.display), Weave.Report, Base.Multimedia.MIME{Symbol("text/latex")}, WeaveSandBox37.End})
precompile(Tuple{typeof(Weave.ioformat!), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(Markdown.latex)})
precompile(Tuple{typeof(Weave.format_chunk), Weave.DocChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Weave.format_termchunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Weave.formatfigures), Weave.CodeChunk, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Weave.format_chunk), Weave.CodeChunk, Base.Dict{Symbol, Any}, Weave.JMarkdown2tex})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#65#66"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, Base.Dict{Any, Any}}, 1}, Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#65#66"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Symbol, Base.Dict{Any, Any}}, 1}, Base.Pair{Symbol, Base.Dict{Any, Any}}, Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#65#66"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Symbol, B} where B, 1}, Base.Generator{Base.Dict{Any, Any}, getfield(Weave, Symbol("#65#66"))}, Int64, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:body, :highlight), Tuple{String, String}}, Array{Base.Pair{Symbol, B} where B, 1}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:body, :highlight), Tuple{String, String}}}, Type{NamedTuple{(:options, :author, :title), Tuple{Base.Dict{Any, Any}, String, String}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:body, :highlight), Tuple{String, String}}, NamedTuple{(:options, :author, :title), Tuple{Base.Dict{Any, Any}, String, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Base.Dict{Any, Any}, String, String}}})
precompile(Tuple{getfield(Mustache, Symbol("#kw##render")), NamedTuple{(:body, :highlight, :options, :author, :title), Tuple{String, String, Base.Dict{Any, Any}, String, String}}, typeof(Mustache.render), Mustache.MustacheTokens})
precompile(Tuple{getfield(Mustache, Symbol("#12#13")){Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:body, :highlight, :options, :author, :title), Tuple{String, String, Base.Dict{Any, Any}, String, String}}}, Mustache.MustacheTokens}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:body, :highlight, :options, :author, :title), Tuple{String, String, Base.Dict{Any, Any}, String, String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:body, :highlight, :options, :author, :title), Tuple{String, String, Base.Dict{Any, Any}, String, String}}}, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Tuple{Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}, Base.Pair{Symbol, Any}}})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
